
ProjectDigitalIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ee8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084ee8  00084ee8  0000cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00084ef0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f0  2007099c  0008588c  0001099c  2**2
                  ALLOC
  4 .stack        00002004  20070b8c  00085a7c  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f894  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026f5  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006134  00000000  00000000  000229a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b30  00000000  00000000  00028add  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a08  00000000  00000000  0002960d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001955c  00000000  00000000  0002a015  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fc8f  00000000  00000000  00043571  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bad1  00000000  00000000  00053200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023a4  00000000  00000000  000becd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b90 	.word	0x20072b90
   80004:	00081a49 	.word	0x00081a49
   80008:	00081a45 	.word	0x00081a45
   8000c:	00081a45 	.word	0x00081a45
   80010:	00081a45 	.word	0x00081a45
   80014:	00081a45 	.word	0x00081a45
   80018:	00081a45 	.word	0x00081a45
	...
   8002c:	00081a45 	.word	0x00081a45
   80030:	00081a45 	.word	0x00081a45
   80034:	00000000 	.word	0x00000000
   80038:	00081a45 	.word	0x00081a45
   8003c:	00081a45 	.word	0x00081a45
   80040:	00081a45 	.word	0x00081a45
   80044:	00081a45 	.word	0x00081a45
   80048:	00081a45 	.word	0x00081a45
   8004c:	00081a45 	.word	0x00081a45
   80050:	00081a45 	.word	0x00081a45
   80054:	00081a45 	.word	0x00081a45
   80058:	00081a45 	.word	0x00081a45
   8005c:	00081a45 	.word	0x00081a45
   80060:	00081a45 	.word	0x00081a45
   80064:	00081a45 	.word	0x00081a45
   80068:	00000000 	.word	0x00000000
   8006c:	000818b5 	.word	0x000818b5
   80070:	000818c9 	.word	0x000818c9
   80074:	000818dd 	.word	0x000818dd
   80078:	000818f1 	.word	0x000818f1
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	00081a45 	.word	0x00081a45
   8008c:	00081a45 	.word	0x00081a45
   80090:	00081a45 	.word	0x00081a45
   80094:	00081a45 	.word	0x00081a45
   80098:	00081a45 	.word	0x00081a45
   8009c:	00081a45 	.word	0x00081a45
   800a0:	00081a45 	.word	0x00081a45
   800a4:	00000000 	.word	0x00000000
   800a8:	00081a45 	.word	0x00081a45
   800ac:	00081a45 	.word	0x00081a45
   800b0:	00081a45 	.word	0x00081a45
   800b4:	00081a45 	.word	0x00081a45
   800b8:	00081a45 	.word	0x00081a45
   800bc:	00081a45 	.word	0x00081a45
   800c0:	00081a45 	.word	0x00081a45
   800c4:	00081a45 	.word	0x00081a45
   800c8:	00081a45 	.word	0x00081a45
   800cc:	00081a45 	.word	0x00081a45
   800d0:	00081a45 	.word	0x00081a45
   800d4:	00081a45 	.word	0x00081a45
   800d8:	00081a45 	.word	0x00081a45
   800dc:	00081a45 	.word	0x00081a45
   800e0:	00081a45 	.word	0x00081a45
   800e4:	00081a45 	.word	0x00081a45
   800e8:	00081a45 	.word	0x00081a45
   800ec:	00081a45 	.word	0x00081a45
   800f0:	00081a45 	.word	0x00081a45

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00084ef0 	.word	0x00084ef0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084ef0 	.word	0x00084ef0
   8013c:	200709a0 	.word	0x200709a0
   80140:	00084ef0 	.word	0x00084ef0
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b84 	.word	0x20070b84
   80184:	20070b00 	.word	0x20070b00

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	00080ea9 	.word	0x00080ea9
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a54 	.word	0x20070a54
   80210:	200709b8 	.word	0x200709b8

00080214 <pinMode>:

#define PIOB_BASE_ADDRESS 0x400E1000U

void pinMode(int pinNumber, mode_definition mode)
{
	if (mode == OUTPUT)	/* You only have to program a function that cares about OUTPUT, and does nothing for the other values */
   80214:	2902      	cmp	r1, #2
   80216:	d10e      	bne.n	80236 <pinMode+0x22>
	{
		if(pinNumber == 13)
   80218:	280d      	cmp	r0, #13
   8021a:	d105      	bne.n	80228 <pinMode+0x14>
		{
			PIOB-> PIO_PER = PIO_PB27;
   8021c:	4b06      	ldr	r3, [pc, #24]	; (80238 <pinMode+0x24>)
   8021e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80222:	601a      	str	r2, [r3, #0]
			PIOB -> PIO_OER = PIO_PB27;
   80224:	611a      	str	r2, [r3, #16]
   80226:	4770      	bx	lr
		}
		else if(pinNumber == 22)
   80228:	2816      	cmp	r0, #22
   8022a:	d104      	bne.n	80236 <pinMode+0x22>
		{
			PIOB-> PIO_PER = PIO_PB26;
   8022c:	4b02      	ldr	r3, [pc, #8]	; (80238 <pinMode+0x24>)
   8022e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80232:	601a      	str	r2, [r3, #0]
			PIOB -> PIO_OER = PIO_PB26;
   80234:	611a      	str	r2, [r3, #16]
   80236:	4770      	bx	lr
   80238:	400e1000 	.word	0x400e1000

0008023c <digitalWrite>:
	}
}

void digitalWrite(int pinNumber, int value)
{
	if (value == HIGH)
   8023c:	2901      	cmp	r1, #1
   8023e:	d10d      	bne.n	8025c <digitalWrite+0x20>
	{
		if(pinNumber == 13)
   80240:	280d      	cmp	r0, #13
   80242:	d104      	bne.n	8024e <digitalWrite+0x12>
		{
			PIOB-> PIO_SODR = PIO_PB27;
   80244:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <digitalWrite+0x40>)
   8024a:	631a      	str	r2, [r3, #48]	; 0x30
   8024c:	4770      	bx	lr
		}
		else if(pinNumber == 22)
   8024e:	2816      	cmp	r0, #22
   80250:	d112      	bne.n	80278 <digitalWrite+0x3c>
		{
			PIOB-> PIO_SODR = PIO_PB26;
   80252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80256:	4b09      	ldr	r3, [pc, #36]	; (8027c <digitalWrite+0x40>)
   80258:	631a      	str	r2, [r3, #48]	; 0x30
   8025a:	4770      	bx	lr
		}
	}
	else if (value == LOW)
   8025c:	b961      	cbnz	r1, 80278 <digitalWrite+0x3c>
	{
		if(pinNumber == 13)
   8025e:	280d      	cmp	r0, #13
   80260:	d104      	bne.n	8026c <digitalWrite+0x30>
		{
			PIOB-> PIO_CODR = PIO_PB27;
   80262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80266:	4b05      	ldr	r3, [pc, #20]	; (8027c <digitalWrite+0x40>)
   80268:	635a      	str	r2, [r3, #52]	; 0x34
   8026a:	4770      	bx	lr
		}
		else if(pinNumber == 22)
   8026c:	2816      	cmp	r0, #22
   8026e:	d103      	bne.n	80278 <digitalWrite+0x3c>
		{
			PIOB-> PIO_CODR = PIO_PB26;
   80270:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80274:	4b01      	ldr	r3, [pc, #4]	; (8027c <digitalWrite+0x40>)
   80276:	635a      	str	r2, [r3, #52]	; 0x34
   80278:	4770      	bx	lr
   8027a:	bf00      	nop
   8027c:	400e1000 	.word	0x400e1000

00080280 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80284:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80286:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   8028a:	d132      	bne.n	802f2 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8028c:	4b5f      	ldr	r3, [pc, #380]	; (8040c <UnityPrintNumber+0x18c>)
   8028e:	6818      	ldr	r0, [r3, #0]
   80290:	6882      	ldr	r2, [r0, #8]
   80292:	6893      	ldr	r3, [r2, #8]
   80294:	3b01      	subs	r3, #1
   80296:	6093      	str	r3, [r2, #8]
   80298:	2b00      	cmp	r3, #0
   8029a:	da1d      	bge.n	802d8 <UnityPrintNumber+0x58>
   8029c:	6882      	ldr	r2, [r0, #8]
   8029e:	6891      	ldr	r1, [r2, #8]
   802a0:	6993      	ldr	r3, [r2, #24]
   802a2:	4299      	cmp	r1, r3
   802a4:	db12      	blt.n	802cc <UnityPrintNumber+0x4c>
   802a6:	6813      	ldr	r3, [r2, #0]
   802a8:	222d      	movs	r2, #45	; 0x2d
   802aa:	701a      	strb	r2, [r3, #0]
   802ac:	4b57      	ldr	r3, [pc, #348]	; (8040c <UnityPrintNumber+0x18c>)
   802ae:	6818      	ldr	r0, [r3, #0]
   802b0:	6882      	ldr	r2, [r0, #8]
   802b2:	6813      	ldr	r3, [r2, #0]
   802b4:	7819      	ldrb	r1, [r3, #0]
   802b6:	290a      	cmp	r1, #10
   802b8:	d002      	beq.n	802c0 <UnityPrintNumber+0x40>
   802ba:	3301      	adds	r3, #1
   802bc:	6013      	str	r3, [r2, #0]
   802be:	e04f      	b.n	80360 <UnityPrintNumber+0xe0>
   802c0:	210a      	movs	r1, #10
   802c2:	4b53      	ldr	r3, [pc, #332]	; (80410 <UnityPrintNumber+0x190>)
   802c4:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802c6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   802ca:	e049      	b.n	80360 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   802cc:	212d      	movs	r1, #45	; 0x2d
   802ce:	4b50      	ldr	r3, [pc, #320]	; (80410 <UnityPrintNumber+0x190>)
   802d0:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   802d6:	e043      	b.n	80360 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   802d8:	6883      	ldr	r3, [r0, #8]
   802da:	681b      	ldr	r3, [r3, #0]
   802dc:	222d      	movs	r2, #45	; 0x2d
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	4b4a      	ldr	r3, [pc, #296]	; (8040c <UnityPrintNumber+0x18c>)
   802e2:	681b      	ldr	r3, [r3, #0]
   802e4:	689b      	ldr	r3, [r3, #8]
   802e6:	681a      	ldr	r2, [r3, #0]
   802e8:	3201      	adds	r2, #1
   802ea:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802ec:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   802f0:	e036      	b.n	80360 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   802f2:	2800      	cmp	r0, #0
   802f4:	da34      	bge.n	80360 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   802f6:	4b45      	ldr	r3, [pc, #276]	; (8040c <UnityPrintNumber+0x18c>)
   802f8:	6818      	ldr	r0, [r3, #0]
   802fa:	6882      	ldr	r2, [r0, #8]
   802fc:	6893      	ldr	r3, [r2, #8]
   802fe:	3b01      	subs	r3, #1
   80300:	6093      	str	r3, [r2, #8]
   80302:	2b00      	cmp	r3, #0
   80304:	da19      	bge.n	8033a <UnityPrintNumber+0xba>
   80306:	6882      	ldr	r2, [r0, #8]
   80308:	6891      	ldr	r1, [r2, #8]
   8030a:	6993      	ldr	r3, [r2, #24]
   8030c:	4299      	cmp	r1, r3
   8030e:	db10      	blt.n	80332 <UnityPrintNumber+0xb2>
   80310:	6813      	ldr	r3, [r2, #0]
   80312:	222d      	movs	r2, #45	; 0x2d
   80314:	701a      	strb	r2, [r3, #0]
   80316:	4b3d      	ldr	r3, [pc, #244]	; (8040c <UnityPrintNumber+0x18c>)
   80318:	6818      	ldr	r0, [r3, #0]
   8031a:	6882      	ldr	r2, [r0, #8]
   8031c:	6813      	ldr	r3, [r2, #0]
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	290a      	cmp	r1, #10
   80322:	d002      	beq.n	8032a <UnityPrintNumber+0xaa>
   80324:	3301      	adds	r3, #1
   80326:	6013      	str	r3, [r2, #0]
   80328:	e011      	b.n	8034e <UnityPrintNumber+0xce>
   8032a:	210a      	movs	r1, #10
   8032c:	4b38      	ldr	r3, [pc, #224]	; (80410 <UnityPrintNumber+0x190>)
   8032e:	4798      	blx	r3
   80330:	e00d      	b.n	8034e <UnityPrintNumber+0xce>
   80332:	212d      	movs	r1, #45	; 0x2d
   80334:	4b36      	ldr	r3, [pc, #216]	; (80410 <UnityPrintNumber+0x190>)
   80336:	4798      	blx	r3
   80338:	e009      	b.n	8034e <UnityPrintNumber+0xce>
   8033a:	6883      	ldr	r3, [r0, #8]
   8033c:	681b      	ldr	r3, [r3, #0]
   8033e:	222d      	movs	r2, #45	; 0x2d
   80340:	701a      	strb	r2, [r3, #0]
   80342:	4b32      	ldr	r3, [pc, #200]	; (8040c <UnityPrintNumber+0x18c>)
   80344:	681b      	ldr	r3, [r3, #0]
   80346:	689b      	ldr	r3, [r3, #8]
   80348:	681a      	ldr	r2, [r3, #0]
   8034a:	3201      	adds	r2, #1
   8034c:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   8034e:	426d      	negs	r5, r5
   80350:	e006      	b.n	80360 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80352:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80356:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80358:	429c      	cmp	r4, r3
   8035a:	da06      	bge.n	8036a <UnityPrintNumber+0xea>
            divisor = next_divisor;
   8035c:	461c      	mov	r4, r3
   8035e:	e000      	b.n	80362 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80360:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80362:	fbb5 f3f4 	udiv	r3, r5, r4
   80366:	2b09      	cmp	r3, #9
   80368:	d8f3      	bhi.n	80352 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   8036a:	4e28      	ldr	r6, [pc, #160]	; (8040c <UnityPrintNumber+0x18c>)
   8036c:	4f29      	ldr	r7, [pc, #164]	; (80414 <UnityPrintNumber+0x194>)
   8036e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80410 <UnityPrintNumber+0x190>
   80372:	6830      	ldr	r0, [r6, #0]
   80374:	6882      	ldr	r2, [r0, #8]
   80376:	6893      	ldr	r3, [r2, #8]
   80378:	3b01      	subs	r3, #1
   8037a:	6093      	str	r3, [r2, #8]
   8037c:	2b00      	cmp	r3, #0
   8037e:	da29      	bge.n	803d4 <UnityPrintNumber+0x154>
   80380:	6882      	ldr	r2, [r0, #8]
   80382:	6891      	ldr	r1, [r2, #8]
   80384:	6993      	ldr	r3, [r2, #24]
   80386:	4299      	cmp	r1, r3
   80388:	db17      	blt.n	803ba <UnityPrintNumber+0x13a>
   8038a:	6811      	ldr	r1, [r2, #0]
   8038c:	fbb5 f3f4 	udiv	r3, r5, r4
   80390:	fba7 0203 	umull	r0, r2, r7, r3
   80394:	08d2      	lsrs	r2, r2, #3
   80396:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8039a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8039e:	3330      	adds	r3, #48	; 0x30
   803a0:	700b      	strb	r3, [r1, #0]
   803a2:	6830      	ldr	r0, [r6, #0]
   803a4:	6882      	ldr	r2, [r0, #8]
   803a6:	6813      	ldr	r3, [r2, #0]
   803a8:	7819      	ldrb	r1, [r3, #0]
   803aa:	290a      	cmp	r1, #10
   803ac:	d002      	beq.n	803b4 <UnityPrintNumber+0x134>
   803ae:	3301      	adds	r3, #1
   803b0:	6013      	str	r3, [r2, #0]
   803b2:	e021      	b.n	803f8 <UnityPrintNumber+0x178>
   803b4:	210a      	movs	r1, #10
   803b6:	47c0      	blx	r8
   803b8:	e01e      	b.n	803f8 <UnityPrintNumber+0x178>
   803ba:	fbb5 f3f4 	udiv	r3, r5, r4
   803be:	fba7 e103 	umull	lr, r1, r7, r3
   803c2:	08c9      	lsrs	r1, r1, #3
   803c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   803c8:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   803cc:	3130      	adds	r1, #48	; 0x30
   803ce:	b2c9      	uxtb	r1, r1
   803d0:	47c0      	blx	r8
   803d2:	e011      	b.n	803f8 <UnityPrintNumber+0x178>
   803d4:	6883      	ldr	r3, [r0, #8]
   803d6:	6819      	ldr	r1, [r3, #0]
   803d8:	fbb5 f3f4 	udiv	r3, r5, r4
   803dc:	fba7 0203 	umull	r0, r2, r7, r3
   803e0:	08d2      	lsrs	r2, r2, #3
   803e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   803e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   803ea:	3330      	adds	r3, #48	; 0x30
   803ec:	700b      	strb	r3, [r1, #0]
   803ee:	6833      	ldr	r3, [r6, #0]
   803f0:	689b      	ldr	r3, [r3, #8]
   803f2:	681a      	ldr	r2, [r3, #0]
   803f4:	3201      	adds	r2, #1
   803f6:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   803f8:	4b07      	ldr	r3, [pc, #28]	; (80418 <UnityPrintNumber+0x198>)
   803fa:	fb83 2304 	smull	r2, r3, r3, r4
   803fe:	17e4      	asrs	r4, r4, #31
   80400:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80404:	2c00      	cmp	r4, #0
   80406:	dcb4      	bgt.n	80372 <UnityPrintNumber+0xf2>
}
   80408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8040c:	20070560 	.word	0x20070560
   80410:	00082be5 	.word	0x00082be5
   80414:	cccccccd 	.word	0xcccccccd
   80418:	66666667 	.word	0x66666667

0008041c <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   8041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80420:	4606      	mov	r6, r0
   80422:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80424:	4b5e      	ldr	r3, [pc, #376]	; (805a0 <UnityPrintNumberHex+0x184>)
   80426:	6818      	ldr	r0, [r3, #0]
   80428:	6882      	ldr	r2, [r0, #8]
   8042a:	6893      	ldr	r3, [r2, #8]
   8042c:	3b01      	subs	r3, #1
   8042e:	6093      	str	r3, [r2, #8]
   80430:	2b00      	cmp	r3, #0
   80432:	da19      	bge.n	80468 <UnityPrintNumberHex+0x4c>
   80434:	6882      	ldr	r2, [r0, #8]
   80436:	6891      	ldr	r1, [r2, #8]
   80438:	6993      	ldr	r3, [r2, #24]
   8043a:	4299      	cmp	r1, r3
   8043c:	db10      	blt.n	80460 <UnityPrintNumberHex+0x44>
   8043e:	6813      	ldr	r3, [r2, #0]
   80440:	2230      	movs	r2, #48	; 0x30
   80442:	701a      	strb	r2, [r3, #0]
   80444:	4b56      	ldr	r3, [pc, #344]	; (805a0 <UnityPrintNumberHex+0x184>)
   80446:	6818      	ldr	r0, [r3, #0]
   80448:	6882      	ldr	r2, [r0, #8]
   8044a:	6813      	ldr	r3, [r2, #0]
   8044c:	7819      	ldrb	r1, [r3, #0]
   8044e:	290a      	cmp	r1, #10
   80450:	d002      	beq.n	80458 <UnityPrintNumberHex+0x3c>
   80452:	3301      	adds	r3, #1
   80454:	6013      	str	r3, [r2, #0]
   80456:	e011      	b.n	8047c <UnityPrintNumberHex+0x60>
   80458:	210a      	movs	r1, #10
   8045a:	4b52      	ldr	r3, [pc, #328]	; (805a4 <UnityPrintNumberHex+0x188>)
   8045c:	4798      	blx	r3
   8045e:	e00d      	b.n	8047c <UnityPrintNumberHex+0x60>
   80460:	2130      	movs	r1, #48	; 0x30
   80462:	4b50      	ldr	r3, [pc, #320]	; (805a4 <UnityPrintNumberHex+0x188>)
   80464:	4798      	blx	r3
   80466:	e009      	b.n	8047c <UnityPrintNumberHex+0x60>
   80468:	6883      	ldr	r3, [r0, #8]
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	2230      	movs	r2, #48	; 0x30
   8046e:	701a      	strb	r2, [r3, #0]
   80470:	4b4b      	ldr	r3, [pc, #300]	; (805a0 <UnityPrintNumberHex+0x184>)
   80472:	681b      	ldr	r3, [r3, #0]
   80474:	689b      	ldr	r3, [r3, #8]
   80476:	681a      	ldr	r2, [r3, #0]
   80478:	3201      	adds	r2, #1
   8047a:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   8047c:	4b48      	ldr	r3, [pc, #288]	; (805a0 <UnityPrintNumberHex+0x184>)
   8047e:	6818      	ldr	r0, [r3, #0]
   80480:	6882      	ldr	r2, [r0, #8]
   80482:	6893      	ldr	r3, [r2, #8]
   80484:	3b01      	subs	r3, #1
   80486:	6093      	str	r3, [r2, #8]
   80488:	2b00      	cmp	r3, #0
   8048a:	da1b      	bge.n	804c4 <UnityPrintNumberHex+0xa8>
   8048c:	6882      	ldr	r2, [r0, #8]
   8048e:	6891      	ldr	r1, [r2, #8]
   80490:	6993      	ldr	r3, [r2, #24]
   80492:	4299      	cmp	r1, r3
   80494:	db10      	blt.n	804b8 <UnityPrintNumberHex+0x9c>
   80496:	6813      	ldr	r3, [r2, #0]
   80498:	2278      	movs	r2, #120	; 0x78
   8049a:	701a      	strb	r2, [r3, #0]
   8049c:	4b40      	ldr	r3, [pc, #256]	; (805a0 <UnityPrintNumberHex+0x184>)
   8049e:	6818      	ldr	r0, [r3, #0]
   804a0:	6882      	ldr	r2, [r0, #8]
   804a2:	6813      	ldr	r3, [r2, #0]
   804a4:	7819      	ldrb	r1, [r3, #0]
   804a6:	290a      	cmp	r1, #10
   804a8:	d002      	beq.n	804b0 <UnityPrintNumberHex+0x94>
   804aa:	3301      	adds	r3, #1
   804ac:	6013      	str	r3, [r2, #0]
   804ae:	e006      	b.n	804be <UnityPrintNumberHex+0xa2>
   804b0:	210a      	movs	r1, #10
   804b2:	4b3c      	ldr	r3, [pc, #240]	; (805a4 <UnityPrintNumberHex+0x188>)
   804b4:	4798      	blx	r3
   804b6:	e002      	b.n	804be <UnityPrintNumberHex+0xa2>
   804b8:	2178      	movs	r1, #120	; 0x78
   804ba:	4b3a      	ldr	r3, [pc, #232]	; (805a4 <UnityPrintNumberHex+0x188>)
   804bc:	4798      	blx	r3

    while (nibbles > 0)
   804be:	b964      	cbnz	r4, 804da <UnityPrintNumberHex+0xbe>
   804c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   804c4:	6883      	ldr	r3, [r0, #8]
   804c6:	681b      	ldr	r3, [r3, #0]
   804c8:	2278      	movs	r2, #120	; 0x78
   804ca:	701a      	strb	r2, [r3, #0]
   804cc:	4b34      	ldr	r3, [pc, #208]	; (805a0 <UnityPrintNumberHex+0x184>)
   804ce:	681b      	ldr	r3, [r3, #0]
   804d0:	689b      	ldr	r3, [r3, #8]
   804d2:	681a      	ldr	r2, [r3, #0]
   804d4:	3201      	adds	r2, #1
   804d6:	601a      	str	r2, [r3, #0]
   804d8:	e7f1      	b.n	804be <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   804da:	4d31      	ldr	r5, [pc, #196]	; (805a0 <UnityPrintNumberHex+0x184>)
   804dc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 805a4 <UnityPrintNumberHex+0x188>
   804e0:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   804e4:	3c01      	subs	r4, #1
   804e6:	b2e4      	uxtb	r4, r4
   804e8:	00a3      	lsls	r3, r4, #2
   804ea:	fa26 f303 	lsr.w	r3, r6, r3
   804ee:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   804f2:	2b09      	cmp	r3, #9
   804f4:	d828      	bhi.n	80548 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   804f6:	6828      	ldr	r0, [r5, #0]
   804f8:	6881      	ldr	r1, [r0, #8]
   804fa:	688a      	ldr	r2, [r1, #8]
   804fc:	3a01      	subs	r2, #1
   804fe:	608a      	str	r2, [r1, #8]
   80500:	2a00      	cmp	r2, #0
   80502:	da17      	bge.n	80534 <UnityPrintNumberHex+0x118>
   80504:	6882      	ldr	r2, [r0, #8]
   80506:	6891      	ldr	r1, [r2, #8]
   80508:	6997      	ldr	r7, [r2, #24]
   8050a:	42b9      	cmp	r1, r7
   8050c:	db0e      	blt.n	8052c <UnityPrintNumberHex+0x110>
   8050e:	6812      	ldr	r2, [r2, #0]
   80510:	3330      	adds	r3, #48	; 0x30
   80512:	7013      	strb	r3, [r2, #0]
   80514:	6828      	ldr	r0, [r5, #0]
   80516:	6882      	ldr	r2, [r0, #8]
   80518:	6813      	ldr	r3, [r2, #0]
   8051a:	7819      	ldrb	r1, [r3, #0]
   8051c:	290a      	cmp	r1, #10
   8051e:	d002      	beq.n	80526 <UnityPrintNumberHex+0x10a>
   80520:	3301      	adds	r3, #1
   80522:	6013      	str	r3, [r2, #0]
   80524:	e038      	b.n	80598 <UnityPrintNumberHex+0x17c>
   80526:	4641      	mov	r1, r8
   80528:	47c8      	blx	r9
   8052a:	e035      	b.n	80598 <UnityPrintNumberHex+0x17c>
   8052c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80530:	47c8      	blx	r9
   80532:	e031      	b.n	80598 <UnityPrintNumberHex+0x17c>
   80534:	6882      	ldr	r2, [r0, #8]
   80536:	6812      	ldr	r2, [r2, #0]
   80538:	3330      	adds	r3, #48	; 0x30
   8053a:	7013      	strb	r3, [r2, #0]
   8053c:	682b      	ldr	r3, [r5, #0]
   8053e:	689b      	ldr	r3, [r3, #8]
   80540:	681a      	ldr	r2, [r3, #0]
   80542:	3201      	adds	r2, #1
   80544:	601a      	str	r2, [r3, #0]
   80546:	e027      	b.n	80598 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80548:	6828      	ldr	r0, [r5, #0]
   8054a:	6881      	ldr	r1, [r0, #8]
   8054c:	688a      	ldr	r2, [r1, #8]
   8054e:	3a01      	subs	r2, #1
   80550:	608a      	str	r2, [r1, #8]
   80552:	2a00      	cmp	r2, #0
   80554:	da17      	bge.n	80586 <UnityPrintNumberHex+0x16a>
   80556:	6882      	ldr	r2, [r0, #8]
   80558:	6891      	ldr	r1, [r2, #8]
   8055a:	6997      	ldr	r7, [r2, #24]
   8055c:	42b9      	cmp	r1, r7
   8055e:	db0e      	blt.n	8057e <UnityPrintNumberHex+0x162>
   80560:	6812      	ldr	r2, [r2, #0]
   80562:	3337      	adds	r3, #55	; 0x37
   80564:	7013      	strb	r3, [r2, #0]
   80566:	6828      	ldr	r0, [r5, #0]
   80568:	6882      	ldr	r2, [r0, #8]
   8056a:	6813      	ldr	r3, [r2, #0]
   8056c:	7819      	ldrb	r1, [r3, #0]
   8056e:	290a      	cmp	r1, #10
   80570:	d002      	beq.n	80578 <UnityPrintNumberHex+0x15c>
   80572:	3301      	adds	r3, #1
   80574:	6013      	str	r3, [r2, #0]
   80576:	e00f      	b.n	80598 <UnityPrintNumberHex+0x17c>
   80578:	4641      	mov	r1, r8
   8057a:	47c8      	blx	r9
   8057c:	e00c      	b.n	80598 <UnityPrintNumberHex+0x17c>
   8057e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   80582:	47c8      	blx	r9
   80584:	e008      	b.n	80598 <UnityPrintNumberHex+0x17c>
   80586:	6882      	ldr	r2, [r0, #8]
   80588:	6812      	ldr	r2, [r2, #0]
   8058a:	3337      	adds	r3, #55	; 0x37
   8058c:	7013      	strb	r3, [r2, #0]
   8058e:	682b      	ldr	r3, [r5, #0]
   80590:	689b      	ldr	r3, [r3, #8]
   80592:	681a      	ldr	r2, [r3, #0]
   80594:	3201      	adds	r2, #1
   80596:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80598:	2c00      	cmp	r4, #0
   8059a:	d1a3      	bne.n	804e4 <UnityPrintNumberHex+0xc8>
   8059c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805a0:	20070560 	.word	0x20070560
   805a4:	00082be5 	.word	0x00082be5

000805a8 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   805a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   805aa:	2800      	cmp	r0, #0
   805ac:	f000 810a 	beq.w	807c4 <UnityPrint+0x21c>
    {
        while (*pch)
   805b0:	7803      	ldrb	r3, [r0, #0]
   805b2:	2b00      	cmp	r3, #0
   805b4:	f000 8106 	beq.w	807c4 <UnityPrint+0x21c>
   805b8:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   805ba:	4d83      	ldr	r5, [pc, #524]	; (807c8 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   805bc:	4e83      	ldr	r6, [pc, #524]	; (807cc <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   805be:	4f84      	ldr	r7, [pc, #528]	; (807d0 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   805c0:	f1a3 0220 	sub.w	r2, r3, #32
   805c4:	b2d2      	uxtb	r2, r2
   805c6:	2a5e      	cmp	r2, #94	; 0x5e
   805c8:	d82a      	bhi.n	80620 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   805ca:	6828      	ldr	r0, [r5, #0]
   805cc:	6882      	ldr	r2, [r0, #8]
   805ce:	6893      	ldr	r3, [r2, #8]
   805d0:	3b01      	subs	r3, #1
   805d2:	6093      	str	r3, [r2, #8]
   805d4:	2b00      	cmp	r3, #0
   805d6:	da18      	bge.n	8060a <UnityPrint+0x62>
   805d8:	6882      	ldr	r2, [r0, #8]
   805da:	6891      	ldr	r1, [r2, #8]
   805dc:	6993      	ldr	r3, [r2, #24]
   805de:	4299      	cmp	r1, r3
   805e0:	db0f      	blt.n	80602 <UnityPrint+0x5a>
   805e2:	6813      	ldr	r3, [r2, #0]
   805e4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   805e8:	701a      	strb	r2, [r3, #0]
   805ea:	6828      	ldr	r0, [r5, #0]
   805ec:	6882      	ldr	r2, [r0, #8]
   805ee:	6813      	ldr	r3, [r2, #0]
   805f0:	7819      	ldrb	r1, [r3, #0]
   805f2:	290a      	cmp	r1, #10
   805f4:	d002      	beq.n	805fc <UnityPrint+0x54>
   805f6:	3301      	adds	r3, #1
   805f8:	6013      	str	r3, [r2, #0]
   805fa:	e0de      	b.n	807ba <UnityPrint+0x212>
   805fc:	210a      	movs	r1, #10
   805fe:	47b8      	blx	r7
   80600:	e0db      	b.n	807ba <UnityPrint+0x212>
   80602:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80606:	47b8      	blx	r7
   80608:	e0d7      	b.n	807ba <UnityPrint+0x212>
   8060a:	6883      	ldr	r3, [r0, #8]
   8060c:	681b      	ldr	r3, [r3, #0]
   8060e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80612:	701a      	strb	r2, [r3, #0]
   80614:	682b      	ldr	r3, [r5, #0]
   80616:	689b      	ldr	r3, [r3, #8]
   80618:	681a      	ldr	r2, [r3, #0]
   8061a:	3201      	adds	r2, #1
   8061c:	601a      	str	r2, [r3, #0]
   8061e:	e0cc      	b.n	807ba <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80620:	2b0d      	cmp	r3, #13
   80622:	d14e      	bne.n	806c2 <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80624:	6828      	ldr	r0, [r5, #0]
   80626:	6882      	ldr	r2, [r0, #8]
   80628:	6893      	ldr	r3, [r2, #8]
   8062a:	3b01      	subs	r3, #1
   8062c:	6093      	str	r3, [r2, #8]
   8062e:	2b00      	cmp	r3, #0
   80630:	da16      	bge.n	80660 <UnityPrint+0xb8>
   80632:	6882      	ldr	r2, [r0, #8]
   80634:	6891      	ldr	r1, [r2, #8]
   80636:	6993      	ldr	r3, [r2, #24]
   80638:	4299      	cmp	r1, r3
   8063a:	db0e      	blt.n	8065a <UnityPrint+0xb2>
   8063c:	6813      	ldr	r3, [r2, #0]
   8063e:	225c      	movs	r2, #92	; 0x5c
   80640:	701a      	strb	r2, [r3, #0]
   80642:	6828      	ldr	r0, [r5, #0]
   80644:	6882      	ldr	r2, [r0, #8]
   80646:	6813      	ldr	r3, [r2, #0]
   80648:	7819      	ldrb	r1, [r3, #0]
   8064a:	290a      	cmp	r1, #10
   8064c:	d002      	beq.n	80654 <UnityPrint+0xac>
   8064e:	3301      	adds	r3, #1
   80650:	6013      	str	r3, [r2, #0]
   80652:	e00e      	b.n	80672 <UnityPrint+0xca>
   80654:	210a      	movs	r1, #10
   80656:	47b8      	blx	r7
   80658:	e00b      	b.n	80672 <UnityPrint+0xca>
   8065a:	215c      	movs	r1, #92	; 0x5c
   8065c:	47b8      	blx	r7
   8065e:	e008      	b.n	80672 <UnityPrint+0xca>
   80660:	6883      	ldr	r3, [r0, #8]
   80662:	681b      	ldr	r3, [r3, #0]
   80664:	225c      	movs	r2, #92	; 0x5c
   80666:	701a      	strb	r2, [r3, #0]
   80668:	682b      	ldr	r3, [r5, #0]
   8066a:	689b      	ldr	r3, [r3, #8]
   8066c:	681a      	ldr	r2, [r3, #0]
   8066e:	3201      	adds	r2, #1
   80670:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80672:	6828      	ldr	r0, [r5, #0]
   80674:	6882      	ldr	r2, [r0, #8]
   80676:	6893      	ldr	r3, [r2, #8]
   80678:	3b01      	subs	r3, #1
   8067a:	6093      	str	r3, [r2, #8]
   8067c:	2b00      	cmp	r3, #0
   8067e:	da16      	bge.n	806ae <UnityPrint+0x106>
   80680:	6882      	ldr	r2, [r0, #8]
   80682:	6891      	ldr	r1, [r2, #8]
   80684:	6993      	ldr	r3, [r2, #24]
   80686:	4299      	cmp	r1, r3
   80688:	db0e      	blt.n	806a8 <UnityPrint+0x100>
   8068a:	6813      	ldr	r3, [r2, #0]
   8068c:	2272      	movs	r2, #114	; 0x72
   8068e:	701a      	strb	r2, [r3, #0]
   80690:	6828      	ldr	r0, [r5, #0]
   80692:	6882      	ldr	r2, [r0, #8]
   80694:	6813      	ldr	r3, [r2, #0]
   80696:	7819      	ldrb	r1, [r3, #0]
   80698:	290a      	cmp	r1, #10
   8069a:	d002      	beq.n	806a2 <UnityPrint+0xfa>
   8069c:	3301      	adds	r3, #1
   8069e:	6013      	str	r3, [r2, #0]
   806a0:	e08b      	b.n	807ba <UnityPrint+0x212>
   806a2:	210a      	movs	r1, #10
   806a4:	47b8      	blx	r7
   806a6:	e088      	b.n	807ba <UnityPrint+0x212>
   806a8:	2172      	movs	r1, #114	; 0x72
   806aa:	47b8      	blx	r7
   806ac:	e085      	b.n	807ba <UnityPrint+0x212>
   806ae:	6883      	ldr	r3, [r0, #8]
   806b0:	681b      	ldr	r3, [r3, #0]
   806b2:	2272      	movs	r2, #114	; 0x72
   806b4:	701a      	strb	r2, [r3, #0]
   806b6:	682b      	ldr	r3, [r5, #0]
   806b8:	689b      	ldr	r3, [r3, #8]
   806ba:	681a      	ldr	r2, [r3, #0]
   806bc:	3201      	adds	r2, #1
   806be:	601a      	str	r2, [r3, #0]
   806c0:	e07b      	b.n	807ba <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   806c2:	2b0a      	cmp	r3, #10
   806c4:	d14e      	bne.n	80764 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   806c6:	6828      	ldr	r0, [r5, #0]
   806c8:	6882      	ldr	r2, [r0, #8]
   806ca:	6893      	ldr	r3, [r2, #8]
   806cc:	3b01      	subs	r3, #1
   806ce:	6093      	str	r3, [r2, #8]
   806d0:	2b00      	cmp	r3, #0
   806d2:	da16      	bge.n	80702 <UnityPrint+0x15a>
   806d4:	6882      	ldr	r2, [r0, #8]
   806d6:	6891      	ldr	r1, [r2, #8]
   806d8:	6993      	ldr	r3, [r2, #24]
   806da:	4299      	cmp	r1, r3
   806dc:	db0e      	blt.n	806fc <UnityPrint+0x154>
   806de:	6813      	ldr	r3, [r2, #0]
   806e0:	225c      	movs	r2, #92	; 0x5c
   806e2:	701a      	strb	r2, [r3, #0]
   806e4:	6828      	ldr	r0, [r5, #0]
   806e6:	6882      	ldr	r2, [r0, #8]
   806e8:	6813      	ldr	r3, [r2, #0]
   806ea:	7819      	ldrb	r1, [r3, #0]
   806ec:	290a      	cmp	r1, #10
   806ee:	d002      	beq.n	806f6 <UnityPrint+0x14e>
   806f0:	3301      	adds	r3, #1
   806f2:	6013      	str	r3, [r2, #0]
   806f4:	e00e      	b.n	80714 <UnityPrint+0x16c>
   806f6:	210a      	movs	r1, #10
   806f8:	47b8      	blx	r7
   806fa:	e00b      	b.n	80714 <UnityPrint+0x16c>
   806fc:	215c      	movs	r1, #92	; 0x5c
   806fe:	47b8      	blx	r7
   80700:	e008      	b.n	80714 <UnityPrint+0x16c>
   80702:	6883      	ldr	r3, [r0, #8]
   80704:	681b      	ldr	r3, [r3, #0]
   80706:	225c      	movs	r2, #92	; 0x5c
   80708:	701a      	strb	r2, [r3, #0]
   8070a:	682b      	ldr	r3, [r5, #0]
   8070c:	689b      	ldr	r3, [r3, #8]
   8070e:	681a      	ldr	r2, [r3, #0]
   80710:	3201      	adds	r2, #1
   80712:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80714:	6828      	ldr	r0, [r5, #0]
   80716:	6882      	ldr	r2, [r0, #8]
   80718:	6893      	ldr	r3, [r2, #8]
   8071a:	3b01      	subs	r3, #1
   8071c:	6093      	str	r3, [r2, #8]
   8071e:	2b00      	cmp	r3, #0
   80720:	da16      	bge.n	80750 <UnityPrint+0x1a8>
   80722:	6882      	ldr	r2, [r0, #8]
   80724:	6891      	ldr	r1, [r2, #8]
   80726:	6993      	ldr	r3, [r2, #24]
   80728:	4299      	cmp	r1, r3
   8072a:	db0e      	blt.n	8074a <UnityPrint+0x1a2>
   8072c:	6813      	ldr	r3, [r2, #0]
   8072e:	226e      	movs	r2, #110	; 0x6e
   80730:	701a      	strb	r2, [r3, #0]
   80732:	6828      	ldr	r0, [r5, #0]
   80734:	6882      	ldr	r2, [r0, #8]
   80736:	6813      	ldr	r3, [r2, #0]
   80738:	7819      	ldrb	r1, [r3, #0]
   8073a:	290a      	cmp	r1, #10
   8073c:	d002      	beq.n	80744 <UnityPrint+0x19c>
   8073e:	3301      	adds	r3, #1
   80740:	6013      	str	r3, [r2, #0]
   80742:	e03a      	b.n	807ba <UnityPrint+0x212>
   80744:	210a      	movs	r1, #10
   80746:	47b8      	blx	r7
   80748:	e037      	b.n	807ba <UnityPrint+0x212>
   8074a:	216e      	movs	r1, #110	; 0x6e
   8074c:	47b8      	blx	r7
   8074e:	e034      	b.n	807ba <UnityPrint+0x212>
   80750:	6883      	ldr	r3, [r0, #8]
   80752:	681b      	ldr	r3, [r3, #0]
   80754:	226e      	movs	r2, #110	; 0x6e
   80756:	701a      	strb	r2, [r3, #0]
   80758:	682b      	ldr	r3, [r5, #0]
   8075a:	689b      	ldr	r3, [r3, #8]
   8075c:	681a      	ldr	r2, [r3, #0]
   8075e:	3201      	adds	r2, #1
   80760:	601a      	str	r2, [r3, #0]
   80762:	e02a      	b.n	807ba <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80764:	6828      	ldr	r0, [r5, #0]
   80766:	6882      	ldr	r2, [r0, #8]
   80768:	6893      	ldr	r3, [r2, #8]
   8076a:	3b01      	subs	r3, #1
   8076c:	6093      	str	r3, [r2, #8]
   8076e:	2b00      	cmp	r3, #0
   80770:	da16      	bge.n	807a0 <UnityPrint+0x1f8>
   80772:	6882      	ldr	r2, [r0, #8]
   80774:	6891      	ldr	r1, [r2, #8]
   80776:	6993      	ldr	r3, [r2, #24]
   80778:	4299      	cmp	r1, r3
   8077a:	db0e      	blt.n	8079a <UnityPrint+0x1f2>
   8077c:	6813      	ldr	r3, [r2, #0]
   8077e:	225c      	movs	r2, #92	; 0x5c
   80780:	701a      	strb	r2, [r3, #0]
   80782:	6828      	ldr	r0, [r5, #0]
   80784:	6882      	ldr	r2, [r0, #8]
   80786:	6813      	ldr	r3, [r2, #0]
   80788:	7819      	ldrb	r1, [r3, #0]
   8078a:	290a      	cmp	r1, #10
   8078c:	d002      	beq.n	80794 <UnityPrint+0x1ec>
   8078e:	3301      	adds	r3, #1
   80790:	6013      	str	r3, [r2, #0]
   80792:	e00e      	b.n	807b2 <UnityPrint+0x20a>
   80794:	210a      	movs	r1, #10
   80796:	47b8      	blx	r7
   80798:	e00b      	b.n	807b2 <UnityPrint+0x20a>
   8079a:	215c      	movs	r1, #92	; 0x5c
   8079c:	47b8      	blx	r7
   8079e:	e008      	b.n	807b2 <UnityPrint+0x20a>
   807a0:	6883      	ldr	r3, [r0, #8]
   807a2:	681b      	ldr	r3, [r3, #0]
   807a4:	225c      	movs	r2, #92	; 0x5c
   807a6:	701a      	strb	r2, [r3, #0]
   807a8:	682b      	ldr	r3, [r5, #0]
   807aa:	689b      	ldr	r3, [r3, #8]
   807ac:	681a      	ldr	r2, [r3, #0]
   807ae:	3201      	adds	r2, #1
   807b0:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   807b2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   807b6:	2102      	movs	r1, #2
   807b8:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   807ba:	f814 3b01 	ldrb.w	r3, [r4], #1
   807be:	2b00      	cmp	r3, #0
   807c0:	f47f aefe 	bne.w	805c0 <UnityPrint+0x18>
   807c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807c6:	bf00      	nop
   807c8:	20070560 	.word	0x20070560
   807cc:	0008041d 	.word	0x0008041d
   807d0:	00082be5 	.word	0x00082be5

000807d4 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   807d4:	b538      	push	{r3, r4, r5, lr}
   807d6:	460d      	mov	r5, r1
    UnityPrint(file);
   807d8:	4b46      	ldr	r3, [pc, #280]	; (808f4 <UnityTestResultsBegin+0x120>)
   807da:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   807dc:	4b46      	ldr	r3, [pc, #280]	; (808f8 <UnityTestResultsBegin+0x124>)
   807de:	6818      	ldr	r0, [r3, #0]
   807e0:	6884      	ldr	r4, [r0, #8]
   807e2:	68a2      	ldr	r2, [r4, #8]
   807e4:	3a01      	subs	r2, #1
   807e6:	60a2      	str	r2, [r4, #8]
   807e8:	2a00      	cmp	r2, #0
   807ea:	da19      	bge.n	80820 <UnityTestResultsBegin+0x4c>
   807ec:	6882      	ldr	r2, [r0, #8]
   807ee:	6893      	ldr	r3, [r2, #8]
   807f0:	6991      	ldr	r1, [r2, #24]
   807f2:	428b      	cmp	r3, r1
   807f4:	db10      	blt.n	80818 <UnityTestResultsBegin+0x44>
   807f6:	6813      	ldr	r3, [r2, #0]
   807f8:	223a      	movs	r2, #58	; 0x3a
   807fa:	701a      	strb	r2, [r3, #0]
   807fc:	4b3e      	ldr	r3, [pc, #248]	; (808f8 <UnityTestResultsBegin+0x124>)
   807fe:	6818      	ldr	r0, [r3, #0]
   80800:	6882      	ldr	r2, [r0, #8]
   80802:	6813      	ldr	r3, [r2, #0]
   80804:	7819      	ldrb	r1, [r3, #0]
   80806:	290a      	cmp	r1, #10
   80808:	d002      	beq.n	80810 <UnityTestResultsBegin+0x3c>
   8080a:	3301      	adds	r3, #1
   8080c:	6013      	str	r3, [r2, #0]
   8080e:	e011      	b.n	80834 <UnityTestResultsBegin+0x60>
   80810:	210a      	movs	r1, #10
   80812:	4b3a      	ldr	r3, [pc, #232]	; (808fc <UnityTestResultsBegin+0x128>)
   80814:	4798      	blx	r3
   80816:	e00d      	b.n	80834 <UnityTestResultsBegin+0x60>
   80818:	213a      	movs	r1, #58	; 0x3a
   8081a:	4b38      	ldr	r3, [pc, #224]	; (808fc <UnityTestResultsBegin+0x128>)
   8081c:	4798      	blx	r3
   8081e:	e009      	b.n	80834 <UnityTestResultsBegin+0x60>
   80820:	6883      	ldr	r3, [r0, #8]
   80822:	681b      	ldr	r3, [r3, #0]
   80824:	223a      	movs	r2, #58	; 0x3a
   80826:	701a      	strb	r2, [r3, #0]
   80828:	4b33      	ldr	r3, [pc, #204]	; (808f8 <UnityTestResultsBegin+0x124>)
   8082a:	681b      	ldr	r3, [r3, #0]
   8082c:	689b      	ldr	r3, [r3, #8]
   8082e:	681a      	ldr	r2, [r3, #0]
   80830:	3201      	adds	r2, #1
   80832:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80834:	4628      	mov	r0, r5
   80836:	4b32      	ldr	r3, [pc, #200]	; (80900 <UnityTestResultsBegin+0x12c>)
   80838:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8083a:	4b2f      	ldr	r3, [pc, #188]	; (808f8 <UnityTestResultsBegin+0x124>)
   8083c:	6818      	ldr	r0, [r3, #0]
   8083e:	6882      	ldr	r2, [r0, #8]
   80840:	6893      	ldr	r3, [r2, #8]
   80842:	3b01      	subs	r3, #1
   80844:	6093      	str	r3, [r2, #8]
   80846:	2b00      	cmp	r3, #0
   80848:	da19      	bge.n	8087e <UnityTestResultsBegin+0xaa>
   8084a:	6882      	ldr	r2, [r0, #8]
   8084c:	6891      	ldr	r1, [r2, #8]
   8084e:	6993      	ldr	r3, [r2, #24]
   80850:	4299      	cmp	r1, r3
   80852:	db10      	blt.n	80876 <UnityTestResultsBegin+0xa2>
   80854:	6813      	ldr	r3, [r2, #0]
   80856:	223a      	movs	r2, #58	; 0x3a
   80858:	701a      	strb	r2, [r3, #0]
   8085a:	4b27      	ldr	r3, [pc, #156]	; (808f8 <UnityTestResultsBegin+0x124>)
   8085c:	6818      	ldr	r0, [r3, #0]
   8085e:	6882      	ldr	r2, [r0, #8]
   80860:	6813      	ldr	r3, [r2, #0]
   80862:	7819      	ldrb	r1, [r3, #0]
   80864:	290a      	cmp	r1, #10
   80866:	d002      	beq.n	8086e <UnityTestResultsBegin+0x9a>
   80868:	3301      	adds	r3, #1
   8086a:	6013      	str	r3, [r2, #0]
   8086c:	e011      	b.n	80892 <UnityTestResultsBegin+0xbe>
   8086e:	210a      	movs	r1, #10
   80870:	4b22      	ldr	r3, [pc, #136]	; (808fc <UnityTestResultsBegin+0x128>)
   80872:	4798      	blx	r3
   80874:	e00d      	b.n	80892 <UnityTestResultsBegin+0xbe>
   80876:	213a      	movs	r1, #58	; 0x3a
   80878:	4b20      	ldr	r3, [pc, #128]	; (808fc <UnityTestResultsBegin+0x128>)
   8087a:	4798      	blx	r3
   8087c:	e009      	b.n	80892 <UnityTestResultsBegin+0xbe>
   8087e:	6883      	ldr	r3, [r0, #8]
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	223a      	movs	r2, #58	; 0x3a
   80884:	701a      	strb	r2, [r3, #0]
   80886:	4b1c      	ldr	r3, [pc, #112]	; (808f8 <UnityTestResultsBegin+0x124>)
   80888:	681b      	ldr	r3, [r3, #0]
   8088a:	689b      	ldr	r3, [r3, #8]
   8088c:	681a      	ldr	r2, [r3, #0]
   8088e:	3201      	adds	r2, #1
   80890:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80892:	4b1c      	ldr	r3, [pc, #112]	; (80904 <UnityTestResultsBegin+0x130>)
   80894:	6858      	ldr	r0, [r3, #4]
   80896:	4b17      	ldr	r3, [pc, #92]	; (808f4 <UnityTestResultsBegin+0x120>)
   80898:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8089a:	4b17      	ldr	r3, [pc, #92]	; (808f8 <UnityTestResultsBegin+0x124>)
   8089c:	6818      	ldr	r0, [r3, #0]
   8089e:	6882      	ldr	r2, [r0, #8]
   808a0:	6893      	ldr	r3, [r2, #8]
   808a2:	3b01      	subs	r3, #1
   808a4:	6093      	str	r3, [r2, #8]
   808a6:	2b00      	cmp	r3, #0
   808a8:	da19      	bge.n	808de <UnityTestResultsBegin+0x10a>
   808aa:	6882      	ldr	r2, [r0, #8]
   808ac:	6891      	ldr	r1, [r2, #8]
   808ae:	6993      	ldr	r3, [r2, #24]
   808b0:	4299      	cmp	r1, r3
   808b2:	db10      	blt.n	808d6 <UnityTestResultsBegin+0x102>
   808b4:	6813      	ldr	r3, [r2, #0]
   808b6:	223a      	movs	r2, #58	; 0x3a
   808b8:	701a      	strb	r2, [r3, #0]
   808ba:	4b0f      	ldr	r3, [pc, #60]	; (808f8 <UnityTestResultsBegin+0x124>)
   808bc:	6818      	ldr	r0, [r3, #0]
   808be:	6882      	ldr	r2, [r0, #8]
   808c0:	6813      	ldr	r3, [r2, #0]
   808c2:	7819      	ldrb	r1, [r3, #0]
   808c4:	290a      	cmp	r1, #10
   808c6:	d002      	beq.n	808ce <UnityTestResultsBegin+0xfa>
   808c8:	3301      	adds	r3, #1
   808ca:	6013      	str	r3, [r2, #0]
   808cc:	bd38      	pop	{r3, r4, r5, pc}
   808ce:	210a      	movs	r1, #10
   808d0:	4b0a      	ldr	r3, [pc, #40]	; (808fc <UnityTestResultsBegin+0x128>)
   808d2:	4798      	blx	r3
   808d4:	bd38      	pop	{r3, r4, r5, pc}
   808d6:	213a      	movs	r1, #58	; 0x3a
   808d8:	4b08      	ldr	r3, [pc, #32]	; (808fc <UnityTestResultsBegin+0x128>)
   808da:	4798      	blx	r3
   808dc:	bd38      	pop	{r3, r4, r5, pc}
   808de:	6883      	ldr	r3, [r0, #8]
   808e0:	681b      	ldr	r3, [r3, #0]
   808e2:	223a      	movs	r2, #58	; 0x3a
   808e4:	701a      	strb	r2, [r3, #0]
   808e6:	4b04      	ldr	r3, [pc, #16]	; (808f8 <UnityTestResultsBegin+0x124>)
   808e8:	681b      	ldr	r3, [r3, #0]
   808ea:	689b      	ldr	r3, [r3, #8]
   808ec:	681a      	ldr	r2, [r3, #0]
   808ee:	3201      	adds	r2, #1
   808f0:	601a      	str	r2, [r3, #0]
   808f2:	bd38      	pop	{r3, r4, r5, pc}
   808f4:	000805a9 	.word	0x000805a9
   808f8:	20070560 	.word	0x20070560
   808fc:	00082be5 	.word	0x00082be5
   80900:	00080281 	.word	0x00080281
   80904:	20070b04 	.word	0x20070b04

00080908 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80908:	b508      	push	{r3, lr}
   8090a:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   8090c:	4b19      	ldr	r3, [pc, #100]	; (80974 <UnityTestResultsFailBegin+0x6c>)
   8090e:	6818      	ldr	r0, [r3, #0]
   80910:	4b19      	ldr	r3, [pc, #100]	; (80978 <UnityTestResultsFailBegin+0x70>)
   80912:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80914:	4819      	ldr	r0, [pc, #100]	; (8097c <UnityTestResultsFailBegin+0x74>)
   80916:	4b1a      	ldr	r3, [pc, #104]	; (80980 <UnityTestResultsFailBegin+0x78>)
   80918:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8091a:	4b1a      	ldr	r3, [pc, #104]	; (80984 <UnityTestResultsFailBegin+0x7c>)
   8091c:	6818      	ldr	r0, [r3, #0]
   8091e:	6882      	ldr	r2, [r0, #8]
   80920:	6893      	ldr	r3, [r2, #8]
   80922:	3b01      	subs	r3, #1
   80924:	6093      	str	r3, [r2, #8]
   80926:	2b00      	cmp	r3, #0
   80928:	da19      	bge.n	8095e <UnityTestResultsFailBegin+0x56>
   8092a:	6882      	ldr	r2, [r0, #8]
   8092c:	6891      	ldr	r1, [r2, #8]
   8092e:	6993      	ldr	r3, [r2, #24]
   80930:	4299      	cmp	r1, r3
   80932:	db10      	blt.n	80956 <UnityTestResultsFailBegin+0x4e>
   80934:	6813      	ldr	r3, [r2, #0]
   80936:	223a      	movs	r2, #58	; 0x3a
   80938:	701a      	strb	r2, [r3, #0]
   8093a:	4b12      	ldr	r3, [pc, #72]	; (80984 <UnityTestResultsFailBegin+0x7c>)
   8093c:	6818      	ldr	r0, [r3, #0]
   8093e:	6882      	ldr	r2, [r0, #8]
   80940:	6813      	ldr	r3, [r2, #0]
   80942:	7819      	ldrb	r1, [r3, #0]
   80944:	290a      	cmp	r1, #10
   80946:	d002      	beq.n	8094e <UnityTestResultsFailBegin+0x46>
   80948:	3301      	adds	r3, #1
   8094a:	6013      	str	r3, [r2, #0]
   8094c:	bd08      	pop	{r3, pc}
   8094e:	210a      	movs	r1, #10
   80950:	4b0d      	ldr	r3, [pc, #52]	; (80988 <UnityTestResultsFailBegin+0x80>)
   80952:	4798      	blx	r3
   80954:	bd08      	pop	{r3, pc}
   80956:	213a      	movs	r1, #58	; 0x3a
   80958:	4b0b      	ldr	r3, [pc, #44]	; (80988 <UnityTestResultsFailBegin+0x80>)
   8095a:	4798      	blx	r3
   8095c:	bd08      	pop	{r3, pc}
   8095e:	6883      	ldr	r3, [r0, #8]
   80960:	681b      	ldr	r3, [r3, #0]
   80962:	223a      	movs	r2, #58	; 0x3a
   80964:	701a      	strb	r2, [r3, #0]
   80966:	4b07      	ldr	r3, [pc, #28]	; (80984 <UnityTestResultsFailBegin+0x7c>)
   80968:	681b      	ldr	r3, [r3, #0]
   8096a:	689b      	ldr	r3, [r3, #8]
   8096c:	681a      	ldr	r2, [r3, #0]
   8096e:	3201      	adds	r2, #1
   80970:	601a      	str	r2, [r3, #0]
   80972:	bd08      	pop	{r3, pc}
   80974:	20070b04 	.word	0x20070b04
   80978:	000807d5 	.word	0x000807d5
   8097c:	00084c24 	.word	0x00084c24
   80980:	000805a9 	.word	0x000805a9
   80984:	20070560 	.word	0x20070560
   80988:	00082be5 	.word	0x00082be5

0008098c <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   8098c:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   8098e:	4605      	mov	r5, r0
   80990:	b120      	cbz	r0, 8099c <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80992:	4803      	ldr	r0, [pc, #12]	; (809a0 <UnityAddMsgIfSpecified+0x14>)
   80994:	4c03      	ldr	r4, [pc, #12]	; (809a4 <UnityAddMsgIfSpecified+0x18>)
   80996:	47a0      	blx	r4
        UnityPrint(msg);
   80998:	4628      	mov	r0, r5
   8099a:	47a0      	blx	r4
   8099c:	bd38      	pop	{r3, r4, r5, pc}
   8099e:	bf00      	nop
   809a0:	00084c18 	.word	0x00084c18
   809a4:	000805a9 	.word	0x000805a9

000809a8 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   809a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809ac:	4607      	mov	r7, r0
   809ae:	4688      	mov	r8, r1
   809b0:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   809b2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   809b6:	4e43      	ldr	r6, [pc, #268]	; (80ac4 <UnityPrintMask+0x11c>)
   809b8:	f04f 0958 	mov.w	r9, #88	; 0x58
   809bc:	f8df a108 	ldr.w	sl, [pc, #264]	; 80ac8 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   809c0:	423c      	tst	r4, r7
   809c2:	d052      	beq.n	80a6a <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   809c4:	ea14 0f08 	tst.w	r4, r8
   809c8:	d027      	beq.n	80a1a <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   809ca:	6830      	ldr	r0, [r6, #0]
   809cc:	6882      	ldr	r2, [r0, #8]
   809ce:	6893      	ldr	r3, [r2, #8]
   809d0:	3b01      	subs	r3, #1
   809d2:	6093      	str	r3, [r2, #8]
   809d4:	2b00      	cmp	r3, #0
   809d6:	da16      	bge.n	80a06 <UnityPrintMask+0x5e>
   809d8:	6882      	ldr	r2, [r0, #8]
   809da:	6891      	ldr	r1, [r2, #8]
   809dc:	6993      	ldr	r3, [r2, #24]
   809de:	4299      	cmp	r1, r3
   809e0:	db0e      	blt.n	80a00 <UnityPrintMask+0x58>
   809e2:	6813      	ldr	r3, [r2, #0]
   809e4:	2231      	movs	r2, #49	; 0x31
   809e6:	701a      	strb	r2, [r3, #0]
   809e8:	6830      	ldr	r0, [r6, #0]
   809ea:	6882      	ldr	r2, [r0, #8]
   809ec:	6813      	ldr	r3, [r2, #0]
   809ee:	7819      	ldrb	r1, [r3, #0]
   809f0:	290a      	cmp	r1, #10
   809f2:	d002      	beq.n	809fa <UnityPrintMask+0x52>
   809f4:	3301      	adds	r3, #1
   809f6:	6013      	str	r3, [r2, #0]
   809f8:	e05e      	b.n	80ab8 <UnityPrintMask+0x110>
   809fa:	210a      	movs	r1, #10
   809fc:	47d0      	blx	sl
   809fe:	e05b      	b.n	80ab8 <UnityPrintMask+0x110>
   80a00:	2131      	movs	r1, #49	; 0x31
   80a02:	47d0      	blx	sl
   80a04:	e058      	b.n	80ab8 <UnityPrintMask+0x110>
   80a06:	6883      	ldr	r3, [r0, #8]
   80a08:	681b      	ldr	r3, [r3, #0]
   80a0a:	2231      	movs	r2, #49	; 0x31
   80a0c:	701a      	strb	r2, [r3, #0]
   80a0e:	6833      	ldr	r3, [r6, #0]
   80a10:	689b      	ldr	r3, [r3, #8]
   80a12:	681a      	ldr	r2, [r3, #0]
   80a14:	3201      	adds	r2, #1
   80a16:	601a      	str	r2, [r3, #0]
   80a18:	e04e      	b.n	80ab8 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80a1a:	6830      	ldr	r0, [r6, #0]
   80a1c:	6882      	ldr	r2, [r0, #8]
   80a1e:	6893      	ldr	r3, [r2, #8]
   80a20:	3b01      	subs	r3, #1
   80a22:	6093      	str	r3, [r2, #8]
   80a24:	2b00      	cmp	r3, #0
   80a26:	da16      	bge.n	80a56 <UnityPrintMask+0xae>
   80a28:	6882      	ldr	r2, [r0, #8]
   80a2a:	6891      	ldr	r1, [r2, #8]
   80a2c:	6993      	ldr	r3, [r2, #24]
   80a2e:	4299      	cmp	r1, r3
   80a30:	db0e      	blt.n	80a50 <UnityPrintMask+0xa8>
   80a32:	6813      	ldr	r3, [r2, #0]
   80a34:	2230      	movs	r2, #48	; 0x30
   80a36:	701a      	strb	r2, [r3, #0]
   80a38:	6830      	ldr	r0, [r6, #0]
   80a3a:	6882      	ldr	r2, [r0, #8]
   80a3c:	6813      	ldr	r3, [r2, #0]
   80a3e:	7819      	ldrb	r1, [r3, #0]
   80a40:	290a      	cmp	r1, #10
   80a42:	d002      	beq.n	80a4a <UnityPrintMask+0xa2>
   80a44:	3301      	adds	r3, #1
   80a46:	6013      	str	r3, [r2, #0]
   80a48:	e036      	b.n	80ab8 <UnityPrintMask+0x110>
   80a4a:	210a      	movs	r1, #10
   80a4c:	47d0      	blx	sl
   80a4e:	e033      	b.n	80ab8 <UnityPrintMask+0x110>
   80a50:	2130      	movs	r1, #48	; 0x30
   80a52:	47d0      	blx	sl
   80a54:	e030      	b.n	80ab8 <UnityPrintMask+0x110>
   80a56:	6883      	ldr	r3, [r0, #8]
   80a58:	681b      	ldr	r3, [r3, #0]
   80a5a:	2230      	movs	r2, #48	; 0x30
   80a5c:	701a      	strb	r2, [r3, #0]
   80a5e:	6833      	ldr	r3, [r6, #0]
   80a60:	689b      	ldr	r3, [r3, #8]
   80a62:	681a      	ldr	r2, [r3, #0]
   80a64:	3201      	adds	r2, #1
   80a66:	601a      	str	r2, [r3, #0]
   80a68:	e026      	b.n	80ab8 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80a6a:	6830      	ldr	r0, [r6, #0]
   80a6c:	6882      	ldr	r2, [r0, #8]
   80a6e:	6893      	ldr	r3, [r2, #8]
   80a70:	3b01      	subs	r3, #1
   80a72:	6093      	str	r3, [r2, #8]
   80a74:	2b00      	cmp	r3, #0
   80a76:	da16      	bge.n	80aa6 <UnityPrintMask+0xfe>
   80a78:	6882      	ldr	r2, [r0, #8]
   80a7a:	6891      	ldr	r1, [r2, #8]
   80a7c:	6993      	ldr	r3, [r2, #24]
   80a7e:	4299      	cmp	r1, r3
   80a80:	db0e      	blt.n	80aa0 <UnityPrintMask+0xf8>
   80a82:	6813      	ldr	r3, [r2, #0]
   80a84:	f883 9000 	strb.w	r9, [r3]
   80a88:	6830      	ldr	r0, [r6, #0]
   80a8a:	6882      	ldr	r2, [r0, #8]
   80a8c:	6813      	ldr	r3, [r2, #0]
   80a8e:	7819      	ldrb	r1, [r3, #0]
   80a90:	290a      	cmp	r1, #10
   80a92:	d002      	beq.n	80a9a <UnityPrintMask+0xf2>
   80a94:	3301      	adds	r3, #1
   80a96:	6013      	str	r3, [r2, #0]
   80a98:	e00e      	b.n	80ab8 <UnityPrintMask+0x110>
   80a9a:	210a      	movs	r1, #10
   80a9c:	47d0      	blx	sl
   80a9e:	e00b      	b.n	80ab8 <UnityPrintMask+0x110>
   80aa0:	4649      	mov	r1, r9
   80aa2:	47d0      	blx	sl
   80aa4:	e008      	b.n	80ab8 <UnityPrintMask+0x110>
   80aa6:	6883      	ldr	r3, [r0, #8]
   80aa8:	681b      	ldr	r3, [r3, #0]
   80aaa:	f883 9000 	strb.w	r9, [r3]
   80aae:	6833      	ldr	r3, [r6, #0]
   80ab0:	689b      	ldr	r3, [r3, #8]
   80ab2:	681a      	ldr	r2, [r3, #0]
   80ab4:	3201      	adds	r2, #1
   80ab6:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80ab8:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80aba:	3d01      	subs	r5, #1
   80abc:	d180      	bne.n	809c0 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80ac2:	bf00      	nop
   80ac4:	20070560 	.word	0x20070560
   80ac8:	00082be5 	.word	0x00082be5

00080acc <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80acc:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80ace:	4802      	ldr	r0, [pc, #8]	; (80ad8 <UnityPrintFail+0xc>)
   80ad0:	4b02      	ldr	r3, [pc, #8]	; (80adc <UnityPrintFail+0x10>)
   80ad2:	4798      	blx	r3
   80ad4:	bd08      	pop	{r3, pc}
   80ad6:	bf00      	nop
   80ad8:	00084c24 	.word	0x00084c24
   80adc:	000805a9 	.word	0x000805a9

00080ae0 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80ae0:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80ae2:	4802      	ldr	r0, [pc, #8]	; (80aec <UnityPrintOk+0xc>)
   80ae4:	4b02      	ldr	r3, [pc, #8]	; (80af0 <UnityPrintOk+0x10>)
   80ae6:	4798      	blx	r3
   80ae8:	bd08      	pop	{r3, pc}
   80aea:	bf00      	nop
   80aec:	00084c14 	.word	0x00084c14
   80af0:	000805a9 	.word	0x000805a9

00080af4 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80af4:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80af6:	4b24      	ldr	r3, [pc, #144]	; (80b88 <UnityConcludeTest+0x94>)
   80af8:	69db      	ldr	r3, [r3, #28]
   80afa:	b123      	cbz	r3, 80b06 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80afc:	4b22      	ldr	r3, [pc, #136]	; (80b88 <UnityConcludeTest+0x94>)
   80afe:	695a      	ldr	r2, [r3, #20]
   80b00:	3201      	adds	r2, #1
   80b02:	615a      	str	r2, [r3, #20]
   80b04:	e00f      	b.n	80b26 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80b06:	4b20      	ldr	r3, [pc, #128]	; (80b88 <UnityConcludeTest+0x94>)
   80b08:	699b      	ldr	r3, [r3, #24]
   80b0a:	b943      	cbnz	r3, 80b1e <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80b0c:	4b1e      	ldr	r3, [pc, #120]	; (80b88 <UnityConcludeTest+0x94>)
   80b0e:	6818      	ldr	r0, [r3, #0]
   80b10:	6899      	ldr	r1, [r3, #8]
   80b12:	4b1e      	ldr	r3, [pc, #120]	; (80b8c <UnityConcludeTest+0x98>)
   80b14:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80b16:	481e      	ldr	r0, [pc, #120]	; (80b90 <UnityConcludeTest+0x9c>)
   80b18:	4b1e      	ldr	r3, [pc, #120]	; (80b94 <UnityConcludeTest+0xa0>)
   80b1a:	4798      	blx	r3
   80b1c:	e003      	b.n	80b26 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80b1e:	4b1a      	ldr	r3, [pc, #104]	; (80b88 <UnityConcludeTest+0x94>)
   80b20:	691a      	ldr	r2, [r3, #16]
   80b22:	3201      	adds	r2, #1
   80b24:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80b26:	4b18      	ldr	r3, [pc, #96]	; (80b88 <UnityConcludeTest+0x94>)
   80b28:	2200      	movs	r2, #0
   80b2a:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80b2c:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80b2e:	4b1a      	ldr	r3, [pc, #104]	; (80b98 <UnityConcludeTest+0xa4>)
   80b30:	6818      	ldr	r0, [r3, #0]
   80b32:	6882      	ldr	r2, [r0, #8]
   80b34:	6893      	ldr	r3, [r2, #8]
   80b36:	3b01      	subs	r3, #1
   80b38:	6093      	str	r3, [r2, #8]
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	da19      	bge.n	80b72 <UnityConcludeTest+0x7e>
   80b3e:	6882      	ldr	r2, [r0, #8]
   80b40:	6891      	ldr	r1, [r2, #8]
   80b42:	6993      	ldr	r3, [r2, #24]
   80b44:	4299      	cmp	r1, r3
   80b46:	db10      	blt.n	80b6a <UnityConcludeTest+0x76>
   80b48:	6813      	ldr	r3, [r2, #0]
   80b4a:	220a      	movs	r2, #10
   80b4c:	701a      	strb	r2, [r3, #0]
   80b4e:	4b12      	ldr	r3, [pc, #72]	; (80b98 <UnityConcludeTest+0xa4>)
   80b50:	6818      	ldr	r0, [r3, #0]
   80b52:	6882      	ldr	r2, [r0, #8]
   80b54:	6813      	ldr	r3, [r2, #0]
   80b56:	7819      	ldrb	r1, [r3, #0]
   80b58:	290a      	cmp	r1, #10
   80b5a:	d002      	beq.n	80b62 <UnityConcludeTest+0x6e>
   80b5c:	3301      	adds	r3, #1
   80b5e:	6013      	str	r3, [r2, #0]
   80b60:	bd08      	pop	{r3, pc}
   80b62:	210a      	movs	r1, #10
   80b64:	4b0d      	ldr	r3, [pc, #52]	; (80b9c <UnityConcludeTest+0xa8>)
   80b66:	4798      	blx	r3
   80b68:	bd08      	pop	{r3, pc}
   80b6a:	210a      	movs	r1, #10
   80b6c:	4b0b      	ldr	r3, [pc, #44]	; (80b9c <UnityConcludeTest+0xa8>)
   80b6e:	4798      	blx	r3
   80b70:	bd08      	pop	{r3, pc}
   80b72:	6883      	ldr	r3, [r0, #8]
   80b74:	681b      	ldr	r3, [r3, #0]
   80b76:	220a      	movs	r2, #10
   80b78:	701a      	strb	r2, [r3, #0]
   80b7a:	4b07      	ldr	r3, [pc, #28]	; (80b98 <UnityConcludeTest+0xa4>)
   80b7c:	681b      	ldr	r3, [r3, #0]
   80b7e:	689b      	ldr	r3, [r3, #8]
   80b80:	681a      	ldr	r2, [r3, #0]
   80b82:	3201      	adds	r2, #1
   80b84:	601a      	str	r2, [r3, #0]
   80b86:	bd08      	pop	{r3, pc}
   80b88:	20070b04 	.word	0x20070b04
   80b8c:	000807d5 	.word	0x000807d5
   80b90:	00084c70 	.word	0x00084c70
   80b94:	000805a9 	.word	0x000805a9
   80b98:	20070560 	.word	0x20070560
   80b9c:	00082be5 	.word	0x00082be5

00080ba0 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80ba4:	4605      	mov	r5, r0
   80ba6:	460f      	mov	r7, r1
   80ba8:	4616      	mov	r6, r2
   80baa:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80bac:	4c12      	ldr	r4, [pc, #72]	; (80bf8 <UnityAssertBits+0x58>)
   80bae:	69a4      	ldr	r4, [r4, #24]
   80bb0:	b9fc      	cbnz	r4, 80bf2 <UnityAssertBits+0x52>
   80bb2:	4a11      	ldr	r2, [pc, #68]	; (80bf8 <UnityAssertBits+0x58>)
   80bb4:	69d2      	ldr	r2, [r2, #28]
   80bb6:	b9e2      	cbnz	r2, 80bf2 <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80bb8:	ea81 0306 	eor.w	r3, r1, r6
   80bbc:	4203      	tst	r3, r0
   80bbe:	d018      	beq.n	80bf2 <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80bc0:	9808      	ldr	r0, [sp, #32]
   80bc2:	4b0e      	ldr	r3, [pc, #56]	; (80bfc <UnityAssertBits+0x5c>)
   80bc4:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80bc6:	480e      	ldr	r0, [pc, #56]	; (80c00 <UnityAssertBits+0x60>)
   80bc8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80c14 <UnityAssertBits+0x74>
   80bcc:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80bce:	4628      	mov	r0, r5
   80bd0:	4639      	mov	r1, r7
   80bd2:	4c0c      	ldr	r4, [pc, #48]	; (80c04 <UnityAssertBits+0x64>)
   80bd4:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80bd6:	480c      	ldr	r0, [pc, #48]	; (80c08 <UnityAssertBits+0x68>)
   80bd8:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80bda:	4628      	mov	r0, r5
   80bdc:	4631      	mov	r1, r6
   80bde:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80be0:	4640      	mov	r0, r8
   80be2:	4b0a      	ldr	r3, [pc, #40]	; (80c0c <UnityAssertBits+0x6c>)
   80be4:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80be6:	4804      	ldr	r0, [pc, #16]	; (80bf8 <UnityAssertBits+0x58>)
   80be8:	2101      	movs	r1, #1
   80bea:	6181      	str	r1, [r0, #24]
   80bec:	3020      	adds	r0, #32
   80bee:	4b08      	ldr	r3, [pc, #32]	; (80c10 <UnityAssertBits+0x70>)
   80bf0:	4798      	blx	r3
   80bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80bf6:	bf00      	nop
   80bf8:	20070b04 	.word	0x20070b04
   80bfc:	00080909 	.word	0x00080909
   80c00:	00084c2c 	.word	0x00084c2c
   80c04:	000809a9 	.word	0x000809a9
   80c08:	00084c1c 	.word	0x00084c1c
   80c0c:	0008098d 	.word	0x0008098d
   80c10:	00081d8d 	.word	0x00081d8d
   80c14:	000805a9 	.word	0x000805a9

00080c18 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80c18:	b500      	push	{lr}
   80c1a:	b083      	sub	sp, #12
   80c1c:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80c1e:	480e      	ldr	r0, [pc, #56]	; (80c58 <UnityDefaultTestRun+0x40>)
   80c20:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80c22:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80c24:	68c3      	ldr	r3, [r0, #12]
   80c26:	3301      	adds	r3, #1
   80c28:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80c2a:	3020      	adds	r0, #32
   80c2c:	4b0b      	ldr	r3, [pc, #44]	; (80c5c <UnityDefaultTestRun+0x44>)
   80c2e:	4798      	blx	r3
   80c30:	b918      	cbnz	r0, 80c3a <UnityDefaultTestRun+0x22>
    {
        setUp();
   80c32:	4b0b      	ldr	r3, [pc, #44]	; (80c60 <UnityDefaultTestRun+0x48>)
   80c34:	4798      	blx	r3
        Func();
   80c36:	9b01      	ldr	r3, [sp, #4]
   80c38:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80c3a:	480a      	ldr	r0, [pc, #40]	; (80c64 <UnityDefaultTestRun+0x4c>)
   80c3c:	4b07      	ldr	r3, [pc, #28]	; (80c5c <UnityDefaultTestRun+0x44>)
   80c3e:	4798      	blx	r3
   80c40:	b920      	cbnz	r0, 80c4c <UnityDefaultTestRun+0x34>
   80c42:	4b05      	ldr	r3, [pc, #20]	; (80c58 <UnityDefaultTestRun+0x40>)
   80c44:	69db      	ldr	r3, [r3, #28]
   80c46:	b90b      	cbnz	r3, 80c4c <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80c48:	4b07      	ldr	r3, [pc, #28]	; (80c68 <UnityDefaultTestRun+0x50>)
   80c4a:	4798      	blx	r3
    }
    UnityConcludeTest();
   80c4c:	4b07      	ldr	r3, [pc, #28]	; (80c6c <UnityDefaultTestRun+0x54>)
   80c4e:	4798      	blx	r3
}
   80c50:	b003      	add	sp, #12
   80c52:	f85d fb04 	ldr.w	pc, [sp], #4
   80c56:	bf00      	nop
   80c58:	20070b04 	.word	0x20070b04
   80c5c:	00081d81 	.word	0x00081d81
   80c60:	00080fc9 	.word	0x00080fc9
   80c64:	20070b24 	.word	0x20070b24
   80c68:	00080fd9 	.word	0x00080fd9
   80c6c:	00080af5 	.word	0x00080af5

00080c70 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80c70:	4b05      	ldr	r3, [pc, #20]	; (80c88 <UnityBegin+0x18>)
   80c72:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80c74:	2200      	movs	r2, #0
   80c76:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80c78:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80c7a:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80c7c:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80c7e:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80c80:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80c82:	61da      	str	r2, [r3, #28]
   80c84:	4770      	bx	lr
   80c86:	bf00      	nop
   80c88:	20070b04 	.word	0x20070b04

00080c8c <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80c8c:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80c8e:	4b66      	ldr	r3, [pc, #408]	; (80e28 <UnityEnd+0x19c>)
   80c90:	6818      	ldr	r0, [r3, #0]
   80c92:	6882      	ldr	r2, [r0, #8]
   80c94:	6893      	ldr	r3, [r2, #8]
   80c96:	3b01      	subs	r3, #1
   80c98:	6093      	str	r3, [r2, #8]
   80c9a:	2b00      	cmp	r3, #0
   80c9c:	da19      	bge.n	80cd2 <UnityEnd+0x46>
   80c9e:	6882      	ldr	r2, [r0, #8]
   80ca0:	6891      	ldr	r1, [r2, #8]
   80ca2:	6993      	ldr	r3, [r2, #24]
   80ca4:	4299      	cmp	r1, r3
   80ca6:	db10      	blt.n	80cca <UnityEnd+0x3e>
   80ca8:	6813      	ldr	r3, [r2, #0]
   80caa:	220a      	movs	r2, #10
   80cac:	701a      	strb	r2, [r3, #0]
   80cae:	4b5e      	ldr	r3, [pc, #376]	; (80e28 <UnityEnd+0x19c>)
   80cb0:	6818      	ldr	r0, [r3, #0]
   80cb2:	6882      	ldr	r2, [r0, #8]
   80cb4:	6813      	ldr	r3, [r2, #0]
   80cb6:	7819      	ldrb	r1, [r3, #0]
   80cb8:	290a      	cmp	r1, #10
   80cba:	d002      	beq.n	80cc2 <UnityEnd+0x36>
   80cbc:	3301      	adds	r3, #1
   80cbe:	6013      	str	r3, [r2, #0]
   80cc0:	e011      	b.n	80ce6 <UnityEnd+0x5a>
   80cc2:	210a      	movs	r1, #10
   80cc4:	4b59      	ldr	r3, [pc, #356]	; (80e2c <UnityEnd+0x1a0>)
   80cc6:	4798      	blx	r3
   80cc8:	e00d      	b.n	80ce6 <UnityEnd+0x5a>
   80cca:	210a      	movs	r1, #10
   80ccc:	4b57      	ldr	r3, [pc, #348]	; (80e2c <UnityEnd+0x1a0>)
   80cce:	4798      	blx	r3
   80cd0:	e009      	b.n	80ce6 <UnityEnd+0x5a>
   80cd2:	6883      	ldr	r3, [r0, #8]
   80cd4:	681b      	ldr	r3, [r3, #0]
   80cd6:	220a      	movs	r2, #10
   80cd8:	701a      	strb	r2, [r3, #0]
   80cda:	4b53      	ldr	r3, [pc, #332]	; (80e28 <UnityEnd+0x19c>)
   80cdc:	681b      	ldr	r3, [r3, #0]
   80cde:	689b      	ldr	r3, [r3, #8]
   80ce0:	681a      	ldr	r2, [r3, #0]
   80ce2:	3201      	adds	r2, #1
   80ce4:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80ce6:	4852      	ldr	r0, [pc, #328]	; (80e30 <UnityEnd+0x1a4>)
   80ce8:	4b52      	ldr	r3, [pc, #328]	; (80e34 <UnityEnd+0x1a8>)
   80cea:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80cec:	4b4e      	ldr	r3, [pc, #312]	; (80e28 <UnityEnd+0x19c>)
   80cee:	6818      	ldr	r0, [r3, #0]
   80cf0:	6882      	ldr	r2, [r0, #8]
   80cf2:	6893      	ldr	r3, [r2, #8]
   80cf4:	3b01      	subs	r3, #1
   80cf6:	6093      	str	r3, [r2, #8]
   80cf8:	2b00      	cmp	r3, #0
   80cfa:	da19      	bge.n	80d30 <UnityEnd+0xa4>
   80cfc:	6882      	ldr	r2, [r0, #8]
   80cfe:	6891      	ldr	r1, [r2, #8]
   80d00:	6993      	ldr	r3, [r2, #24]
   80d02:	4299      	cmp	r1, r3
   80d04:	db10      	blt.n	80d28 <UnityEnd+0x9c>
   80d06:	6813      	ldr	r3, [r2, #0]
   80d08:	220a      	movs	r2, #10
   80d0a:	701a      	strb	r2, [r3, #0]
   80d0c:	4b46      	ldr	r3, [pc, #280]	; (80e28 <UnityEnd+0x19c>)
   80d0e:	6818      	ldr	r0, [r3, #0]
   80d10:	6882      	ldr	r2, [r0, #8]
   80d12:	6813      	ldr	r3, [r2, #0]
   80d14:	7819      	ldrb	r1, [r3, #0]
   80d16:	290a      	cmp	r1, #10
   80d18:	d002      	beq.n	80d20 <UnityEnd+0x94>
   80d1a:	3301      	adds	r3, #1
   80d1c:	6013      	str	r3, [r2, #0]
   80d1e:	e011      	b.n	80d44 <UnityEnd+0xb8>
   80d20:	210a      	movs	r1, #10
   80d22:	4b42      	ldr	r3, [pc, #264]	; (80e2c <UnityEnd+0x1a0>)
   80d24:	4798      	blx	r3
   80d26:	e00d      	b.n	80d44 <UnityEnd+0xb8>
   80d28:	210a      	movs	r1, #10
   80d2a:	4b40      	ldr	r3, [pc, #256]	; (80e2c <UnityEnd+0x1a0>)
   80d2c:	4798      	blx	r3
   80d2e:	e009      	b.n	80d44 <UnityEnd+0xb8>
   80d30:	6883      	ldr	r3, [r0, #8]
   80d32:	681b      	ldr	r3, [r3, #0]
   80d34:	220a      	movs	r2, #10
   80d36:	701a      	strb	r2, [r3, #0]
   80d38:	4b3b      	ldr	r3, [pc, #236]	; (80e28 <UnityEnd+0x19c>)
   80d3a:	681b      	ldr	r3, [r3, #0]
   80d3c:	689b      	ldr	r3, [r3, #8]
   80d3e:	681a      	ldr	r2, [r3, #0]
   80d40:	3201      	adds	r2, #1
   80d42:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80d44:	4e3c      	ldr	r6, [pc, #240]	; (80e38 <UnityEnd+0x1ac>)
   80d46:	68f0      	ldr	r0, [r6, #12]
   80d48:	4d3c      	ldr	r5, [pc, #240]	; (80e3c <UnityEnd+0x1b0>)
   80d4a:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80d4c:	483c      	ldr	r0, [pc, #240]	; (80e40 <UnityEnd+0x1b4>)
   80d4e:	4c39      	ldr	r4, [pc, #228]	; (80e34 <UnityEnd+0x1a8>)
   80d50:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80d52:	6930      	ldr	r0, [r6, #16]
   80d54:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80d56:	483b      	ldr	r0, [pc, #236]	; (80e44 <UnityEnd+0x1b8>)
   80d58:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80d5a:	6970      	ldr	r0, [r6, #20]
   80d5c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80d5e:	483a      	ldr	r0, [pc, #232]	; (80e48 <UnityEnd+0x1bc>)
   80d60:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80d62:	4b31      	ldr	r3, [pc, #196]	; (80e28 <UnityEnd+0x19c>)
   80d64:	6818      	ldr	r0, [r3, #0]
   80d66:	6882      	ldr	r2, [r0, #8]
   80d68:	6893      	ldr	r3, [r2, #8]
   80d6a:	3b01      	subs	r3, #1
   80d6c:	6093      	str	r3, [r2, #8]
   80d6e:	2b00      	cmp	r3, #0
   80d70:	da19      	bge.n	80da6 <UnityEnd+0x11a>
   80d72:	6882      	ldr	r2, [r0, #8]
   80d74:	6891      	ldr	r1, [r2, #8]
   80d76:	6993      	ldr	r3, [r2, #24]
   80d78:	4299      	cmp	r1, r3
   80d7a:	db10      	blt.n	80d9e <UnityEnd+0x112>
   80d7c:	6813      	ldr	r3, [r2, #0]
   80d7e:	220a      	movs	r2, #10
   80d80:	701a      	strb	r2, [r3, #0]
   80d82:	4b29      	ldr	r3, [pc, #164]	; (80e28 <UnityEnd+0x19c>)
   80d84:	6818      	ldr	r0, [r3, #0]
   80d86:	6882      	ldr	r2, [r0, #8]
   80d88:	6813      	ldr	r3, [r2, #0]
   80d8a:	7819      	ldrb	r1, [r3, #0]
   80d8c:	290a      	cmp	r1, #10
   80d8e:	d002      	beq.n	80d96 <UnityEnd+0x10a>
   80d90:	3301      	adds	r3, #1
   80d92:	6013      	str	r3, [r2, #0]
   80d94:	e011      	b.n	80dba <UnityEnd+0x12e>
   80d96:	210a      	movs	r1, #10
   80d98:	4b24      	ldr	r3, [pc, #144]	; (80e2c <UnityEnd+0x1a0>)
   80d9a:	4798      	blx	r3
   80d9c:	e00d      	b.n	80dba <UnityEnd+0x12e>
   80d9e:	210a      	movs	r1, #10
   80da0:	4b22      	ldr	r3, [pc, #136]	; (80e2c <UnityEnd+0x1a0>)
   80da2:	4798      	blx	r3
   80da4:	e009      	b.n	80dba <UnityEnd+0x12e>
   80da6:	6883      	ldr	r3, [r0, #8]
   80da8:	681b      	ldr	r3, [r3, #0]
   80daa:	220a      	movs	r2, #10
   80dac:	701a      	strb	r2, [r3, #0]
   80dae:	4b1e      	ldr	r3, [pc, #120]	; (80e28 <UnityEnd+0x19c>)
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	689b      	ldr	r3, [r3, #8]
   80db4:	681a      	ldr	r2, [r3, #0]
   80db6:	3201      	adds	r2, #1
   80db8:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   80dba:	4b1f      	ldr	r3, [pc, #124]	; (80e38 <UnityEnd+0x1ac>)
   80dbc:	691b      	ldr	r3, [r3, #16]
   80dbe:	b913      	cbnz	r3, 80dc6 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   80dc0:	4b22      	ldr	r3, [pc, #136]	; (80e4c <UnityEnd+0x1c0>)
   80dc2:	4798      	blx	r3
   80dc4:	e001      	b.n	80dca <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   80dc6:	4b22      	ldr	r3, [pc, #136]	; (80e50 <UnityEnd+0x1c4>)
   80dc8:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   80dca:	4b17      	ldr	r3, [pc, #92]	; (80e28 <UnityEnd+0x19c>)
   80dcc:	6818      	ldr	r0, [r3, #0]
   80dce:	6882      	ldr	r2, [r0, #8]
   80dd0:	6893      	ldr	r3, [r2, #8]
   80dd2:	3b01      	subs	r3, #1
   80dd4:	6093      	str	r3, [r2, #8]
   80dd6:	2b00      	cmp	r3, #0
   80dd8:	da19      	bge.n	80e0e <UnityEnd+0x182>
   80dda:	6882      	ldr	r2, [r0, #8]
   80ddc:	6891      	ldr	r1, [r2, #8]
   80dde:	6993      	ldr	r3, [r2, #24]
   80de0:	4299      	cmp	r1, r3
   80de2:	db10      	blt.n	80e06 <UnityEnd+0x17a>
   80de4:	6813      	ldr	r3, [r2, #0]
   80de6:	220a      	movs	r2, #10
   80de8:	701a      	strb	r2, [r3, #0]
   80dea:	4b0f      	ldr	r3, [pc, #60]	; (80e28 <UnityEnd+0x19c>)
   80dec:	6818      	ldr	r0, [r3, #0]
   80dee:	6882      	ldr	r2, [r0, #8]
   80df0:	6813      	ldr	r3, [r2, #0]
   80df2:	7819      	ldrb	r1, [r3, #0]
   80df4:	290a      	cmp	r1, #10
   80df6:	d002      	beq.n	80dfe <UnityEnd+0x172>
   80df8:	3301      	adds	r3, #1
   80dfa:	6013      	str	r3, [r2, #0]
   80dfc:	e011      	b.n	80e22 <UnityEnd+0x196>
   80dfe:	210a      	movs	r1, #10
   80e00:	4b0a      	ldr	r3, [pc, #40]	; (80e2c <UnityEnd+0x1a0>)
   80e02:	4798      	blx	r3
   80e04:	e00d      	b.n	80e22 <UnityEnd+0x196>
   80e06:	210a      	movs	r1, #10
   80e08:	4b08      	ldr	r3, [pc, #32]	; (80e2c <UnityEnd+0x1a0>)
   80e0a:	4798      	blx	r3
   80e0c:	e009      	b.n	80e22 <UnityEnd+0x196>
   80e0e:	6883      	ldr	r3, [r0, #8]
   80e10:	681b      	ldr	r3, [r3, #0]
   80e12:	220a      	movs	r2, #10
   80e14:	701a      	strb	r2, [r3, #0]
   80e16:	4b04      	ldr	r3, [pc, #16]	; (80e28 <UnityEnd+0x19c>)
   80e18:	681b      	ldr	r3, [r3, #0]
   80e1a:	689b      	ldr	r3, [r3, #8]
   80e1c:	681a      	ldr	r2, [r3, #0]
   80e1e:	3201      	adds	r2, #1
   80e20:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   80e22:	4b05      	ldr	r3, [pc, #20]	; (80e38 <UnityEnd+0x1ac>)
   80e24:	6918      	ldr	r0, [r3, #16]
   80e26:	bd70      	pop	{r4, r5, r6, pc}
   80e28:	20070560 	.word	0x20070560
   80e2c:	00082be5 	.word	0x00082be5
   80e30:	00084c38 	.word	0x00084c38
   80e34:	000805a9 	.word	0x000805a9
   80e38:	20070b04 	.word	0x20070b04
   80e3c:	00080281 	.word	0x00080281
   80e40:	00084c68 	.word	0x00084c68
   80e44:	00084c50 	.word	0x00084c50
   80e48:	00084c5c 	.word	0x00084c5c
   80e4c:	00080ae1 	.word	0x00080ae1
   80e50:	00080acd 	.word	0x00080acd

00080e54 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e58:	460e      	mov	r6, r1
   80e5a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80e5c:	3801      	subs	r0, #1
   80e5e:	2802      	cmp	r0, #2
   80e60:	d80f      	bhi.n	80e82 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80e62:	b192      	cbz	r2, 80e8a <_write+0x36>
   80e64:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80e66:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80ea4 <_write+0x50>
   80e6a:	4f0d      	ldr	r7, [pc, #52]	; (80ea0 <_write+0x4c>)
   80e6c:	f8d8 0000 	ldr.w	r0, [r8]
   80e70:	5d31      	ldrb	r1, [r6, r4]
   80e72:	683b      	ldr	r3, [r7, #0]
   80e74:	4798      	blx	r3
   80e76:	2800      	cmp	r0, #0
   80e78:	db0a      	blt.n	80e90 <_write+0x3c>
			return -1;
		}
		++nChars;
   80e7a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80e7c:	42a5      	cmp	r5, r4
   80e7e:	d1f5      	bne.n	80e6c <_write+0x18>
   80e80:	e00a      	b.n	80e98 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80e82:	f04f 30ff 	mov.w	r0, #4294967295
   80e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80e8a:	2000      	movs	r0, #0
   80e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80e90:	f04f 30ff 	mov.w	r0, #4294967295
   80e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80e98:	4620      	mov	r0, r4
	}
	return nChars;
}
   80e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e9e:	bf00      	nop
   80ea0:	20070b80 	.word	0x20070b80
   80ea4:	20070b84 	.word	0x20070b84

00080ea8 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80eac:	b083      	sub	sp, #12
   80eae:	4605      	mov	r5, r0
	while (len) {
   80eb0:	4690      	mov	r8, r2
   80eb2:	2a00      	cmp	r2, #0
   80eb4:	d047      	beq.n	80f46 <usart_serial_read_packet+0x9e>
   80eb6:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80eb8:	4f25      	ldr	r7, [pc, #148]	; (80f50 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80eba:	4c26      	ldr	r4, [pc, #152]	; (80f54 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80ebc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80f68 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80ec0:	f8df b094 	ldr.w	fp, [pc, #148]	; 80f58 <usart_serial_read_packet+0xb0>
   80ec4:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80ec8:	2300      	movs	r3, #0
   80eca:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80ecc:	4b22      	ldr	r3, [pc, #136]	; (80f58 <usart_serial_read_packet+0xb0>)
   80ece:	429d      	cmp	r5, r3
   80ed0:	d106      	bne.n	80ee0 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80ed2:	4658      	mov	r0, fp
   80ed4:	4649      	mov	r1, r9
   80ed6:	4b21      	ldr	r3, [pc, #132]	; (80f5c <usart_serial_read_packet+0xb4>)
   80ed8:	4798      	blx	r3
   80eda:	2800      	cmp	r0, #0
   80edc:	d1f9      	bne.n	80ed2 <usart_serial_read_packet+0x2a>
   80ede:	e019      	b.n	80f14 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80ee0:	4b1f      	ldr	r3, [pc, #124]	; (80f60 <usart_serial_read_packet+0xb8>)
   80ee2:	429d      	cmp	r5, r3
   80ee4:	d109      	bne.n	80efa <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80ee6:	4699      	mov	r9, r3
   80ee8:	4648      	mov	r0, r9
   80eea:	a901      	add	r1, sp, #4
   80eec:	47a0      	blx	r4
   80eee:	2800      	cmp	r0, #0
   80ef0:	d1fa      	bne.n	80ee8 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80ef2:	9b01      	ldr	r3, [sp, #4]
   80ef4:	f806 3c01 	strb.w	r3, [r6, #-1]
   80ef8:	e017      	b.n	80f2a <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80efa:	4b1a      	ldr	r3, [pc, #104]	; (80f64 <usart_serial_read_packet+0xbc>)
   80efc:	429d      	cmp	r5, r3
   80efe:	d109      	bne.n	80f14 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80f00:	4699      	mov	r9, r3
   80f02:	4648      	mov	r0, r9
   80f04:	a901      	add	r1, sp, #4
   80f06:	47a0      	blx	r4
   80f08:	2800      	cmp	r0, #0
   80f0a:	d1fa      	bne.n	80f02 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80f0c:	9b01      	ldr	r3, [sp, #4]
   80f0e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f12:	e014      	b.n	80f3e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80f14:	4555      	cmp	r5, sl
   80f16:	d108      	bne.n	80f2a <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80f18:	4650      	mov	r0, sl
   80f1a:	a901      	add	r1, sp, #4
   80f1c:	47a0      	blx	r4
   80f1e:	2800      	cmp	r0, #0
   80f20:	d1fa      	bne.n	80f18 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80f22:	9b01      	ldr	r3, [sp, #4]
   80f24:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f28:	e009      	b.n	80f3e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80f2a:	42bd      	cmp	r5, r7
   80f2c:	d107      	bne.n	80f3e <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80f2e:	4638      	mov	r0, r7
   80f30:	a901      	add	r1, sp, #4
   80f32:	47a0      	blx	r4
   80f34:	2800      	cmp	r0, #0
   80f36:	d1fa      	bne.n	80f2e <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80f38:	9b01      	ldr	r3, [sp, #4]
   80f3a:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f3e:	3601      	adds	r6, #1
   80f40:	f1b8 0801 	subs.w	r8, r8, #1
   80f44:	d1be      	bne.n	80ec4 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80f46:	2000      	movs	r0, #0
   80f48:	b003      	add	sp, #12
   80f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f4e:	bf00      	nop
   80f50:	400a4000 	.word	0x400a4000
   80f54:	0008019d 	.word	0x0008019d
   80f58:	400e0800 	.word	0x400e0800
   80f5c:	00080fb5 	.word	0x00080fb5
   80f60:	40098000 	.word	0x40098000
   80f64:	4009c000 	.word	0x4009c000
   80f68:	400a0000 	.word	0x400a0000

00080f6c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f6c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f6e:	23ac      	movs	r3, #172	; 0xac
   80f70:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80f72:	680a      	ldr	r2, [r1, #0]
   80f74:	684b      	ldr	r3, [r1, #4]
   80f76:	fbb2 f3f3 	udiv	r3, r2, r3
   80f7a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80f7c:	1e5c      	subs	r4, r3, #1
   80f7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80f82:	4294      	cmp	r4, r2
   80f84:	d80a      	bhi.n	80f9c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80f86:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80f88:	688b      	ldr	r3, [r1, #8]
   80f8a:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80f8c:	f240 2302 	movw	r3, #514	; 0x202
   80f90:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80f94:	2350      	movs	r3, #80	; 0x50
   80f96:	6003      	str	r3, [r0, #0]

	return 0;
   80f98:	2000      	movs	r0, #0
   80f9a:	e000      	b.n	80f9e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80f9c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80fa2:	4770      	bx	lr

00080fa4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80fa4:	6943      	ldr	r3, [r0, #20]
   80fa6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80faa:	bf1a      	itte	ne
   80fac:	61c1      	strne	r1, [r0, #28]
	return 0;
   80fae:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80fb0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80fb2:	4770      	bx	lr

00080fb4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80fb4:	6943      	ldr	r3, [r0, #20]
   80fb6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80fba:	bf1d      	ittte	ne
   80fbc:	6983      	ldrne	r3, [r0, #24]
   80fbe:	700b      	strbne	r3, [r1, #0]
	return 0;
   80fc0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80fc2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80fc4:	4770      	bx	lr
   80fc6:	bf00      	nop

00080fc8 <setUp>:
uint32_t *const p_PIOB_ODSR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */
uint32_t *const p_PIOB_OWER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/*   */

void setUp(void)
{
	*p_PIOB_PDR = 0xFFFFFFFFU; /* Disable PORT B */
   80fc8:	f04f 32ff 	mov.w	r2, #4294967295
   80fcc:	4b01      	ldr	r3, [pc, #4]	; (80fd4 <setUp+0xc>)
   80fce:	601a      	str	r2, [r3, #0]
   80fd0:	4770      	bx	lr
   80fd2:	bf00      	nop
   80fd4:	400e1004 	.word	0x400e1004

00080fd8 <tearDown>:
}

void tearDown(void)
{
	*p_PIOB_PDR = 0xFFFFFFFF; /* Disable PORT B */
   80fd8:	f04f 32ff 	mov.w	r2, #4294967295
   80fdc:	4b01      	ldr	r3, [pc, #4]	; (80fe4 <tearDown+0xc>)
   80fde:	601a      	str	r2, [r3, #0]
   80fe0:	4770      	bx	lr
   80fe2:	bf00      	nop
   80fe4:	400e1004 	.word	0x400e1004

00080fe8 <test_digitalDuePin13InitialiseProperly>:
	tearDown();
	setUp();
}

void test_digitalDuePin13InitialiseProperly(void)
{
   80fe8:	b510      	push	{r4, lr}
   80fea:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   80fec:	200d      	movs	r0, #13
   80fee:	2102      	movs	r1, #2
   80ff0:	4b0c      	ldr	r3, [pc, #48]	; (81024 <test_digitalDuePin13InitialiseProperly+0x3c>)
   80ff2:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_PSR, "PB27 is not initialised");	/* Check the status bit that PB27 on port B is properly initialised */
   80ff4:	4b0c      	ldr	r3, [pc, #48]	; (81028 <test_digitalDuePin13InitialiseProperly+0x40>)
   80ff6:	681a      	ldr	r2, [r3, #0]
   80ff8:	2334      	movs	r3, #52	; 0x34
   80ffa:	9300      	str	r3, [sp, #0]
   80ffc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81000:	f04f 31ff 	mov.w	r1, #4294967295
   81004:	4b09      	ldr	r3, [pc, #36]	; (8102c <test_digitalDuePin13InitialiseProperly+0x44>)
   81006:	4c0a      	ldr	r4, [pc, #40]	; (81030 <test_digitalDuePin13InitialiseProperly+0x48>)
   81008:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_OSR, "PB27 is not an output");	/* Check the status bit that PB27 on port B is an output */
   8100a:	4b0a      	ldr	r3, [pc, #40]	; (81034 <test_digitalDuePin13InitialiseProperly+0x4c>)
   8100c:	681a      	ldr	r2, [r3, #0]
   8100e:	2335      	movs	r3, #53	; 0x35
   81010:	9300      	str	r3, [sp, #0]
   81012:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81016:	f04f 31ff 	mov.w	r1, #4294967295
   8101a:	4b07      	ldr	r3, [pc, #28]	; (81038 <test_digitalDuePin13InitialiseProperly+0x50>)
   8101c:	47a0      	blx	r4
}
   8101e:	b002      	add	sp, #8
   81020:	bd10      	pop	{r4, pc}
   81022:	bf00      	nop
   81024:	00080215 	.word	0x00080215
   81028:	400e1008 	.word	0x400e1008
   8102c:	00084c78 	.word	0x00084c78
   81030:	00080ba1 	.word	0x00080ba1
   81034:	400e1018 	.word	0x400e1018
   81038:	00084c90 	.word	0x00084c90

0008103c <test_digitalDuePin13IsSet>:

void test_digitalDuePin13IsSet(void)
{
   8103c:	b510      	push	{r4, lr}
   8103e:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output, already proven to work in previous test */
   81040:	200d      	movs	r0, #13
   81042:	2102      	movs	r1, #2
   81044:	4b09      	ldr	r3, [pc, #36]	; (8106c <test_digitalDuePin13IsSet+0x30>)
   81046:	4798      	blx	r3
	
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   81048:	200d      	movs	r0, #13
   8104a:	2101      	movs	r1, #1
   8104c:	4b08      	ldr	r3, [pc, #32]	; (81070 <test_digitalDuePin13IsSet+0x34>)
   8104e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is set */
   81050:	4b08      	ldr	r3, [pc, #32]	; (81074 <test_digitalDuePin13IsSet+0x38>)
   81052:	681a      	ldr	r2, [r3, #0]
   81054:	233d      	movs	r3, #61	; 0x3d
   81056:	9300      	str	r3, [sp, #0]
   81058:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8105c:	f04f 31ff 	mov.w	r1, #4294967295
   81060:	2300      	movs	r3, #0
   81062:	4c05      	ldr	r4, [pc, #20]	; (81078 <test_digitalDuePin13IsSet+0x3c>)
   81064:	47a0      	blx	r4
	
	/* Note that you need to understand the board pin mapping on http://www.arduino.cc/en/Hacking/PinMappingSAM3X */
}
   81066:	b002      	add	sp, #8
   81068:	bd10      	pop	{r4, pc}
   8106a:	bf00      	nop
   8106c:	00080215 	.word	0x00080215
   81070:	0008023d 	.word	0x0008023d
   81074:	400e1038 	.word	0x400e1038
   81078:	00080ba1 	.word	0x00080ba1

0008107c <test_digitalDuePin13IsCleared>:

void test_digitalDuePin13IsCleared(void)
{
   8107c:	b510      	push	{r4, lr}
   8107e:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output, function proven to work in previous test */
   81080:	200d      	movs	r0, #13
   81082:	2102      	movs	r1, #2
   81084:	4b0a      	ldr	r3, [pc, #40]	; (810b0 <test_digitalDuePin13IsCleared+0x34>)
   81086:	4798      	blx	r3
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode, function proven to work in previous test */
   81088:	200d      	movs	r0, #13
   8108a:	2101      	movs	r1, #1
   8108c:	4c09      	ldr	r4, [pc, #36]	; (810b4 <test_digitalDuePin13IsCleared+0x38>)
   8108e:	47a0      	blx	r4
	digitalWrite(13, LOW);	/* set pin 13 on the Due to low, turning off the amber diode */
   81090:	200d      	movs	r0, #13
   81092:	2100      	movs	r1, #0
   81094:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is cleared */
   81096:	4b08      	ldr	r3, [pc, #32]	; (810b8 <test_digitalDuePin13IsCleared+0x3c>)
   81098:	681a      	ldr	r2, [r3, #0]
   8109a:	2347      	movs	r3, #71	; 0x47
   8109c:	9300      	str	r3, [sp, #0]
   8109e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   810a2:	2100      	movs	r1, #0
   810a4:	460b      	mov	r3, r1
   810a6:	4c05      	ldr	r4, [pc, #20]	; (810bc <test_digitalDuePin13IsCleared+0x40>)
   810a8:	47a0      	blx	r4
}
   810aa:	b002      	add	sp, #8
   810ac:	bd10      	pop	{r4, pc}
   810ae:	bf00      	nop
   810b0:	00080215 	.word	0x00080215
   810b4:	0008023d 	.word	0x0008023d
   810b8:	400e1038 	.word	0x400e1038
   810bc:	00080ba1 	.word	0x00080ba1

000810c0 <test_digitalDuePin22InitialiseProperly>:

void test_digitalDuePin22InitialiseProperly(void)
{
   810c0:	b510      	push	{r4, lr}
   810c2:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   810c4:	2016      	movs	r0, #22
   810c6:	2102      	movs	r1, #2
   810c8:	4b07      	ldr	r3, [pc, #28]	; (810e8 <test_digitalDuePin22InitialiseProperly+0x28>)
   810ca:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_OSR);	/* Check the status bit that PB26 on port B is properly initialised */
   810cc:	4b07      	ldr	r3, [pc, #28]	; (810ec <test_digitalDuePin22InitialiseProperly+0x2c>)
   810ce:	681a      	ldr	r2, [r3, #0]
   810d0:	234d      	movs	r3, #77	; 0x4d
   810d2:	9300      	str	r3, [sp, #0]
   810d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   810d8:	f04f 31ff 	mov.w	r1, #4294967295
   810dc:	2300      	movs	r3, #0
   810de:	4c04      	ldr	r4, [pc, #16]	; (810f0 <test_digitalDuePin22InitialiseProperly+0x30>)
   810e0:	47a0      	blx	r4
}
   810e2:	b002      	add	sp, #8
   810e4:	bd10      	pop	{r4, pc}
   810e6:	bf00      	nop
   810e8:	00080215 	.word	0x00080215
   810ec:	400e1018 	.word	0x400e1018
   810f0:	00080ba1 	.word	0x00080ba1

000810f4 <test_digitalDuePin22IsSet>:
void test_digitalDuePin22IsSet(void)
{
   810f4:	b510      	push	{r4, lr}
   810f6:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, already proven to work in previous test */
   810f8:	2016      	movs	r0, #22
   810fa:	2102      	movs	r1, #2
   810fc:	4b09      	ldr	r3, [pc, #36]	; (81124 <test_digitalDuePin22IsSet+0x30>)
   810fe:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   81100:	2016      	movs	r0, #22
   81102:	2101      	movs	r1, #1
   81104:	4b08      	ldr	r3, [pc, #32]	; (81128 <test_digitalDuePin22IsSet+0x34>)
   81106:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   81108:	4b08      	ldr	r3, [pc, #32]	; (8112c <test_digitalDuePin22IsSet+0x38>)
   8110a:	681a      	ldr	r2, [r3, #0]
   8110c:	2353      	movs	r3, #83	; 0x53
   8110e:	9300      	str	r3, [sp, #0]
   81110:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81114:	f04f 31ff 	mov.w	r1, #4294967295
   81118:	2300      	movs	r3, #0
   8111a:	4c05      	ldr	r4, [pc, #20]	; (81130 <test_digitalDuePin22IsSet+0x3c>)
   8111c:	47a0      	blx	r4
}
   8111e:	b002      	add	sp, #8
   81120:	bd10      	pop	{r4, pc}
   81122:	bf00      	nop
   81124:	00080215 	.word	0x00080215
   81128:	0008023d 	.word	0x0008023d
   8112c:	400e1038 	.word	0x400e1038
   81130:	00080ba1 	.word	0x00080ba1

00081134 <test_digitalDuePin22IsCleared>:
void test_digitalDuePin22IsCleared(void)
{
   81134:	b510      	push	{r4, lr}
   81136:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, proven to work in previous test */
   81138:	2016      	movs	r0, #22
   8113a:	2102      	movs	r1, #2
   8113c:	4b0a      	ldr	r3, [pc, #40]	; (81168 <test_digitalDuePin22IsCleared+0x34>)
   8113e:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high, proven to work in previous test */
   81140:	2016      	movs	r0, #22
   81142:	2101      	movs	r1, #1
   81144:	4c09      	ldr	r4, [pc, #36]	; (8116c <test_digitalDuePin22IsCleared+0x38>)
   81146:	47a0      	blx	r4
	
	digitalWrite(22, LOW);	/* set pin 22 on the Due to low */
   81148:	2016      	movs	r0, #22
   8114a:	2100      	movs	r1, #0
   8114c:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is cleared */
   8114e:	4b08      	ldr	r3, [pc, #32]	; (81170 <test_digitalDuePin22IsCleared+0x3c>)
   81150:	681a      	ldr	r2, [r3, #0]
   81152:	235b      	movs	r3, #91	; 0x5b
   81154:	9300      	str	r3, [sp, #0]
   81156:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   8115a:	2100      	movs	r1, #0
   8115c:	460b      	mov	r3, r1
   8115e:	4c05      	ldr	r4, [pc, #20]	; (81174 <test_digitalDuePin22IsCleared+0x40>)
   81160:	47a0      	blx	r4
}
   81162:	b002      	add	sp, #8
   81164:	bd10      	pop	{r4, pc}
   81166:	bf00      	nop
   81168:	00080215 	.word	0x00080215
   8116c:	0008023d 	.word	0x0008023d
   81170:	400e1038 	.word	0x400e1038
   81174:	00080ba1 	.word	0x00080ba1

00081178 <test_digitalDuePin13And22InitialiseProperly>:

void test_digitalDuePin13And22InitialiseProperly(void)
{
   81178:	b530      	push	{r4, r5, lr}
   8117a:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   8117c:	200d      	movs	r0, #13
   8117e:	2102      	movs	r1, #2
   81180:	4c0d      	ldr	r4, [pc, #52]	; (811b8 <test_digitalDuePin13And22InitialiseProperly+0x40>)
   81182:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81184:	2016      	movs	r0, #22
   81186:	2102      	movs	r1, #2
   81188:	47a0      	blx	r4
	
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_OSR, "PB26 is not an output");	/* Check the status bit that PB26 on port B is properly initialised as an output*/
   8118a:	4d0c      	ldr	r5, [pc, #48]	; (811bc <test_digitalDuePin13And22InitialiseProperly+0x44>)
   8118c:	682a      	ldr	r2, [r5, #0]
   8118e:	2363      	movs	r3, #99	; 0x63
   81190:	9300      	str	r3, [sp, #0]
   81192:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81196:	f04f 31ff 	mov.w	r1, #4294967295
   8119a:	4b09      	ldr	r3, [pc, #36]	; (811c0 <test_digitalDuePin13And22InitialiseProperly+0x48>)
   8119c:	4c09      	ldr	r4, [pc, #36]	; (811c4 <test_digitalDuePin13And22InitialiseProperly+0x4c>)
   8119e:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_OSR, "PB27 is not an output");	/* Check the status bit that PB27 on port B is properly initialised as an output*/
   811a0:	682a      	ldr	r2, [r5, #0]
   811a2:	2364      	movs	r3, #100	; 0x64
   811a4:	9300      	str	r3, [sp, #0]
   811a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   811aa:	f04f 31ff 	mov.w	r1, #4294967295
   811ae:	4b06      	ldr	r3, [pc, #24]	; (811c8 <test_digitalDuePin13And22InitialiseProperly+0x50>)
   811b0:	47a0      	blx	r4
}
   811b2:	b003      	add	sp, #12
   811b4:	bd30      	pop	{r4, r5, pc}
   811b6:	bf00      	nop
   811b8:	00080215 	.word	0x00080215
   811bc:	400e1018 	.word	0x400e1018
   811c0:	00084ca8 	.word	0x00084ca8
   811c4:	00080ba1 	.word	0x00080ba1
   811c8:	00084c90 	.word	0x00084c90

000811cc <test_digitalDuePin13And22IsSet>:

void test_digitalDuePin13And22IsSet(void)
{		
   811cc:	b530      	push	{r4, r5, lr}
   811ce:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   811d0:	200d      	movs	r0, #13
   811d2:	2102      	movs	r1, #2
   811d4:	4c10      	ldr	r4, [pc, #64]	; (81218 <test_digitalDuePin13And22IsSet+0x4c>)
   811d6:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   811d8:	2016      	movs	r0, #22
   811da:	2102      	movs	r1, #2
   811dc:	47a0      	blx	r4
		
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   811de:	200d      	movs	r0, #13
   811e0:	2101      	movs	r1, #1
   811e2:	4c0e      	ldr	r4, [pc, #56]	; (8121c <test_digitalDuePin13And22IsSet+0x50>)
   811e4:	47a0      	blx	r4
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   811e6:	2016      	movs	r0, #22
   811e8:	2101      	movs	r1, #1
   811ea:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_ODSR, "PB26 is not high");	/* Check the status bit that PB26 on port B is set */
   811ec:	4d0c      	ldr	r5, [pc, #48]	; (81220 <test_digitalDuePin13And22IsSet+0x54>)
   811ee:	682a      	ldr	r2, [r5, #0]
   811f0:	236e      	movs	r3, #110	; 0x6e
   811f2:	9300      	str	r3, [sp, #0]
   811f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   811f8:	f04f 31ff 	mov.w	r1, #4294967295
   811fc:	4b09      	ldr	r3, [pc, #36]	; (81224 <test_digitalDuePin13And22IsSet+0x58>)
   811fe:	4c0a      	ldr	r4, [pc, #40]	; (81228 <test_digitalDuePin13And22IsSet+0x5c>)
   81200:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_ODSR, "PB27 is not high");	/* Check the status bit that PB27 on port B is set */
   81202:	682a      	ldr	r2, [r5, #0]
   81204:	236f      	movs	r3, #111	; 0x6f
   81206:	9300      	str	r3, [sp, #0]
   81208:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8120c:	f04f 31ff 	mov.w	r1, #4294967295
   81210:	4b06      	ldr	r3, [pc, #24]	; (8122c <test_digitalDuePin13And22IsSet+0x60>)
   81212:	47a0      	blx	r4
}
   81214:	b003      	add	sp, #12
   81216:	bd30      	pop	{r4, r5, pc}
   81218:	00080215 	.word	0x00080215
   8121c:	0008023d 	.word	0x0008023d
   81220:	400e1038 	.word	0x400e1038
   81224:	00084cc0 	.word	0x00084cc0
   81228:	00080ba1 	.word	0x00080ba1
   8122c:	00084cd4 	.word	0x00084cd4

00081230 <test_digitalDuePin13isClearedAnd22IsSet>:

void test_digitalDuePin13isClearedAnd22IsSet(void)
{
   81230:	b570      	push	{r4, r5, r6, lr}
   81232:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   81234:	200d      	movs	r0, #13
   81236:	2102      	movs	r1, #2
   81238:	4c1b      	ldr	r4, [pc, #108]	; (812a8 <test_digitalDuePin13isClearedAnd22IsSet+0x78>)
   8123a:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   8123c:	2016      	movs	r0, #22
   8123e:	2102      	movs	r1, #2
   81240:	47a0      	blx	r4

	/* First write opposite values compared to what is going to be tested */
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high */
   81242:	200d      	movs	r0, #13
   81244:	2101      	movs	r1, #1
   81246:	4e19      	ldr	r6, [pc, #100]	; (812ac <test_digitalDuePin13isClearedAnd22IsSet+0x7c>)
   81248:	47b0      	blx	r6
	digitalWrite(22, LOW); /* set pin 22 on the Due to LOW */
   8124a:	2016      	movs	r0, #22
   8124c:	2100      	movs	r1, #0
   8124e:	47b0      	blx	r6
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is cleared */
   81250:	4d17      	ldr	r5, [pc, #92]	; (812b0 <test_digitalDuePin13isClearedAnd22IsSet+0x80>)
   81252:	682a      	ldr	r2, [r5, #0]
   81254:	237a      	movs	r3, #122	; 0x7a
   81256:	9300      	str	r3, [sp, #0]
   81258:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8125c:	f04f 31ff 	mov.w	r1, #4294967295
   81260:	2300      	movs	r3, #0
   81262:	4c14      	ldr	r4, [pc, #80]	; (812b4 <test_digitalDuePin13isClearedAnd22IsSet+0x84>)
   81264:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   81266:	682a      	ldr	r2, [r5, #0]
   81268:	237b      	movs	r3, #123	; 0x7b
   8126a:	9300      	str	r3, [sp, #0]
   8126c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81270:	2100      	movs	r1, #0
   81272:	460b      	mov	r3, r1
   81274:	47a0      	blx	r4
			
	digitalWrite(13, LOW); /* set pin 13 on the Due to low */
   81276:	200d      	movs	r0, #13
   81278:	2100      	movs	r1, #0
   8127a:	47b0      	blx	r6
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   8127c:	2016      	movs	r0, #22
   8127e:	2101      	movs	r1, #1
   81280:	47b0      	blx	r6
	TEST_ASSERT_BIT_LOW_MESSAGE(27, *p_PIOB_ODSR, "PB27 is not low");	/* Check the status bit that PB27 on port B is set */	
   81282:	682a      	ldr	r2, [r5, #0]
   81284:	237f      	movs	r3, #127	; 0x7f
   81286:	9300      	str	r3, [sp, #0]
   81288:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8128c:	2100      	movs	r1, #0
   8128e:	4b0a      	ldr	r3, [pc, #40]	; (812b8 <test_digitalDuePin13isClearedAnd22IsSet+0x88>)
   81290:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_ODSR, "PB26 is not high");	/* Check the status bit that PB26 on port B is cleared */
   81292:	682a      	ldr	r2, [r5, #0]
   81294:	2380      	movs	r3, #128	; 0x80
   81296:	9300      	str	r3, [sp, #0]
   81298:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   8129c:	f04f 31ff 	mov.w	r1, #4294967295
   812a0:	4b06      	ldr	r3, [pc, #24]	; (812bc <test_digitalDuePin13isClearedAnd22IsSet+0x8c>)
   812a2:	47a0      	blx	r4
   812a4:	b002      	add	sp, #8
   812a6:	bd70      	pop	{r4, r5, r6, pc}
   812a8:	00080215 	.word	0x00080215
   812ac:	0008023d 	.word	0x0008023d
   812b0:	400e1038 	.word	0x400e1038
   812b4:	00080ba1 	.word	0x00080ba1
   812b8:	00084ce8 	.word	0x00084ce8
   812bc:	00084cc0 	.word	0x00084cc0

000812c0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   812c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   812c2:	b083      	sub	sp, #12
   812c4:	4604      	mov	r4, r0
   812c6:	460d      	mov	r5, r1
	uint32_t val = 0;
   812c8:	2300      	movs	r3, #0
   812ca:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   812cc:	4b1f      	ldr	r3, [pc, #124]	; (8134c <usart_serial_getchar+0x8c>)
   812ce:	4298      	cmp	r0, r3
   812d0:	d107      	bne.n	812e2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   812d2:	461f      	mov	r7, r3
   812d4:	4e1e      	ldr	r6, [pc, #120]	; (81350 <usart_serial_getchar+0x90>)
   812d6:	4638      	mov	r0, r7
   812d8:	4629      	mov	r1, r5
   812da:	47b0      	blx	r6
   812dc:	2800      	cmp	r0, #0
   812de:	d1fa      	bne.n	812d6 <usart_serial_getchar+0x16>
   812e0:	e019      	b.n	81316 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   812e2:	4b1c      	ldr	r3, [pc, #112]	; (81354 <usart_serial_getchar+0x94>)
   812e4:	4298      	cmp	r0, r3
   812e6:	d109      	bne.n	812fc <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   812e8:	461f      	mov	r7, r3
   812ea:	4e1b      	ldr	r6, [pc, #108]	; (81358 <usart_serial_getchar+0x98>)
   812ec:	4638      	mov	r0, r7
   812ee:	a901      	add	r1, sp, #4
   812f0:	47b0      	blx	r6
   812f2:	2800      	cmp	r0, #0
   812f4:	d1fa      	bne.n	812ec <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   812f6:	9b01      	ldr	r3, [sp, #4]
   812f8:	702b      	strb	r3, [r5, #0]
   812fa:	e019      	b.n	81330 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   812fc:	4b17      	ldr	r3, [pc, #92]	; (8135c <usart_serial_getchar+0x9c>)
   812fe:	4298      	cmp	r0, r3
   81300:	d109      	bne.n	81316 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81302:	461e      	mov	r6, r3
   81304:	4c14      	ldr	r4, [pc, #80]	; (81358 <usart_serial_getchar+0x98>)
   81306:	4630      	mov	r0, r6
   81308:	a901      	add	r1, sp, #4
   8130a:	47a0      	blx	r4
   8130c:	2800      	cmp	r0, #0
   8130e:	d1fa      	bne.n	81306 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81310:	9b01      	ldr	r3, [sp, #4]
   81312:	702b      	strb	r3, [r5, #0]
   81314:	e018      	b.n	81348 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81316:	4b12      	ldr	r3, [pc, #72]	; (81360 <usart_serial_getchar+0xa0>)
   81318:	429c      	cmp	r4, r3
   8131a:	d109      	bne.n	81330 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8131c:	461e      	mov	r6, r3
   8131e:	4c0e      	ldr	r4, [pc, #56]	; (81358 <usart_serial_getchar+0x98>)
   81320:	4630      	mov	r0, r6
   81322:	a901      	add	r1, sp, #4
   81324:	47a0      	blx	r4
   81326:	2800      	cmp	r0, #0
   81328:	d1fa      	bne.n	81320 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8132a:	9b01      	ldr	r3, [sp, #4]
   8132c:	702b      	strb	r3, [r5, #0]
   8132e:	e00b      	b.n	81348 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81330:	4b0c      	ldr	r3, [pc, #48]	; (81364 <usart_serial_getchar+0xa4>)
   81332:	429c      	cmp	r4, r3
   81334:	d108      	bne.n	81348 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81336:	461e      	mov	r6, r3
   81338:	4c07      	ldr	r4, [pc, #28]	; (81358 <usart_serial_getchar+0x98>)
   8133a:	4630      	mov	r0, r6
   8133c:	a901      	add	r1, sp, #4
   8133e:	47a0      	blx	r4
   81340:	2800      	cmp	r0, #0
   81342:	d1fa      	bne.n	8133a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81344:	9b01      	ldr	r3, [sp, #4]
   81346:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81348:	b003      	add	sp, #12
   8134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8134c:	400e0800 	.word	0x400e0800
   81350:	00080fb5 	.word	0x00080fb5
   81354:	40098000 	.word	0x40098000
   81358:	0008019d 	.word	0x0008019d
   8135c:	4009c000 	.word	0x4009c000
   81360:	400a0000 	.word	0x400a0000
   81364:	400a4000 	.word	0x400a4000

00081368 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81368:	b570      	push	{r4, r5, r6, lr}
   8136a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8136c:	4b21      	ldr	r3, [pc, #132]	; (813f4 <usart_serial_putchar+0x8c>)
   8136e:	4298      	cmp	r0, r3
   81370:	d107      	bne.n	81382 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81372:	461e      	mov	r6, r3
   81374:	4d20      	ldr	r5, [pc, #128]	; (813f8 <usart_serial_putchar+0x90>)
   81376:	4630      	mov	r0, r6
   81378:	4621      	mov	r1, r4
   8137a:	47a8      	blx	r5
   8137c:	2800      	cmp	r0, #0
   8137e:	d1fa      	bne.n	81376 <usart_serial_putchar+0xe>
   81380:	e02b      	b.n	813da <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81382:	4b1e      	ldr	r3, [pc, #120]	; (813fc <usart_serial_putchar+0x94>)
   81384:	4298      	cmp	r0, r3
   81386:	d107      	bne.n	81398 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81388:	461e      	mov	r6, r3
   8138a:	4d1d      	ldr	r5, [pc, #116]	; (81400 <usart_serial_putchar+0x98>)
   8138c:	4630      	mov	r0, r6
   8138e:	4621      	mov	r1, r4
   81390:	47a8      	blx	r5
   81392:	2800      	cmp	r0, #0
   81394:	d1fa      	bne.n	8138c <usart_serial_putchar+0x24>
   81396:	e022      	b.n	813de <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81398:	4b1a      	ldr	r3, [pc, #104]	; (81404 <usart_serial_putchar+0x9c>)
   8139a:	4298      	cmp	r0, r3
   8139c:	d107      	bne.n	813ae <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8139e:	461e      	mov	r6, r3
   813a0:	4d17      	ldr	r5, [pc, #92]	; (81400 <usart_serial_putchar+0x98>)
   813a2:	4630      	mov	r0, r6
   813a4:	4621      	mov	r1, r4
   813a6:	47a8      	blx	r5
   813a8:	2800      	cmp	r0, #0
   813aa:	d1fa      	bne.n	813a2 <usart_serial_putchar+0x3a>
   813ac:	e019      	b.n	813e2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   813ae:	4b16      	ldr	r3, [pc, #88]	; (81408 <usart_serial_putchar+0xa0>)
   813b0:	4298      	cmp	r0, r3
   813b2:	d107      	bne.n	813c4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   813b4:	461e      	mov	r6, r3
   813b6:	4d12      	ldr	r5, [pc, #72]	; (81400 <usart_serial_putchar+0x98>)
   813b8:	4630      	mov	r0, r6
   813ba:	4621      	mov	r1, r4
   813bc:	47a8      	blx	r5
   813be:	2800      	cmp	r0, #0
   813c0:	d1fa      	bne.n	813b8 <usart_serial_putchar+0x50>
   813c2:	e010      	b.n	813e6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   813c4:	4b11      	ldr	r3, [pc, #68]	; (8140c <usart_serial_putchar+0xa4>)
   813c6:	4298      	cmp	r0, r3
   813c8:	d10f      	bne.n	813ea <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   813ca:	461e      	mov	r6, r3
   813cc:	4d0c      	ldr	r5, [pc, #48]	; (81400 <usart_serial_putchar+0x98>)
   813ce:	4630      	mov	r0, r6
   813d0:	4621      	mov	r1, r4
   813d2:	47a8      	blx	r5
   813d4:	2800      	cmp	r0, #0
   813d6:	d1fa      	bne.n	813ce <usart_serial_putchar+0x66>
   813d8:	e009      	b.n	813ee <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   813da:	2001      	movs	r0, #1
   813dc:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813de:	2001      	movs	r0, #1
   813e0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813e2:	2001      	movs	r0, #1
   813e4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813e6:	2001      	movs	r0, #1
   813e8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   813ea:	2000      	movs	r0, #0
   813ec:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813ee:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   813f0:	bd70      	pop	{r4, r5, r6, pc}
   813f2:	bf00      	nop
   813f4:	400e0800 	.word	0x400e0800
   813f8:	00080fa5 	.word	0x00080fa5
   813fc:	40098000 	.word	0x40098000
   81400:	00080189 	.word	0x00080189
   81404:	4009c000 	.word	0x4009c000
   81408:	400a0000 	.word	0x400a0000
   8140c:	400a4000 	.word	0x400a4000

00081410 <main>:
	printf("=============\n");
}


int main(void)
{
   81410:	b530      	push	{r4, r5, lr}
   81412:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	 sysclk_init();
   81414:	4b2c      	ldr	r3, [pc, #176]	; (814c8 <main+0xb8>)
   81416:	4798      	blx	r3
	 board_init();
   81418:	4b2c      	ldr	r3, [pc, #176]	; (814cc <main+0xbc>)
   8141a:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8141c:	2008      	movs	r0, #8
   8141e:	4d2c      	ldr	r5, [pc, #176]	; (814d0 <main+0xc0>)
   81420:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81422:	4c2c      	ldr	r4, [pc, #176]	; (814d4 <main+0xc4>)
   81424:	4b2c      	ldr	r3, [pc, #176]	; (814d8 <main+0xc8>)
   81426:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81428:	4a2c      	ldr	r2, [pc, #176]	; (814dc <main+0xcc>)
   8142a:	4b2d      	ldr	r3, [pc, #180]	; (814e0 <main+0xd0>)
   8142c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8142e:	4a2d      	ldr	r2, [pc, #180]	; (814e4 <main+0xd4>)
   81430:	4b2d      	ldr	r3, [pc, #180]	; (814e8 <main+0xd8>)
   81432:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81434:	4b2d      	ldr	r3, [pc, #180]	; (814ec <main+0xdc>)
   81436:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81438:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8143c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8143e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81442:	9303      	str	r3, [sp, #12]
   81444:	2008      	movs	r0, #8
   81446:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81448:	4620      	mov	r0, r4
   8144a:	a901      	add	r1, sp, #4
   8144c:	4b28      	ldr	r3, [pc, #160]	; (814f0 <main+0xe0>)
   8144e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81450:	4d28      	ldr	r5, [pc, #160]	; (814f4 <main+0xe4>)
   81452:	682b      	ldr	r3, [r5, #0]
   81454:	6898      	ldr	r0, [r3, #8]
   81456:	2100      	movs	r1, #0
   81458:	4c27      	ldr	r4, [pc, #156]	; (814f8 <main+0xe8>)
   8145a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8145c:	682b      	ldr	r3, [r5, #0]
   8145e:	6858      	ldr	r0, [r3, #4]
   81460:	2100      	movs	r1, #0
   81462:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   81464:	4825      	ldr	r0, [pc, #148]	; (814fc <main+0xec>)
   81466:	4c26      	ldr	r4, [pc, #152]	; (81500 <main+0xf0>)
   81468:	47a0      	blx	r4
	printf("=============\n");
   8146a:	4826      	ldr	r0, [pc, #152]	; (81504 <main+0xf4>)
   8146c:	47a0      	blx	r4

	/* Initialize the console UART used from within Atmel Studio*/
	configure_console();
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/testDigitalIO.c");
   8146e:	4826      	ldr	r0, [pc, #152]	; (81508 <main+0xf8>)
   81470:	4b26      	ldr	r3, [pc, #152]	; (8150c <main+0xfc>)
   81472:	4798      	blx	r3
	
	/* Run the tests from the test-file */
	RUN_TEST(test_digitalDuePin13InitialiseProperly, 10);
   81474:	4826      	ldr	r0, [pc, #152]	; (81510 <main+0x100>)
   81476:	4927      	ldr	r1, [pc, #156]	; (81514 <main+0x104>)
   81478:	220a      	movs	r2, #10
   8147a:	4c27      	ldr	r4, [pc, #156]	; (81518 <main+0x108>)
   8147c:	47a0      	blx	r4
	
	/* Uncomment the rest of the tests, one at a time, when you have written or modified code so that you pass the previous test */
	RUN_TEST(test_digitalDuePin13IsSet, 15);
   8147e:	4827      	ldr	r0, [pc, #156]	; (8151c <main+0x10c>)
   81480:	4927      	ldr	r1, [pc, #156]	; (81520 <main+0x110>)
   81482:	220f      	movs	r2, #15
   81484:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13IsCleared, 18);
   81486:	4827      	ldr	r0, [pc, #156]	; (81524 <main+0x114>)
   81488:	4927      	ldr	r1, [pc, #156]	; (81528 <main+0x118>)
   8148a:	2212      	movs	r2, #18
   8148c:	47a0      	blx	r4
	//
	RUN_TEST(test_digitalDuePin22InitialiseProperly, 20);
   8148e:	4827      	ldr	r0, [pc, #156]	; (8152c <main+0x11c>)
   81490:	4927      	ldr	r1, [pc, #156]	; (81530 <main+0x120>)
   81492:	2214      	movs	r2, #20
   81494:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsSet, 25);
   81496:	4827      	ldr	r0, [pc, #156]	; (81534 <main+0x124>)
   81498:	4927      	ldr	r1, [pc, #156]	; (81538 <main+0x128>)
   8149a:	2219      	movs	r2, #25
   8149c:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsCleared, 28);
   8149e:	4827      	ldr	r0, [pc, #156]	; (8153c <main+0x12c>)
   814a0:	4927      	ldr	r1, [pc, #156]	; (81540 <main+0x130>)
   814a2:	221c      	movs	r2, #28
   814a4:	47a0      	blx	r4
	//
	RUN_TEST(test_digitalDuePin13And22InitialiseProperly, 30);
   814a6:	4827      	ldr	r0, [pc, #156]	; (81544 <main+0x134>)
   814a8:	4927      	ldr	r1, [pc, #156]	; (81548 <main+0x138>)
   814aa:	221e      	movs	r2, #30
   814ac:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13And22IsSet, 35);
   814ae:	4827      	ldr	r0, [pc, #156]	; (8154c <main+0x13c>)
   814b0:	4927      	ldr	r1, [pc, #156]	; (81550 <main+0x140>)
   814b2:	2223      	movs	r2, #35	; 0x23
   814b4:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13isClearedAnd22IsSet, 38);
   814b6:	4827      	ldr	r0, [pc, #156]	; (81554 <main+0x144>)
   814b8:	4927      	ldr	r1, [pc, #156]	; (81558 <main+0x148>)
   814ba:	2226      	movs	r2, #38	; 0x26
   814bc:	47a0      	blx	r4

	UnityEnd();
   814be:	4b27      	ldr	r3, [pc, #156]	; (8155c <main+0x14c>)
   814c0:	4798      	blx	r3
	
	return 0;
}
   814c2:	2000      	movs	r0, #0
   814c4:	b005      	add	sp, #20
   814c6:	bd30      	pop	{r4, r5, pc}
   814c8:	00081561 	.word	0x00081561
   814cc:	000815c5 	.word	0x000815c5
   814d0:	000819ed 	.word	0x000819ed
   814d4:	400e0800 	.word	0x400e0800
   814d8:	20070b84 	.word	0x20070b84
   814dc:	00081369 	.word	0x00081369
   814e0:	20070b80 	.word	0x20070b80
   814e4:	000812c1 	.word	0x000812c1
   814e8:	20070b00 	.word	0x20070b00
   814ec:	0501bd00 	.word	0x0501bd00
   814f0:	00080f6d 	.word	0x00080f6d
   814f4:	20070560 	.word	0x20070560
   814f8:	00081d71 	.word	0x00081d71
   814fc:	00084cf8 	.word	0x00084cf8
   81500:	00081cb5 	.word	0x00081cb5
   81504:	00084d08 	.word	0x00084d08
   81508:	00084d18 	.word	0x00084d18
   8150c:	00080c71 	.word	0x00080c71
   81510:	00080fe9 	.word	0x00080fe9
   81514:	00084d30 	.word	0x00084d30
   81518:	00080c19 	.word	0x00080c19
   8151c:	0008103d 	.word	0x0008103d
   81520:	00084d58 	.word	0x00084d58
   81524:	0008107d 	.word	0x0008107d
   81528:	00084d74 	.word	0x00084d74
   8152c:	000810c1 	.word	0x000810c1
   81530:	00084d94 	.word	0x00084d94
   81534:	000810f5 	.word	0x000810f5
   81538:	00084dbc 	.word	0x00084dbc
   8153c:	00081135 	.word	0x00081135
   81540:	00084dd8 	.word	0x00084dd8
   81544:	00081179 	.word	0x00081179
   81548:	00084df8 	.word	0x00084df8
   8154c:	000811cd 	.word	0x000811cd
   81550:	00084e24 	.word	0x00084e24
   81554:	00081231 	.word	0x00081231
   81558:	00084e44 	.word	0x00084e44
   8155c:	00080c8d 	.word	0x00080c8d

00081560 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81560:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81562:	480e      	ldr	r0, [pc, #56]	; (8159c <sysclk_init+0x3c>)
   81564:	4b0e      	ldr	r3, [pc, #56]	; (815a0 <sysclk_init+0x40>)
   81566:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81568:	2000      	movs	r0, #0
   8156a:	213e      	movs	r1, #62	; 0x3e
   8156c:	4b0d      	ldr	r3, [pc, #52]	; (815a4 <sysclk_init+0x44>)
   8156e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81570:	4c0d      	ldr	r4, [pc, #52]	; (815a8 <sysclk_init+0x48>)
   81572:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81574:	2800      	cmp	r0, #0
   81576:	d0fc      	beq.n	81572 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81578:	4b0c      	ldr	r3, [pc, #48]	; (815ac <sysclk_init+0x4c>)
   8157a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8157c:	4a0c      	ldr	r2, [pc, #48]	; (815b0 <sysclk_init+0x50>)
   8157e:	4b0d      	ldr	r3, [pc, #52]	; (815b4 <sysclk_init+0x54>)
   81580:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81582:	4c0d      	ldr	r4, [pc, #52]	; (815b8 <sysclk_init+0x58>)
   81584:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81586:	2800      	cmp	r0, #0
   81588:	d0fc      	beq.n	81584 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8158a:	2010      	movs	r0, #16
   8158c:	4b0b      	ldr	r3, [pc, #44]	; (815bc <sysclk_init+0x5c>)
   8158e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81590:	4b0b      	ldr	r3, [pc, #44]	; (815c0 <sysclk_init+0x60>)
   81592:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81594:	4801      	ldr	r0, [pc, #4]	; (8159c <sysclk_init+0x3c>)
   81596:	4b02      	ldr	r3, [pc, #8]	; (815a0 <sysclk_init+0x40>)
   81598:	4798      	blx	r3
   8159a:	bd10      	pop	{r4, pc}
   8159c:	0501bd00 	.word	0x0501bd00
   815a0:	200700a5 	.word	0x200700a5
   815a4:	00081969 	.word	0x00081969
   815a8:	000819bd 	.word	0x000819bd
   815ac:	000819cd 	.word	0x000819cd
   815b0:	200d3f01 	.word	0x200d3f01
   815b4:	400e0600 	.word	0x400e0600
   815b8:	000819dd 	.word	0x000819dd
   815bc:	00081905 	.word	0x00081905
   815c0:	00081af9 	.word	0x00081af9

000815c4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   815c4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   815c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   815ca:	4b16      	ldr	r3, [pc, #88]	; (81624 <board_init+0x60>)
   815cc:	605a      	str	r2, [r3, #4]
   815ce:	200b      	movs	r0, #11
   815d0:	4c15      	ldr	r4, [pc, #84]	; (81628 <board_init+0x64>)
   815d2:	47a0      	blx	r4
   815d4:	200c      	movs	r0, #12
   815d6:	47a0      	blx	r4
   815d8:	200d      	movs	r0, #13
   815da:	47a0      	blx	r4
   815dc:	200e      	movs	r0, #14
   815de:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   815e0:	203b      	movs	r0, #59	; 0x3b
   815e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815e6:	4c11      	ldr	r4, [pc, #68]	; (8162c <board_init+0x68>)
   815e8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   815ea:	2055      	movs	r0, #85	; 0x55
   815ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815f0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   815f2:	2056      	movs	r0, #86	; 0x56
   815f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815f8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   815fa:	2068      	movs	r0, #104	; 0x68
   815fc:	490c      	ldr	r1, [pc, #48]	; (81630 <board_init+0x6c>)
   815fe:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81600:	205c      	movs	r0, #92	; 0x5c
   81602:	490c      	ldr	r1, [pc, #48]	; (81634 <board_init+0x70>)
   81604:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81606:	480c      	ldr	r0, [pc, #48]	; (81638 <board_init+0x74>)
   81608:	f44f 7140 	mov.w	r1, #768	; 0x300
   8160c:	4a0b      	ldr	r2, [pc, #44]	; (8163c <board_init+0x78>)
   8160e:	4b0c      	ldr	r3, [pc, #48]	; (81640 <board_init+0x7c>)
   81610:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81612:	202b      	movs	r0, #43	; 0x2b
   81614:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81618:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8161a:	202a      	movs	r0, #42	; 0x2a
   8161c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81620:	47a0      	blx	r4
   81622:	bd10      	pop	{r4, pc}
   81624:	400e1a50 	.word	0x400e1a50
   81628:	000819ed 	.word	0x000819ed
   8162c:	000816e9 	.word	0x000816e9
   81630:	28000079 	.word	0x28000079
   81634:	28000001 	.word	0x28000001
   81638:	400e0e00 	.word	0x400e0e00
   8163c:	08000001 	.word	0x08000001
   81640:	000817bd 	.word	0x000817bd

00081644 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81644:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81646:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8164a:	d016      	beq.n	8167a <pio_set_peripheral+0x36>
   8164c:	d804      	bhi.n	81658 <pio_set_peripheral+0x14>
   8164e:	b1c1      	cbz	r1, 81682 <pio_set_peripheral+0x3e>
   81650:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81654:	d00a      	beq.n	8166c <pio_set_peripheral+0x28>
   81656:	e013      	b.n	81680 <pio_set_peripheral+0x3c>
   81658:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8165c:	d011      	beq.n	81682 <pio_set_peripheral+0x3e>
   8165e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81662:	d00e      	beq.n	81682 <pio_set_peripheral+0x3e>
   81664:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81668:	d10a      	bne.n	81680 <pio_set_peripheral+0x3c>
   8166a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8166c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8166e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81670:	400b      	ands	r3, r1
   81672:	ea23 0302 	bic.w	r3, r3, r2
   81676:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81678:	e002      	b.n	81680 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8167a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8167c:	4313      	orrs	r3, r2
   8167e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81680:	6042      	str	r2, [r0, #4]
   81682:	4770      	bx	lr

00081684 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81684:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81686:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8168a:	bf14      	ite	ne
   8168c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8168e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81690:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81694:	bf14      	ite	ne
   81696:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81698:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8169a:	f012 0f02 	tst.w	r2, #2
   8169e:	d002      	beq.n	816a6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   816a0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   816a4:	e004      	b.n	816b0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   816a6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   816aa:	bf18      	it	ne
   816ac:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   816b0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   816b2:	6001      	str	r1, [r0, #0]
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   816b8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   816ba:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816bc:	9c01      	ldr	r4, [sp, #4]
   816be:	b10c      	cbz	r4, 816c4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   816c0:	6641      	str	r1, [r0, #100]	; 0x64
   816c2:	e000      	b.n	816c6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816c4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   816c6:	b10b      	cbz	r3, 816cc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   816c8:	6501      	str	r1, [r0, #80]	; 0x50
   816ca:	e000      	b.n	816ce <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   816cc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   816ce:	b10a      	cbz	r2, 816d4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   816d0:	6301      	str	r1, [r0, #48]	; 0x30
   816d2:	e000      	b.n	816d6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   816d4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   816d6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   816d8:	6001      	str	r1, [r0, #0]
}
   816da:	f85d 4b04 	ldr.w	r4, [sp], #4
   816de:	4770      	bx	lr

000816e0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   816e0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   816e2:	4770      	bx	lr

000816e4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   816e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   816e6:	4770      	bx	lr

000816e8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   816e8:	b570      	push	{r4, r5, r6, lr}
   816ea:	b082      	sub	sp, #8
   816ec:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   816ee:	0944      	lsrs	r4, r0, #5
   816f0:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   816f4:	f204 7407 	addw	r4, r4, #1799	; 0x707
   816f8:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   816fa:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   816fe:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81702:	d030      	beq.n	81766 <pio_configure_pin+0x7e>
   81704:	d806      	bhi.n	81714 <pio_configure_pin+0x2c>
   81706:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8170a:	d00a      	beq.n	81722 <pio_configure_pin+0x3a>
   8170c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81710:	d018      	beq.n	81744 <pio_configure_pin+0x5c>
   81712:	e049      	b.n	817a8 <pio_configure_pin+0xc0>
   81714:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81718:	d030      	beq.n	8177c <pio_configure_pin+0x94>
   8171a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8171e:	d02d      	beq.n	8177c <pio_configure_pin+0x94>
   81720:	e042      	b.n	817a8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81722:	f000 001f 	and.w	r0, r0, #31
   81726:	2401      	movs	r4, #1
   81728:	4084      	lsls	r4, r0
   8172a:	4630      	mov	r0, r6
   8172c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81730:	4622      	mov	r2, r4
   81732:	4b1f      	ldr	r3, [pc, #124]	; (817b0 <pio_configure_pin+0xc8>)
   81734:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81736:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8173a:	bf14      	ite	ne
   8173c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8173e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81740:	2001      	movs	r0, #1
   81742:	e032      	b.n	817aa <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81744:	f000 001f 	and.w	r0, r0, #31
   81748:	2401      	movs	r4, #1
   8174a:	4084      	lsls	r4, r0
   8174c:	4630      	mov	r0, r6
   8174e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81752:	4622      	mov	r2, r4
   81754:	4b16      	ldr	r3, [pc, #88]	; (817b0 <pio_configure_pin+0xc8>)
   81756:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81758:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8175c:	bf14      	ite	ne
   8175e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81760:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81762:	2001      	movs	r0, #1
   81764:	e021      	b.n	817aa <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81766:	f000 011f 	and.w	r1, r0, #31
   8176a:	2401      	movs	r4, #1
   8176c:	4630      	mov	r0, r6
   8176e:	fa04 f101 	lsl.w	r1, r4, r1
   81772:	462a      	mov	r2, r5
   81774:	4b0f      	ldr	r3, [pc, #60]	; (817b4 <pio_configure_pin+0xcc>)
   81776:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81778:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8177a:	e016      	b.n	817aa <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8177c:	f000 011f 	and.w	r1, r0, #31
   81780:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81782:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81786:	ea05 0304 	and.w	r3, r5, r4
   8178a:	9300      	str	r3, [sp, #0]
   8178c:	4630      	mov	r0, r6
   8178e:	fa04 f101 	lsl.w	r1, r4, r1
   81792:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81796:	bf14      	ite	ne
   81798:	2200      	movne	r2, #0
   8179a:	2201      	moveq	r2, #1
   8179c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817a0:	4d05      	ldr	r5, [pc, #20]	; (817b8 <pio_configure_pin+0xd0>)
   817a2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   817a4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   817a6:	e000      	b.n	817aa <pio_configure_pin+0xc2>

	default:
		return 0;
   817a8:	2000      	movs	r0, #0
	}

	return 1;
}
   817aa:	b002      	add	sp, #8
   817ac:	bd70      	pop	{r4, r5, r6, pc}
   817ae:	bf00      	nop
   817b0:	00081645 	.word	0x00081645
   817b4:	00081685 	.word	0x00081685
   817b8:	000816b9 	.word	0x000816b9

000817bc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   817bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   817be:	b083      	sub	sp, #12
   817c0:	4607      	mov	r7, r0
   817c2:	460e      	mov	r6, r1
   817c4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   817c6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   817ca:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   817ce:	d026      	beq.n	8181e <pio_configure_pin_group+0x62>
   817d0:	d806      	bhi.n	817e0 <pio_configure_pin_group+0x24>
   817d2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   817d6:	d00a      	beq.n	817ee <pio_configure_pin_group+0x32>
   817d8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   817dc:	d013      	beq.n	81806 <pio_configure_pin_group+0x4a>
   817de:	e034      	b.n	8184a <pio_configure_pin_group+0x8e>
   817e0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   817e4:	d01f      	beq.n	81826 <pio_configure_pin_group+0x6a>
   817e6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   817ea:	d01c      	beq.n	81826 <pio_configure_pin_group+0x6a>
   817ec:	e02d      	b.n	8184a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   817ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817f2:	4632      	mov	r2, r6
   817f4:	4b16      	ldr	r3, [pc, #88]	; (81850 <pio_configure_pin_group+0x94>)
   817f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   817fc:	bf14      	ite	ne
   817fe:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81800:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81802:	2001      	movs	r0, #1
   81804:	e022      	b.n	8184c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81806:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8180a:	4632      	mov	r2, r6
   8180c:	4b10      	ldr	r3, [pc, #64]	; (81850 <pio_configure_pin_group+0x94>)
   8180e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81810:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81814:	bf14      	ite	ne
   81816:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81818:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8181a:	2001      	movs	r0, #1
   8181c:	e016      	b.n	8184c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8181e:	4b0d      	ldr	r3, [pc, #52]	; (81854 <pio_configure_pin_group+0x98>)
   81820:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81822:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81824:	e012      	b.n	8184c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81826:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8182a:	f005 0301 	and.w	r3, r5, #1
   8182e:	9300      	str	r3, [sp, #0]
   81830:	4638      	mov	r0, r7
   81832:	4631      	mov	r1, r6
   81834:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81838:	bf14      	ite	ne
   8183a:	2200      	movne	r2, #0
   8183c:	2201      	moveq	r2, #1
   8183e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81842:	4c05      	ldr	r4, [pc, #20]	; (81858 <pio_configure_pin_group+0x9c>)
   81844:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81846:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81848:	e000      	b.n	8184c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8184a:	2000      	movs	r0, #0
	}

	return 1;
}
   8184c:	b003      	add	sp, #12
   8184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81850:	00081645 	.word	0x00081645
   81854:	00081685 	.word	0x00081685
   81858:	000816b9 	.word	0x000816b9

0008185c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81860:	4604      	mov	r4, r0
   81862:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81864:	4b10      	ldr	r3, [pc, #64]	; (818a8 <pio_handler_process+0x4c>)
   81866:	4798      	blx	r3
   81868:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8186a:	4620      	mov	r0, r4
   8186c:	4b0f      	ldr	r3, [pc, #60]	; (818ac <pio_handler_process+0x50>)
   8186e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81870:	4005      	ands	r5, r0
   81872:	d017      	beq.n	818a4 <pio_handler_process+0x48>
   81874:	4f0e      	ldr	r7, [pc, #56]	; (818b0 <pio_handler_process+0x54>)
   81876:	f107 040c 	add.w	r4, r7, #12
   8187a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8187c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81880:	42b3      	cmp	r3, r6
   81882:	d10a      	bne.n	8189a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81884:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81888:	4229      	tst	r1, r5
   8188a:	d006      	beq.n	8189a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8188c:	6823      	ldr	r3, [r4, #0]
   8188e:	4630      	mov	r0, r6
   81890:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81892:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81896:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8189a:	42bc      	cmp	r4, r7
   8189c:	d002      	beq.n	818a4 <pio_handler_process+0x48>
   8189e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   818a0:	2d00      	cmp	r5, #0
   818a2:	d1eb      	bne.n	8187c <pio_handler_process+0x20>
   818a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818a8:	000816e1 	.word	0x000816e1
   818ac:	000816e5 	.word	0x000816e5
   818b0:	20070a58 	.word	0x20070a58

000818b4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   818b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   818b6:	4802      	ldr	r0, [pc, #8]	; (818c0 <PIOA_Handler+0xc>)
   818b8:	210b      	movs	r1, #11
   818ba:	4b02      	ldr	r3, [pc, #8]	; (818c4 <PIOA_Handler+0x10>)
   818bc:	4798      	blx	r3
   818be:	bd08      	pop	{r3, pc}
   818c0:	400e0e00 	.word	0x400e0e00
   818c4:	0008185d 	.word	0x0008185d

000818c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   818c8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   818ca:	4802      	ldr	r0, [pc, #8]	; (818d4 <PIOB_Handler+0xc>)
   818cc:	210c      	movs	r1, #12
   818ce:	4b02      	ldr	r3, [pc, #8]	; (818d8 <PIOB_Handler+0x10>)
   818d0:	4798      	blx	r3
   818d2:	bd08      	pop	{r3, pc}
   818d4:	400e1000 	.word	0x400e1000
   818d8:	0008185d 	.word	0x0008185d

000818dc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   818dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   818de:	4802      	ldr	r0, [pc, #8]	; (818e8 <PIOC_Handler+0xc>)
   818e0:	210d      	movs	r1, #13
   818e2:	4b02      	ldr	r3, [pc, #8]	; (818ec <PIOC_Handler+0x10>)
   818e4:	4798      	blx	r3
   818e6:	bd08      	pop	{r3, pc}
   818e8:	400e1200 	.word	0x400e1200
   818ec:	0008185d 	.word	0x0008185d

000818f0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   818f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   818f2:	4802      	ldr	r0, [pc, #8]	; (818fc <PIOD_Handler+0xc>)
   818f4:	210e      	movs	r1, #14
   818f6:	4b02      	ldr	r3, [pc, #8]	; (81900 <PIOD_Handler+0x10>)
   818f8:	4798      	blx	r3
   818fa:	bd08      	pop	{r3, pc}
   818fc:	400e1400 	.word	0x400e1400
   81900:	0008185d 	.word	0x0008185d

00081904 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81904:	4b17      	ldr	r3, [pc, #92]	; (81964 <pmc_switch_mck_to_pllack+0x60>)
   81906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81908:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8190c:	4310      	orrs	r0, r2
   8190e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81912:	f013 0f08 	tst.w	r3, #8
   81916:	d109      	bne.n	8192c <pmc_switch_mck_to_pllack+0x28>
   81918:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8191c:	4911      	ldr	r1, [pc, #68]	; (81964 <pmc_switch_mck_to_pllack+0x60>)
   8191e:	e001      	b.n	81924 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81920:	3b01      	subs	r3, #1
   81922:	d019      	beq.n	81958 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81924:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81926:	f012 0f08 	tst.w	r2, #8
   8192a:	d0f9      	beq.n	81920 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8192c:	4b0d      	ldr	r3, [pc, #52]	; (81964 <pmc_switch_mck_to_pllack+0x60>)
   8192e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81930:	f022 0203 	bic.w	r2, r2, #3
   81934:	f042 0202 	orr.w	r2, r2, #2
   81938:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8193a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8193c:	f010 0008 	ands.w	r0, r0, #8
   81940:	d10c      	bne.n	8195c <pmc_switch_mck_to_pllack+0x58>
   81942:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81946:	4907      	ldr	r1, [pc, #28]	; (81964 <pmc_switch_mck_to_pllack+0x60>)
   81948:	e001      	b.n	8194e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8194a:	3b01      	subs	r3, #1
   8194c:	d008      	beq.n	81960 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8194e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81950:	f012 0f08 	tst.w	r2, #8
   81954:	d0f9      	beq.n	8194a <pmc_switch_mck_to_pllack+0x46>
   81956:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81958:	2001      	movs	r0, #1
   8195a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8195c:	2000      	movs	r0, #0
   8195e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81960:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81962:	4770      	bx	lr
   81964:	400e0600 	.word	0x400e0600

00081968 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81968:	b138      	cbz	r0, 8197a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8196a:	4911      	ldr	r1, [pc, #68]	; (819b0 <pmc_switch_mainck_to_xtal+0x48>)
   8196c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8196e:	4a11      	ldr	r2, [pc, #68]	; (819b4 <pmc_switch_mainck_to_xtal+0x4c>)
   81970:	401a      	ands	r2, r3
   81972:	4b11      	ldr	r3, [pc, #68]	; (819b8 <pmc_switch_mainck_to_xtal+0x50>)
   81974:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81976:	620b      	str	r3, [r1, #32]
   81978:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8197a:	4a0d      	ldr	r2, [pc, #52]	; (819b0 <pmc_switch_mainck_to_xtal+0x48>)
   8197c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8197e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81982:	f023 0303 	bic.w	r3, r3, #3
   81986:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8198a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8198e:	0209      	lsls	r1, r1, #8
   81990:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81992:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81994:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81996:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81998:	f013 0f01 	tst.w	r3, #1
   8199c:	d0fb      	beq.n	81996 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8199e:	4a04      	ldr	r2, [pc, #16]	; (819b0 <pmc_switch_mainck_to_xtal+0x48>)
   819a0:	6a13      	ldr	r3, [r2, #32]
   819a2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   819a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   819aa:	6213      	str	r3, [r2, #32]
   819ac:	4770      	bx	lr
   819ae:	bf00      	nop
   819b0:	400e0600 	.word	0x400e0600
   819b4:	fec8fffc 	.word	0xfec8fffc
   819b8:	01370002 	.word	0x01370002

000819bc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   819bc:	4b02      	ldr	r3, [pc, #8]	; (819c8 <pmc_osc_is_ready_mainck+0xc>)
   819be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   819c0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   819c4:	4770      	bx	lr
   819c6:	bf00      	nop
   819c8:	400e0600 	.word	0x400e0600

000819cc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   819cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   819d0:	4b01      	ldr	r3, [pc, #4]	; (819d8 <pmc_disable_pllack+0xc>)
   819d2:	629a      	str	r2, [r3, #40]	; 0x28
   819d4:	4770      	bx	lr
   819d6:	bf00      	nop
   819d8:	400e0600 	.word	0x400e0600

000819dc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   819dc:	4b02      	ldr	r3, [pc, #8]	; (819e8 <pmc_is_locked_pllack+0xc>)
   819de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   819e0:	f000 0002 	and.w	r0, r0, #2
   819e4:	4770      	bx	lr
   819e6:	bf00      	nop
   819e8:	400e0600 	.word	0x400e0600

000819ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   819ec:	282c      	cmp	r0, #44	; 0x2c
   819ee:	d820      	bhi.n	81a32 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   819f0:	281f      	cmp	r0, #31
   819f2:	d80d      	bhi.n	81a10 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   819f4:	4b12      	ldr	r3, [pc, #72]	; (81a40 <pmc_enable_periph_clk+0x54>)
   819f6:	699a      	ldr	r2, [r3, #24]
   819f8:	2301      	movs	r3, #1
   819fa:	4083      	lsls	r3, r0
   819fc:	401a      	ands	r2, r3
   819fe:	4293      	cmp	r3, r2
   81a00:	d019      	beq.n	81a36 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81a02:	2301      	movs	r3, #1
   81a04:	fa03 f000 	lsl.w	r0, r3, r0
   81a08:	4b0d      	ldr	r3, [pc, #52]	; (81a40 <pmc_enable_periph_clk+0x54>)
   81a0a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a0c:	2000      	movs	r0, #0
   81a0e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a10:	4b0b      	ldr	r3, [pc, #44]	; (81a40 <pmc_enable_periph_clk+0x54>)
   81a12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81a16:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a18:	2301      	movs	r3, #1
   81a1a:	4083      	lsls	r3, r0
   81a1c:	401a      	ands	r2, r3
   81a1e:	4293      	cmp	r3, r2
   81a20:	d00b      	beq.n	81a3a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81a22:	2301      	movs	r3, #1
   81a24:	fa03 f000 	lsl.w	r0, r3, r0
   81a28:	4b05      	ldr	r3, [pc, #20]	; (81a40 <pmc_enable_periph_clk+0x54>)
   81a2a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81a2e:	2000      	movs	r0, #0
   81a30:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81a32:	2001      	movs	r0, #1
   81a34:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a36:	2000      	movs	r0, #0
   81a38:	4770      	bx	lr
   81a3a:	2000      	movs	r0, #0
}
   81a3c:	4770      	bx	lr
   81a3e:	bf00      	nop
   81a40:	400e0600 	.word	0x400e0600

00081a44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81a44:	e7fe      	b.n	81a44 <Dummy_Handler>
   81a46:	bf00      	nop

00081a48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81a48:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81a4a:	4b1e      	ldr	r3, [pc, #120]	; (81ac4 <Reset_Handler+0x7c>)
   81a4c:	4a1e      	ldr	r2, [pc, #120]	; (81ac8 <Reset_Handler+0x80>)
   81a4e:	429a      	cmp	r2, r3
   81a50:	d003      	beq.n	81a5a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81a52:	4b1e      	ldr	r3, [pc, #120]	; (81acc <Reset_Handler+0x84>)
   81a54:	4a1b      	ldr	r2, [pc, #108]	; (81ac4 <Reset_Handler+0x7c>)
   81a56:	429a      	cmp	r2, r3
   81a58:	d304      	bcc.n	81a64 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a5a:	4b1d      	ldr	r3, [pc, #116]	; (81ad0 <Reset_Handler+0x88>)
   81a5c:	4a1d      	ldr	r2, [pc, #116]	; (81ad4 <Reset_Handler+0x8c>)
   81a5e:	429a      	cmp	r2, r3
   81a60:	d30f      	bcc.n	81a82 <Reset_Handler+0x3a>
   81a62:	e01a      	b.n	81a9a <Reset_Handler+0x52>
   81a64:	4b1c      	ldr	r3, [pc, #112]	; (81ad8 <Reset_Handler+0x90>)
   81a66:	4c1d      	ldr	r4, [pc, #116]	; (81adc <Reset_Handler+0x94>)
   81a68:	1ae4      	subs	r4, r4, r3
   81a6a:	f024 0403 	bic.w	r4, r4, #3
   81a6e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a70:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81a72:	4814      	ldr	r0, [pc, #80]	; (81ac4 <Reset_Handler+0x7c>)
   81a74:	4914      	ldr	r1, [pc, #80]	; (81ac8 <Reset_Handler+0x80>)
   81a76:	585a      	ldr	r2, [r3, r1]
   81a78:	501a      	str	r2, [r3, r0]
   81a7a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a7c:	42a3      	cmp	r3, r4
   81a7e:	d1fa      	bne.n	81a76 <Reset_Handler+0x2e>
   81a80:	e7eb      	b.n	81a5a <Reset_Handler+0x12>
   81a82:	4b17      	ldr	r3, [pc, #92]	; (81ae0 <Reset_Handler+0x98>)
   81a84:	4917      	ldr	r1, [pc, #92]	; (81ae4 <Reset_Handler+0x9c>)
   81a86:	1ac9      	subs	r1, r1, r3
   81a88:	f021 0103 	bic.w	r1, r1, #3
   81a8c:	1d1a      	adds	r2, r3, #4
   81a8e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81a90:	2200      	movs	r2, #0
   81a92:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a96:	428b      	cmp	r3, r1
   81a98:	d1fb      	bne.n	81a92 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81a9a:	4a13      	ldr	r2, [pc, #76]	; (81ae8 <Reset_Handler+0xa0>)
   81a9c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81aa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81aa4:	4911      	ldr	r1, [pc, #68]	; (81aec <Reset_Handler+0xa4>)
   81aa6:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81aa8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81aac:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81ab0:	d203      	bcs.n	81aba <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81ab2:	688a      	ldr	r2, [r1, #8]
   81ab4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81ab8:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81aba:	4b0d      	ldr	r3, [pc, #52]	; (81af0 <Reset_Handler+0xa8>)
   81abc:	4798      	blx	r3

	/* Branch to main function */
	main();
   81abe:	4b0d      	ldr	r3, [pc, #52]	; (81af4 <Reset_Handler+0xac>)
   81ac0:	4798      	blx	r3
   81ac2:	e7fe      	b.n	81ac2 <Reset_Handler+0x7a>
   81ac4:	20070000 	.word	0x20070000
   81ac8:	00084ef0 	.word	0x00084ef0
   81acc:	2007099c 	.word	0x2007099c
   81ad0:	20070b8c 	.word	0x20070b8c
   81ad4:	2007099c 	.word	0x2007099c
   81ad8:	20070004 	.word	0x20070004
   81adc:	2007099f 	.word	0x2007099f
   81ae0:	20070998 	.word	0x20070998
   81ae4:	20070b87 	.word	0x20070b87
   81ae8:	00080000 	.word	0x00080000
   81aec:	e000ed00 	.word	0xe000ed00
   81af0:	00081c65 	.word	0x00081c65
   81af4:	00081411 	.word	0x00081411

00081af8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81af8:	4b3e      	ldr	r3, [pc, #248]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81afc:	f003 0303 	and.w	r3, r3, #3
   81b00:	2b03      	cmp	r3, #3
   81b02:	d85f      	bhi.n	81bc4 <SystemCoreClockUpdate+0xcc>
   81b04:	e8df f003 	tbb	[pc, r3]
   81b08:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81b0c:	4b3a      	ldr	r3, [pc, #232]	; (81bf8 <SystemCoreClockUpdate+0x100>)
   81b0e:	695b      	ldr	r3, [r3, #20]
   81b10:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81b14:	bf14      	ite	ne
   81b16:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81b1a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81b1e:	4b37      	ldr	r3, [pc, #220]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b20:	601a      	str	r2, [r3, #0]
   81b22:	e04f      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b24:	4b33      	ldr	r3, [pc, #204]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81b26:	6a1b      	ldr	r3, [r3, #32]
   81b28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b2c:	d003      	beq.n	81b36 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b2e:	4a34      	ldr	r2, [pc, #208]	; (81c00 <SystemCoreClockUpdate+0x108>)
   81b30:	4b32      	ldr	r3, [pc, #200]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b32:	601a      	str	r2, [r3, #0]
   81b34:	e046      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b36:	4a33      	ldr	r2, [pc, #204]	; (81c04 <SystemCoreClockUpdate+0x10c>)
   81b38:	4b30      	ldr	r3, [pc, #192]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b3a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b3c:	4b2d      	ldr	r3, [pc, #180]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81b3e:	6a1b      	ldr	r3, [r3, #32]
   81b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b44:	2b10      	cmp	r3, #16
   81b46:	d002      	beq.n	81b4e <SystemCoreClockUpdate+0x56>
   81b48:	2b20      	cmp	r3, #32
   81b4a:	d004      	beq.n	81b56 <SystemCoreClockUpdate+0x5e>
   81b4c:	e03a      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b4e:	4a2e      	ldr	r2, [pc, #184]	; (81c08 <SystemCoreClockUpdate+0x110>)
   81b50:	4b2a      	ldr	r3, [pc, #168]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b52:	601a      	str	r2, [r3, #0]
				break;
   81b54:	e036      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b56:	4a2a      	ldr	r2, [pc, #168]	; (81c00 <SystemCoreClockUpdate+0x108>)
   81b58:	4b28      	ldr	r3, [pc, #160]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b5a:	601a      	str	r2, [r3, #0]
				break;
   81b5c:	e032      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b5e:	4b25      	ldr	r3, [pc, #148]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81b60:	6a1b      	ldr	r3, [r3, #32]
   81b62:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b66:	d003      	beq.n	81b70 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b68:	4a25      	ldr	r2, [pc, #148]	; (81c00 <SystemCoreClockUpdate+0x108>)
   81b6a:	4b24      	ldr	r3, [pc, #144]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b6c:	601a      	str	r2, [r3, #0]
   81b6e:	e012      	b.n	81b96 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b70:	4a24      	ldr	r2, [pc, #144]	; (81c04 <SystemCoreClockUpdate+0x10c>)
   81b72:	4b22      	ldr	r3, [pc, #136]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b74:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b76:	4b1f      	ldr	r3, [pc, #124]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81b78:	6a1b      	ldr	r3, [r3, #32]
   81b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b7e:	2b10      	cmp	r3, #16
   81b80:	d002      	beq.n	81b88 <SystemCoreClockUpdate+0x90>
   81b82:	2b20      	cmp	r3, #32
   81b84:	d004      	beq.n	81b90 <SystemCoreClockUpdate+0x98>
   81b86:	e006      	b.n	81b96 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b88:	4a1f      	ldr	r2, [pc, #124]	; (81c08 <SystemCoreClockUpdate+0x110>)
   81b8a:	4b1c      	ldr	r3, [pc, #112]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b8c:	601a      	str	r2, [r3, #0]
				break;
   81b8e:	e002      	b.n	81b96 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b90:	4a1b      	ldr	r2, [pc, #108]	; (81c00 <SystemCoreClockUpdate+0x108>)
   81b92:	4b1a      	ldr	r3, [pc, #104]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81b94:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81b96:	4b17      	ldr	r3, [pc, #92]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b9a:	f003 0303 	and.w	r3, r3, #3
   81b9e:	2b02      	cmp	r3, #2
   81ba0:	d10d      	bne.n	81bbe <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ba2:	4b14      	ldr	r3, [pc, #80]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81ba4:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81ba6:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81ba8:	4b14      	ldr	r3, [pc, #80]	; (81bfc <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81baa:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81bae:	681a      	ldr	r2, [r3, #0]
   81bb0:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bb4:	b2c9      	uxtb	r1, r1
   81bb6:	fbb2 f2f1 	udiv	r2, r2, r1
   81bba:	601a      	str	r2, [r3, #0]
   81bbc:	e002      	b.n	81bc4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81bbe:	4a13      	ldr	r2, [pc, #76]	; (81c0c <SystemCoreClockUpdate+0x114>)
   81bc0:	4b0e      	ldr	r3, [pc, #56]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81bc2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81bc4:	4b0b      	ldr	r3, [pc, #44]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81bcc:	2b70      	cmp	r3, #112	; 0x70
   81bce:	d107      	bne.n	81be0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81bd0:	4b0a      	ldr	r3, [pc, #40]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81bd2:	681a      	ldr	r2, [r3, #0]
   81bd4:	490e      	ldr	r1, [pc, #56]	; (81c10 <SystemCoreClockUpdate+0x118>)
   81bd6:	fba1 0202 	umull	r0, r2, r1, r2
   81bda:	0852      	lsrs	r2, r2, #1
   81bdc:	601a      	str	r2, [r3, #0]
   81bde:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81be0:	4b04      	ldr	r3, [pc, #16]	; (81bf4 <SystemCoreClockUpdate+0xfc>)
   81be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81be4:	4b05      	ldr	r3, [pc, #20]	; (81bfc <SystemCoreClockUpdate+0x104>)
   81be6:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81bea:	681a      	ldr	r2, [r3, #0]
   81bec:	40ca      	lsrs	r2, r1
   81bee:	601a      	str	r2, [r3, #0]
   81bf0:	4770      	bx	lr
   81bf2:	bf00      	nop
   81bf4:	400e0600 	.word	0x400e0600
   81bf8:	400e1a10 	.word	0x400e1a10
   81bfc:	20070130 	.word	0x20070130
   81c00:	00b71b00 	.word	0x00b71b00
   81c04:	003d0900 	.word	0x003d0900
   81c08:	007a1200 	.word	0x007a1200
   81c0c:	0e4e1c00 	.word	0x0e4e1c00
   81c10:	aaaaaaab 	.word	0xaaaaaaab

00081c14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81c14:	4b09      	ldr	r3, [pc, #36]	; (81c3c <_sbrk+0x28>)
   81c16:	681b      	ldr	r3, [r3, #0]
   81c18:	b913      	cbnz	r3, 81c20 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81c1a:	4a09      	ldr	r2, [pc, #36]	; (81c40 <_sbrk+0x2c>)
   81c1c:	4b07      	ldr	r3, [pc, #28]	; (81c3c <_sbrk+0x28>)
   81c1e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81c20:	4b06      	ldr	r3, [pc, #24]	; (81c3c <_sbrk+0x28>)
   81c22:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81c24:	181a      	adds	r2, r3, r0
   81c26:	4907      	ldr	r1, [pc, #28]	; (81c44 <_sbrk+0x30>)
   81c28:	4291      	cmp	r1, r2
   81c2a:	db04      	blt.n	81c36 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81c2c:	4610      	mov	r0, r2
   81c2e:	4a03      	ldr	r2, [pc, #12]	; (81c3c <_sbrk+0x28>)
   81c30:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81c32:	4618      	mov	r0, r3
   81c34:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81c36:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81c3a:	4770      	bx	lr
   81c3c:	20070ac8 	.word	0x20070ac8
   81c40:	20072b90 	.word	0x20072b90
   81c44:	20087ffc 	.word	0x20087ffc

00081c48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81c48:	f04f 30ff 	mov.w	r0, #4294967295
   81c4c:	4770      	bx	lr
   81c4e:	bf00      	nop

00081c50 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c54:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c56:	2000      	movs	r0, #0
   81c58:	4770      	bx	lr
   81c5a:	bf00      	nop

00081c5c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81c5c:	2001      	movs	r0, #1
   81c5e:	4770      	bx	lr

00081c60 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81c60:	2000      	movs	r0, #0
   81c62:	4770      	bx	lr

00081c64 <__libc_init_array>:
   81c64:	b570      	push	{r4, r5, r6, lr}
   81c66:	4e0f      	ldr	r6, [pc, #60]	; (81ca4 <__libc_init_array+0x40>)
   81c68:	4d0f      	ldr	r5, [pc, #60]	; (81ca8 <__libc_init_array+0x44>)
   81c6a:	1b76      	subs	r6, r6, r5
   81c6c:	10b6      	asrs	r6, r6, #2
   81c6e:	d007      	beq.n	81c80 <__libc_init_array+0x1c>
   81c70:	3d04      	subs	r5, #4
   81c72:	2400      	movs	r4, #0
   81c74:	3401      	adds	r4, #1
   81c76:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c7a:	4798      	blx	r3
   81c7c:	42a6      	cmp	r6, r4
   81c7e:	d1f9      	bne.n	81c74 <__libc_init_array+0x10>
   81c80:	4e0a      	ldr	r6, [pc, #40]	; (81cac <__libc_init_array+0x48>)
   81c82:	4d0b      	ldr	r5, [pc, #44]	; (81cb0 <__libc_init_array+0x4c>)
   81c84:	f003 f91e 	bl	84ec4 <_init>
   81c88:	1b76      	subs	r6, r6, r5
   81c8a:	10b6      	asrs	r6, r6, #2
   81c8c:	d008      	beq.n	81ca0 <__libc_init_array+0x3c>
   81c8e:	3d04      	subs	r5, #4
   81c90:	2400      	movs	r4, #0
   81c92:	3401      	adds	r4, #1
   81c94:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c98:	4798      	blx	r3
   81c9a:	42a6      	cmp	r6, r4
   81c9c:	d1f9      	bne.n	81c92 <__libc_init_array+0x2e>
   81c9e:	bd70      	pop	{r4, r5, r6, pc}
   81ca0:	bd70      	pop	{r4, r5, r6, pc}
   81ca2:	bf00      	nop
   81ca4:	00084ed0 	.word	0x00084ed0
   81ca8:	00084ed0 	.word	0x00084ed0
   81cac:	00084ed8 	.word	0x00084ed8
   81cb0:	00084ed0 	.word	0x00084ed0

00081cb4 <iprintf>:
   81cb4:	b40f      	push	{r0, r1, r2, r3}
   81cb6:	b510      	push	{r4, lr}
   81cb8:	4b07      	ldr	r3, [pc, #28]	; (81cd8 <iprintf+0x24>)
   81cba:	b082      	sub	sp, #8
   81cbc:	ac04      	add	r4, sp, #16
   81cbe:	f854 2b04 	ldr.w	r2, [r4], #4
   81cc2:	6818      	ldr	r0, [r3, #0]
   81cc4:	4623      	mov	r3, r4
   81cc6:	6881      	ldr	r1, [r0, #8]
   81cc8:	9401      	str	r4, [sp, #4]
   81cca:	f000 f923 	bl	81f14 <_vfiprintf_r>
   81cce:	b002      	add	sp, #8
   81cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81cd4:	b004      	add	sp, #16
   81cd6:	4770      	bx	lr
   81cd8:	20070560 	.word	0x20070560

00081cdc <memset>:
   81cdc:	b4f0      	push	{r4, r5, r6, r7}
   81cde:	0784      	lsls	r4, r0, #30
   81ce0:	d043      	beq.n	81d6a <memset+0x8e>
   81ce2:	1e54      	subs	r4, r2, #1
   81ce4:	2a00      	cmp	r2, #0
   81ce6:	d03e      	beq.n	81d66 <memset+0x8a>
   81ce8:	b2cd      	uxtb	r5, r1
   81cea:	4603      	mov	r3, r0
   81cec:	e003      	b.n	81cf6 <memset+0x1a>
   81cee:	1e62      	subs	r2, r4, #1
   81cf0:	2c00      	cmp	r4, #0
   81cf2:	d038      	beq.n	81d66 <memset+0x8a>
   81cf4:	4614      	mov	r4, r2
   81cf6:	f803 5b01 	strb.w	r5, [r3], #1
   81cfa:	079a      	lsls	r2, r3, #30
   81cfc:	d1f7      	bne.n	81cee <memset+0x12>
   81cfe:	2c03      	cmp	r4, #3
   81d00:	d92a      	bls.n	81d58 <memset+0x7c>
   81d02:	b2cd      	uxtb	r5, r1
   81d04:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81d08:	2c0f      	cmp	r4, #15
   81d0a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81d0e:	d915      	bls.n	81d3c <memset+0x60>
   81d10:	f1a4 0710 	sub.w	r7, r4, #16
   81d14:	093f      	lsrs	r7, r7, #4
   81d16:	f103 0610 	add.w	r6, r3, #16
   81d1a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81d1e:	461a      	mov	r2, r3
   81d20:	6015      	str	r5, [r2, #0]
   81d22:	6055      	str	r5, [r2, #4]
   81d24:	6095      	str	r5, [r2, #8]
   81d26:	60d5      	str	r5, [r2, #12]
   81d28:	3210      	adds	r2, #16
   81d2a:	42b2      	cmp	r2, r6
   81d2c:	d1f8      	bne.n	81d20 <memset+0x44>
   81d2e:	f004 040f 	and.w	r4, r4, #15
   81d32:	3701      	adds	r7, #1
   81d34:	2c03      	cmp	r4, #3
   81d36:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81d3a:	d90d      	bls.n	81d58 <memset+0x7c>
   81d3c:	461e      	mov	r6, r3
   81d3e:	4622      	mov	r2, r4
   81d40:	3a04      	subs	r2, #4
   81d42:	2a03      	cmp	r2, #3
   81d44:	f846 5b04 	str.w	r5, [r6], #4
   81d48:	d8fa      	bhi.n	81d40 <memset+0x64>
   81d4a:	1f22      	subs	r2, r4, #4
   81d4c:	f022 0203 	bic.w	r2, r2, #3
   81d50:	3204      	adds	r2, #4
   81d52:	4413      	add	r3, r2
   81d54:	f004 0403 	and.w	r4, r4, #3
   81d58:	b12c      	cbz	r4, 81d66 <memset+0x8a>
   81d5a:	b2c9      	uxtb	r1, r1
   81d5c:	441c      	add	r4, r3
   81d5e:	f803 1b01 	strb.w	r1, [r3], #1
   81d62:	42a3      	cmp	r3, r4
   81d64:	d1fb      	bne.n	81d5e <memset+0x82>
   81d66:	bcf0      	pop	{r4, r5, r6, r7}
   81d68:	4770      	bx	lr
   81d6a:	4614      	mov	r4, r2
   81d6c:	4603      	mov	r3, r0
   81d6e:	e7c6      	b.n	81cfe <memset+0x22>

00081d70 <setbuf>:
   81d70:	2900      	cmp	r1, #0
   81d72:	bf0c      	ite	eq
   81d74:	2202      	moveq	r2, #2
   81d76:	2200      	movne	r2, #0
   81d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d7c:	f000 b80e 	b.w	81d9c <setvbuf>

00081d80 <setjmp>:
   81d80:	46ec      	mov	ip, sp
   81d82:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d86:	f04f 0000 	mov.w	r0, #0
   81d8a:	4770      	bx	lr

00081d8c <longjmp>:
   81d8c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d90:	46e5      	mov	sp, ip
   81d92:	0008      	movs	r0, r1
   81d94:	bf08      	it	eq
   81d96:	2001      	moveq	r0, #1
   81d98:	4770      	bx	lr
   81d9a:	bf00      	nop

00081d9c <setvbuf>:
   81d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81da0:	4d3c      	ldr	r5, [pc, #240]	; (81e94 <setvbuf+0xf8>)
   81da2:	4604      	mov	r4, r0
   81da4:	682d      	ldr	r5, [r5, #0]
   81da6:	4688      	mov	r8, r1
   81da8:	4616      	mov	r6, r2
   81daa:	461f      	mov	r7, r3
   81dac:	b115      	cbz	r5, 81db4 <setvbuf+0x18>
   81dae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81db0:	2b00      	cmp	r3, #0
   81db2:	d04f      	beq.n	81e54 <setvbuf+0xb8>
   81db4:	2e02      	cmp	r6, #2
   81db6:	d830      	bhi.n	81e1a <setvbuf+0x7e>
   81db8:	2f00      	cmp	r7, #0
   81dba:	db2e      	blt.n	81e1a <setvbuf+0x7e>
   81dbc:	4628      	mov	r0, r5
   81dbe:	4621      	mov	r1, r4
   81dc0:	f001 f87a 	bl	82eb8 <_fflush_r>
   81dc4:	89a3      	ldrh	r3, [r4, #12]
   81dc6:	2200      	movs	r2, #0
   81dc8:	6062      	str	r2, [r4, #4]
   81dca:	61a2      	str	r2, [r4, #24]
   81dcc:	061a      	lsls	r2, r3, #24
   81dce:	d428      	bmi.n	81e22 <setvbuf+0x86>
   81dd0:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81dd4:	b29b      	uxth	r3, r3
   81dd6:	2e02      	cmp	r6, #2
   81dd8:	81a3      	strh	r3, [r4, #12]
   81dda:	d02d      	beq.n	81e38 <setvbuf+0x9c>
   81ddc:	f1b8 0f00 	cmp.w	r8, #0
   81de0:	d03c      	beq.n	81e5c <setvbuf+0xc0>
   81de2:	2e01      	cmp	r6, #1
   81de4:	d013      	beq.n	81e0e <setvbuf+0x72>
   81de6:	b29b      	uxth	r3, r3
   81de8:	f003 0008 	and.w	r0, r3, #8
   81dec:	4a2a      	ldr	r2, [pc, #168]	; (81e98 <setvbuf+0xfc>)
   81dee:	b280      	uxth	r0, r0
   81df0:	63ea      	str	r2, [r5, #60]	; 0x3c
   81df2:	f8c4 8000 	str.w	r8, [r4]
   81df6:	f8c4 8010 	str.w	r8, [r4, #16]
   81dfa:	6167      	str	r7, [r4, #20]
   81dfc:	b178      	cbz	r0, 81e1e <setvbuf+0x82>
   81dfe:	f013 0f03 	tst.w	r3, #3
   81e02:	bf18      	it	ne
   81e04:	2700      	movne	r7, #0
   81e06:	60a7      	str	r7, [r4, #8]
   81e08:	2000      	movs	r0, #0
   81e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e0e:	f043 0301 	orr.w	r3, r3, #1
   81e12:	427a      	negs	r2, r7
   81e14:	81a3      	strh	r3, [r4, #12]
   81e16:	61a2      	str	r2, [r4, #24]
   81e18:	e7e5      	b.n	81de6 <setvbuf+0x4a>
   81e1a:	f04f 30ff 	mov.w	r0, #4294967295
   81e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e22:	4628      	mov	r0, r5
   81e24:	6921      	ldr	r1, [r4, #16]
   81e26:	f001 f9a7 	bl	83178 <_free_r>
   81e2a:	89a3      	ldrh	r3, [r4, #12]
   81e2c:	2e02      	cmp	r6, #2
   81e2e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81e32:	b29b      	uxth	r3, r3
   81e34:	81a3      	strh	r3, [r4, #12]
   81e36:	d1d1      	bne.n	81ddc <setvbuf+0x40>
   81e38:	2000      	movs	r0, #0
   81e3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81e3e:	f043 0302 	orr.w	r3, r3, #2
   81e42:	2500      	movs	r5, #0
   81e44:	2101      	movs	r1, #1
   81e46:	81a3      	strh	r3, [r4, #12]
   81e48:	60a5      	str	r5, [r4, #8]
   81e4a:	6022      	str	r2, [r4, #0]
   81e4c:	6122      	str	r2, [r4, #16]
   81e4e:	6161      	str	r1, [r4, #20]
   81e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e54:	4628      	mov	r0, r5
   81e56:	f001 f84b 	bl	82ef0 <__sinit>
   81e5a:	e7ab      	b.n	81db4 <setvbuf+0x18>
   81e5c:	2f00      	cmp	r7, #0
   81e5e:	bf08      	it	eq
   81e60:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81e64:	4638      	mov	r0, r7
   81e66:	f001 fc7d 	bl	83764 <malloc>
   81e6a:	4680      	mov	r8, r0
   81e6c:	b128      	cbz	r0, 81e7a <setvbuf+0xde>
   81e6e:	89a3      	ldrh	r3, [r4, #12]
   81e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81e74:	b29b      	uxth	r3, r3
   81e76:	81a3      	strh	r3, [r4, #12]
   81e78:	e7b3      	b.n	81de2 <setvbuf+0x46>
   81e7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81e7e:	f001 fc71 	bl	83764 <malloc>
   81e82:	4680      	mov	r8, r0
   81e84:	b918      	cbnz	r0, 81e8e <setvbuf+0xf2>
   81e86:	89a3      	ldrh	r3, [r4, #12]
   81e88:	f04f 30ff 	mov.w	r0, #4294967295
   81e8c:	e7d5      	b.n	81e3a <setvbuf+0x9e>
   81e8e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81e92:	e7ec      	b.n	81e6e <setvbuf+0xd2>
   81e94:	20070560 	.word	0x20070560
   81e98:	00082ee5 	.word	0x00082ee5

00081e9c <__sprint_r.part.0>:
   81e9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ea2:	049c      	lsls	r4, r3, #18
   81ea4:	460e      	mov	r6, r1
   81ea6:	4680      	mov	r8, r0
   81ea8:	4691      	mov	r9, r2
   81eaa:	d52a      	bpl.n	81f02 <__sprint_r.part.0+0x66>
   81eac:	6893      	ldr	r3, [r2, #8]
   81eae:	6812      	ldr	r2, [r2, #0]
   81eb0:	f102 0a08 	add.w	sl, r2, #8
   81eb4:	b31b      	cbz	r3, 81efe <__sprint_r.part.0+0x62>
   81eb6:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81eba:	08bf      	lsrs	r7, r7, #2
   81ebc:	d017      	beq.n	81eee <__sprint_r.part.0+0x52>
   81ebe:	3d04      	subs	r5, #4
   81ec0:	2400      	movs	r4, #0
   81ec2:	e001      	b.n	81ec8 <__sprint_r.part.0+0x2c>
   81ec4:	42a7      	cmp	r7, r4
   81ec6:	d010      	beq.n	81eea <__sprint_r.part.0+0x4e>
   81ec8:	4640      	mov	r0, r8
   81eca:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81ece:	4632      	mov	r2, r6
   81ed0:	f001 f8a4 	bl	8301c <_fputwc_r>
   81ed4:	1c43      	adds	r3, r0, #1
   81ed6:	f104 0401 	add.w	r4, r4, #1
   81eda:	d1f3      	bne.n	81ec4 <__sprint_r.part.0+0x28>
   81edc:	2300      	movs	r3, #0
   81ede:	f8c9 3008 	str.w	r3, [r9, #8]
   81ee2:	f8c9 3004 	str.w	r3, [r9, #4]
   81ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81eea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81eee:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81ef2:	f8c9 3008 	str.w	r3, [r9, #8]
   81ef6:	f10a 0a08 	add.w	sl, sl, #8
   81efa:	2b00      	cmp	r3, #0
   81efc:	d1db      	bne.n	81eb6 <__sprint_r.part.0+0x1a>
   81efe:	2000      	movs	r0, #0
   81f00:	e7ec      	b.n	81edc <__sprint_r.part.0+0x40>
   81f02:	f001 fa05 	bl	83310 <__sfvwrite_r>
   81f06:	2300      	movs	r3, #0
   81f08:	f8c9 3008 	str.w	r3, [r9, #8]
   81f0c:	f8c9 3004 	str.w	r3, [r9, #4]
   81f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081f14 <_vfiprintf_r>:
   81f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f18:	b0b1      	sub	sp, #196	; 0xc4
   81f1a:	461c      	mov	r4, r3
   81f1c:	9102      	str	r1, [sp, #8]
   81f1e:	4690      	mov	r8, r2
   81f20:	9308      	str	r3, [sp, #32]
   81f22:	9006      	str	r0, [sp, #24]
   81f24:	b118      	cbz	r0, 81f2e <_vfiprintf_r+0x1a>
   81f26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f28:	2b00      	cmp	r3, #0
   81f2a:	f000 80e8 	beq.w	820fe <_vfiprintf_r+0x1ea>
   81f2e:	9d02      	ldr	r5, [sp, #8]
   81f30:	89ab      	ldrh	r3, [r5, #12]
   81f32:	b29a      	uxth	r2, r3
   81f34:	0490      	lsls	r0, r2, #18
   81f36:	d407      	bmi.n	81f48 <_vfiprintf_r+0x34>
   81f38:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81f3e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81f42:	81ab      	strh	r3, [r5, #12]
   81f44:	b29a      	uxth	r2, r3
   81f46:	6669      	str	r1, [r5, #100]	; 0x64
   81f48:	0711      	lsls	r1, r2, #28
   81f4a:	f140 80b7 	bpl.w	820bc <_vfiprintf_r+0x1a8>
   81f4e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81f52:	f8db 3010 	ldr.w	r3, [fp, #16]
   81f56:	2b00      	cmp	r3, #0
   81f58:	f000 80b0 	beq.w	820bc <_vfiprintf_r+0x1a8>
   81f5c:	f002 021a 	and.w	r2, r2, #26
   81f60:	2a0a      	cmp	r2, #10
   81f62:	f000 80b7 	beq.w	820d4 <_vfiprintf_r+0x1c0>
   81f66:	2300      	movs	r3, #0
   81f68:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81f6c:	930a      	str	r3, [sp, #40]	; 0x28
   81f6e:	9315      	str	r3, [sp, #84]	; 0x54
   81f70:	9314      	str	r3, [sp, #80]	; 0x50
   81f72:	9309      	str	r3, [sp, #36]	; 0x24
   81f74:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81f78:	464e      	mov	r6, r9
   81f7a:	f898 3000 	ldrb.w	r3, [r8]
   81f7e:	2b00      	cmp	r3, #0
   81f80:	f000 84c8 	beq.w	82914 <_vfiprintf_r+0xa00>
   81f84:	2b25      	cmp	r3, #37	; 0x25
   81f86:	f000 84c5 	beq.w	82914 <_vfiprintf_r+0xa00>
   81f8a:	f108 0201 	add.w	r2, r8, #1
   81f8e:	e001      	b.n	81f94 <_vfiprintf_r+0x80>
   81f90:	2b25      	cmp	r3, #37	; 0x25
   81f92:	d004      	beq.n	81f9e <_vfiprintf_r+0x8a>
   81f94:	7813      	ldrb	r3, [r2, #0]
   81f96:	4614      	mov	r4, r2
   81f98:	3201      	adds	r2, #1
   81f9a:	2b00      	cmp	r3, #0
   81f9c:	d1f8      	bne.n	81f90 <_vfiprintf_r+0x7c>
   81f9e:	ebc8 0504 	rsb	r5, r8, r4
   81fa2:	b195      	cbz	r5, 81fca <_vfiprintf_r+0xb6>
   81fa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fa8:	3301      	adds	r3, #1
   81faa:	442a      	add	r2, r5
   81fac:	2b07      	cmp	r3, #7
   81fae:	f8c6 8000 	str.w	r8, [r6]
   81fb2:	6075      	str	r5, [r6, #4]
   81fb4:	9215      	str	r2, [sp, #84]	; 0x54
   81fb6:	9314      	str	r3, [sp, #80]	; 0x50
   81fb8:	dd7b      	ble.n	820b2 <_vfiprintf_r+0x19e>
   81fba:	2a00      	cmp	r2, #0
   81fbc:	f040 84d5 	bne.w	8296a <_vfiprintf_r+0xa56>
   81fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   81fc2:	9214      	str	r2, [sp, #80]	; 0x50
   81fc4:	4428      	add	r0, r5
   81fc6:	464e      	mov	r6, r9
   81fc8:	9009      	str	r0, [sp, #36]	; 0x24
   81fca:	7823      	ldrb	r3, [r4, #0]
   81fcc:	2b00      	cmp	r3, #0
   81fce:	f000 83ed 	beq.w	827ac <_vfiprintf_r+0x898>
   81fd2:	2100      	movs	r1, #0
   81fd4:	f04f 0200 	mov.w	r2, #0
   81fd8:	f04f 3cff 	mov.w	ip, #4294967295
   81fdc:	7863      	ldrb	r3, [r4, #1]
   81fde:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81fe2:	9104      	str	r1, [sp, #16]
   81fe4:	468a      	mov	sl, r1
   81fe6:	f104 0801 	add.w	r8, r4, #1
   81fea:	4608      	mov	r0, r1
   81fec:	4665      	mov	r5, ip
   81fee:	f108 0801 	add.w	r8, r8, #1
   81ff2:	f1a3 0220 	sub.w	r2, r3, #32
   81ff6:	2a58      	cmp	r2, #88	; 0x58
   81ff8:	f200 82d9 	bhi.w	825ae <_vfiprintf_r+0x69a>
   81ffc:	e8df f012 	tbh	[pc, r2, lsl #1]
   82000:	02d702cb 	.word	0x02d702cb
   82004:	02d202d7 	.word	0x02d202d7
   82008:	02d702d7 	.word	0x02d702d7
   8200c:	02d702d7 	.word	0x02d702d7
   82010:	02d702d7 	.word	0x02d702d7
   82014:	028f0282 	.word	0x028f0282
   82018:	008402d7 	.word	0x008402d7
   8201c:	02d70293 	.word	0x02d70293
   82020:	0196012b 	.word	0x0196012b
   82024:	01960196 	.word	0x01960196
   82028:	01960196 	.word	0x01960196
   8202c:	01960196 	.word	0x01960196
   82030:	01960196 	.word	0x01960196
   82034:	02d702d7 	.word	0x02d702d7
   82038:	02d702d7 	.word	0x02d702d7
   8203c:	02d702d7 	.word	0x02d702d7
   82040:	02d702d7 	.word	0x02d702d7
   82044:	02d702d7 	.word	0x02d702d7
   82048:	02d70130 	.word	0x02d70130
   8204c:	02d702d7 	.word	0x02d702d7
   82050:	02d702d7 	.word	0x02d702d7
   82054:	02d702d7 	.word	0x02d702d7
   82058:	02d702d7 	.word	0x02d702d7
   8205c:	017b02d7 	.word	0x017b02d7
   82060:	02d702d7 	.word	0x02d702d7
   82064:	02d702d7 	.word	0x02d702d7
   82068:	01a402d7 	.word	0x01a402d7
   8206c:	02d702d7 	.word	0x02d702d7
   82070:	02d701bf 	.word	0x02d701bf
   82074:	02d702d7 	.word	0x02d702d7
   82078:	02d702d7 	.word	0x02d702d7
   8207c:	02d702d7 	.word	0x02d702d7
   82080:	02d702d7 	.word	0x02d702d7
   82084:	01e402d7 	.word	0x01e402d7
   82088:	02d701fa 	.word	0x02d701fa
   8208c:	02d702d7 	.word	0x02d702d7
   82090:	01fa0216 	.word	0x01fa0216
   82094:	02d702d7 	.word	0x02d702d7
   82098:	02d7021b 	.word	0x02d7021b
   8209c:	00890228 	.word	0x00890228
   820a0:	027d0266 	.word	0x027d0266
   820a4:	023a02d7 	.word	0x023a02d7
   820a8:	011902d7 	.word	0x011902d7
   820ac:	02d702d7 	.word	0x02d702d7
   820b0:	02af      	.short	0x02af
   820b2:	3608      	adds	r6, #8
   820b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   820b6:	4428      	add	r0, r5
   820b8:	9009      	str	r0, [sp, #36]	; 0x24
   820ba:	e786      	b.n	81fca <_vfiprintf_r+0xb6>
   820bc:	9806      	ldr	r0, [sp, #24]
   820be:	9902      	ldr	r1, [sp, #8]
   820c0:	f000 fde4 	bl	82c8c <__swsetup_r>
   820c4:	b9b0      	cbnz	r0, 820f4 <_vfiprintf_r+0x1e0>
   820c6:	9d02      	ldr	r5, [sp, #8]
   820c8:	89aa      	ldrh	r2, [r5, #12]
   820ca:	f002 021a 	and.w	r2, r2, #26
   820ce:	2a0a      	cmp	r2, #10
   820d0:	f47f af49 	bne.w	81f66 <_vfiprintf_r+0x52>
   820d4:	f8dd b008 	ldr.w	fp, [sp, #8]
   820d8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   820dc:	2b00      	cmp	r3, #0
   820de:	f6ff af42 	blt.w	81f66 <_vfiprintf_r+0x52>
   820e2:	9806      	ldr	r0, [sp, #24]
   820e4:	4659      	mov	r1, fp
   820e6:	4642      	mov	r2, r8
   820e8:	4623      	mov	r3, r4
   820ea:	f000 fd3d 	bl	82b68 <__sbprintf>
   820ee:	b031      	add	sp, #196	; 0xc4
   820f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820f4:	f04f 30ff 	mov.w	r0, #4294967295
   820f8:	b031      	add	sp, #196	; 0xc4
   820fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820fe:	f000 fef7 	bl	82ef0 <__sinit>
   82102:	e714      	b.n	81f2e <_vfiprintf_r+0x1a>
   82104:	4240      	negs	r0, r0
   82106:	9308      	str	r3, [sp, #32]
   82108:	f04a 0a04 	orr.w	sl, sl, #4
   8210c:	f898 3000 	ldrb.w	r3, [r8]
   82110:	e76d      	b.n	81fee <_vfiprintf_r+0xda>
   82112:	f01a 0320 	ands.w	r3, sl, #32
   82116:	9004      	str	r0, [sp, #16]
   82118:	46ac      	mov	ip, r5
   8211a:	f000 80f4 	beq.w	82306 <_vfiprintf_r+0x3f2>
   8211e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82122:	f10b 0307 	add.w	r3, fp, #7
   82126:	f023 0307 	bic.w	r3, r3, #7
   8212a:	f103 0408 	add.w	r4, r3, #8
   8212e:	9408      	str	r4, [sp, #32]
   82130:	e9d3 4500 	ldrd	r4, r5, [r3]
   82134:	2300      	movs	r3, #0
   82136:	f04f 0000 	mov.w	r0, #0
   8213a:	2100      	movs	r1, #0
   8213c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82140:	f8cd c014 	str.w	ip, [sp, #20]
   82144:	9107      	str	r1, [sp, #28]
   82146:	f1bc 0f00 	cmp.w	ip, #0
   8214a:	bfa8      	it	ge
   8214c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82150:	ea54 0205 	orrs.w	r2, r4, r5
   82154:	f040 80ad 	bne.w	822b2 <_vfiprintf_r+0x39e>
   82158:	f1bc 0f00 	cmp.w	ip, #0
   8215c:	f040 80a9 	bne.w	822b2 <_vfiprintf_r+0x39e>
   82160:	2b00      	cmp	r3, #0
   82162:	f040 83c0 	bne.w	828e6 <_vfiprintf_r+0x9d2>
   82166:	f01a 0f01 	tst.w	sl, #1
   8216a:	f000 83bc 	beq.w	828e6 <_vfiprintf_r+0x9d2>
   8216e:	2330      	movs	r3, #48	; 0x30
   82170:	af30      	add	r7, sp, #192	; 0xc0
   82172:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82176:	ebc7 0409 	rsb	r4, r7, r9
   8217a:	9405      	str	r4, [sp, #20]
   8217c:	f8dd b014 	ldr.w	fp, [sp, #20]
   82180:	9c07      	ldr	r4, [sp, #28]
   82182:	45e3      	cmp	fp, ip
   82184:	bfb8      	it	lt
   82186:	46e3      	movlt	fp, ip
   82188:	f8cd b00c 	str.w	fp, [sp, #12]
   8218c:	b11c      	cbz	r4, 82196 <_vfiprintf_r+0x282>
   8218e:	f10b 0b01 	add.w	fp, fp, #1
   82192:	f8cd b00c 	str.w	fp, [sp, #12]
   82196:	f01a 0502 	ands.w	r5, sl, #2
   8219a:	9507      	str	r5, [sp, #28]
   8219c:	d005      	beq.n	821aa <_vfiprintf_r+0x296>
   8219e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   821a2:	f10b 0b02 	add.w	fp, fp, #2
   821a6:	f8cd b00c 	str.w	fp, [sp, #12]
   821aa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   821ae:	930b      	str	r3, [sp, #44]	; 0x2c
   821b0:	f040 821b 	bne.w	825ea <_vfiprintf_r+0x6d6>
   821b4:	9d04      	ldr	r5, [sp, #16]
   821b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   821ba:	ebcb 0405 	rsb	r4, fp, r5
   821be:	2c00      	cmp	r4, #0
   821c0:	f340 8213 	ble.w	825ea <_vfiprintf_r+0x6d6>
   821c4:	2c10      	cmp	r4, #16
   821c6:	f340 8489 	ble.w	82adc <_vfiprintf_r+0xbc8>
   821ca:	4dbe      	ldr	r5, [pc, #760]	; (824c4 <_vfiprintf_r+0x5b0>)
   821cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821ce:	462b      	mov	r3, r5
   821d0:	9814      	ldr	r0, [sp, #80]	; 0x50
   821d2:	4625      	mov	r5, r4
   821d4:	f04f 0b10 	mov.w	fp, #16
   821d8:	4664      	mov	r4, ip
   821da:	46b4      	mov	ip, r6
   821dc:	461e      	mov	r6, r3
   821de:	e006      	b.n	821ee <_vfiprintf_r+0x2da>
   821e0:	1c83      	adds	r3, r0, #2
   821e2:	f10c 0c08 	add.w	ip, ip, #8
   821e6:	4608      	mov	r0, r1
   821e8:	3d10      	subs	r5, #16
   821ea:	2d10      	cmp	r5, #16
   821ec:	dd11      	ble.n	82212 <_vfiprintf_r+0x2fe>
   821ee:	1c41      	adds	r1, r0, #1
   821f0:	3210      	adds	r2, #16
   821f2:	2907      	cmp	r1, #7
   821f4:	9215      	str	r2, [sp, #84]	; 0x54
   821f6:	e88c 0840 	stmia.w	ip, {r6, fp}
   821fa:	9114      	str	r1, [sp, #80]	; 0x50
   821fc:	ddf0      	ble.n	821e0 <_vfiprintf_r+0x2cc>
   821fe:	2a00      	cmp	r2, #0
   82200:	f040 81e6 	bne.w	825d0 <_vfiprintf_r+0x6bc>
   82204:	3d10      	subs	r5, #16
   82206:	2d10      	cmp	r5, #16
   82208:	f04f 0301 	mov.w	r3, #1
   8220c:	4610      	mov	r0, r2
   8220e:	46cc      	mov	ip, r9
   82210:	dced      	bgt.n	821ee <_vfiprintf_r+0x2da>
   82212:	4631      	mov	r1, r6
   82214:	4666      	mov	r6, ip
   82216:	46a4      	mov	ip, r4
   82218:	462c      	mov	r4, r5
   8221a:	460d      	mov	r5, r1
   8221c:	4422      	add	r2, r4
   8221e:	2b07      	cmp	r3, #7
   82220:	9215      	str	r2, [sp, #84]	; 0x54
   82222:	6035      	str	r5, [r6, #0]
   82224:	6074      	str	r4, [r6, #4]
   82226:	9314      	str	r3, [sp, #80]	; 0x50
   82228:	f300 836d 	bgt.w	82906 <_vfiprintf_r+0x9f2>
   8222c:	3608      	adds	r6, #8
   8222e:	1c59      	adds	r1, r3, #1
   82230:	e1de      	b.n	825f0 <_vfiprintf_r+0x6dc>
   82232:	f01a 0f20 	tst.w	sl, #32
   82236:	9004      	str	r0, [sp, #16]
   82238:	46ac      	mov	ip, r5
   8223a:	f000 808d 	beq.w	82358 <_vfiprintf_r+0x444>
   8223e:	9d08      	ldr	r5, [sp, #32]
   82240:	1deb      	adds	r3, r5, #7
   82242:	f023 0307 	bic.w	r3, r3, #7
   82246:	f103 0b08 	add.w	fp, r3, #8
   8224a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8224e:	f8cd b020 	str.w	fp, [sp, #32]
   82252:	2301      	movs	r3, #1
   82254:	e76f      	b.n	82136 <_vfiprintf_r+0x222>
   82256:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8225a:	f898 3000 	ldrb.w	r3, [r8]
   8225e:	e6c6      	b.n	81fee <_vfiprintf_r+0xda>
   82260:	f04a 0a10 	orr.w	sl, sl, #16
   82264:	f01a 0f20 	tst.w	sl, #32
   82268:	9004      	str	r0, [sp, #16]
   8226a:	46ac      	mov	ip, r5
   8226c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82270:	f000 80c8 	beq.w	82404 <_vfiprintf_r+0x4f0>
   82274:	9c08      	ldr	r4, [sp, #32]
   82276:	1de1      	adds	r1, r4, #7
   82278:	f021 0107 	bic.w	r1, r1, #7
   8227c:	e9d1 2300 	ldrd	r2, r3, [r1]
   82280:	3108      	adds	r1, #8
   82282:	9108      	str	r1, [sp, #32]
   82284:	4614      	mov	r4, r2
   82286:	461d      	mov	r5, r3
   82288:	2a00      	cmp	r2, #0
   8228a:	f173 0b00 	sbcs.w	fp, r3, #0
   8228e:	f2c0 83ce 	blt.w	82a2e <_vfiprintf_r+0xb1a>
   82292:	f1bc 0f00 	cmp.w	ip, #0
   82296:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8229a:	bfa8      	it	ge
   8229c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   822a0:	ea54 0205 	orrs.w	r2, r4, r5
   822a4:	9007      	str	r0, [sp, #28]
   822a6:	f8cd c014 	str.w	ip, [sp, #20]
   822aa:	f04f 0301 	mov.w	r3, #1
   822ae:	f43f af53 	beq.w	82158 <_vfiprintf_r+0x244>
   822b2:	2b01      	cmp	r3, #1
   822b4:	f000 8319 	beq.w	828ea <_vfiprintf_r+0x9d6>
   822b8:	2b02      	cmp	r3, #2
   822ba:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   822be:	f040 824c 	bne.w	8275a <_vfiprintf_r+0x846>
   822c2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   822c6:	4619      	mov	r1, r3
   822c8:	f004 000f 	and.w	r0, r4, #15
   822cc:	0922      	lsrs	r2, r4, #4
   822ce:	f81b 0000 	ldrb.w	r0, [fp, r0]
   822d2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   822d6:	092b      	lsrs	r3, r5, #4
   822d8:	7008      	strb	r0, [r1, #0]
   822da:	ea52 0003 	orrs.w	r0, r2, r3
   822de:	460f      	mov	r7, r1
   822e0:	4614      	mov	r4, r2
   822e2:	461d      	mov	r5, r3
   822e4:	f101 31ff 	add.w	r1, r1, #4294967295
   822e8:	d1ee      	bne.n	822c8 <_vfiprintf_r+0x3b4>
   822ea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   822ee:	ebc7 0309 	rsb	r3, r7, r9
   822f2:	9305      	str	r3, [sp, #20]
   822f4:	e742      	b.n	8217c <_vfiprintf_r+0x268>
   822f6:	f04a 0a10 	orr.w	sl, sl, #16
   822fa:	f01a 0320 	ands.w	r3, sl, #32
   822fe:	9004      	str	r0, [sp, #16]
   82300:	46ac      	mov	ip, r5
   82302:	f47f af0c 	bne.w	8211e <_vfiprintf_r+0x20a>
   82306:	f01a 0210 	ands.w	r2, sl, #16
   8230a:	f040 8311 	bne.w	82930 <_vfiprintf_r+0xa1c>
   8230e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82312:	f000 830d 	beq.w	82930 <_vfiprintf_r+0xa1c>
   82316:	f8dd b020 	ldr.w	fp, [sp, #32]
   8231a:	4613      	mov	r3, r2
   8231c:	f8bb 4000 	ldrh.w	r4, [fp]
   82320:	f10b 0b04 	add.w	fp, fp, #4
   82324:	2500      	movs	r5, #0
   82326:	f8cd b020 	str.w	fp, [sp, #32]
   8232a:	e704      	b.n	82136 <_vfiprintf_r+0x222>
   8232c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82330:	2000      	movs	r0, #0
   82332:	f818 3b01 	ldrb.w	r3, [r8], #1
   82336:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8233a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8233e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82342:	2a09      	cmp	r2, #9
   82344:	d9f5      	bls.n	82332 <_vfiprintf_r+0x41e>
   82346:	e654      	b.n	81ff2 <_vfiprintf_r+0xde>
   82348:	f04a 0a10 	orr.w	sl, sl, #16
   8234c:	f01a 0f20 	tst.w	sl, #32
   82350:	9004      	str	r0, [sp, #16]
   82352:	46ac      	mov	ip, r5
   82354:	f47f af73 	bne.w	8223e <_vfiprintf_r+0x32a>
   82358:	f01a 0f10 	tst.w	sl, #16
   8235c:	f040 82ef 	bne.w	8293e <_vfiprintf_r+0xa2a>
   82360:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82364:	f000 82eb 	beq.w	8293e <_vfiprintf_r+0xa2a>
   82368:	f8dd b020 	ldr.w	fp, [sp, #32]
   8236c:	2500      	movs	r5, #0
   8236e:	f8bb 4000 	ldrh.w	r4, [fp]
   82372:	f10b 0b04 	add.w	fp, fp, #4
   82376:	2301      	movs	r3, #1
   82378:	f8cd b020 	str.w	fp, [sp, #32]
   8237c:	e6db      	b.n	82136 <_vfiprintf_r+0x222>
   8237e:	46ac      	mov	ip, r5
   82380:	4d51      	ldr	r5, [pc, #324]	; (824c8 <_vfiprintf_r+0x5b4>)
   82382:	f01a 0f20 	tst.w	sl, #32
   82386:	9004      	str	r0, [sp, #16]
   82388:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8238c:	950a      	str	r5, [sp, #40]	; 0x28
   8238e:	f000 80f0 	beq.w	82572 <_vfiprintf_r+0x65e>
   82392:	9d08      	ldr	r5, [sp, #32]
   82394:	1dea      	adds	r2, r5, #7
   82396:	f022 0207 	bic.w	r2, r2, #7
   8239a:	f102 0b08 	add.w	fp, r2, #8
   8239e:	f8cd b020 	str.w	fp, [sp, #32]
   823a2:	e9d2 4500 	ldrd	r4, r5, [r2]
   823a6:	f01a 0f01 	tst.w	sl, #1
   823aa:	f000 82aa 	beq.w	82902 <_vfiprintf_r+0x9ee>
   823ae:	ea54 0b05 	orrs.w	fp, r4, r5
   823b2:	f000 82a6 	beq.w	82902 <_vfiprintf_r+0x9ee>
   823b6:	2230      	movs	r2, #48	; 0x30
   823b8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   823bc:	f04a 0a02 	orr.w	sl, sl, #2
   823c0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   823c4:	2302      	movs	r3, #2
   823c6:	e6b6      	b.n	82136 <_vfiprintf_r+0x222>
   823c8:	9b08      	ldr	r3, [sp, #32]
   823ca:	f8dd b020 	ldr.w	fp, [sp, #32]
   823ce:	681b      	ldr	r3, [r3, #0]
   823d0:	2401      	movs	r4, #1
   823d2:	f04f 0500 	mov.w	r5, #0
   823d6:	f10b 0b04 	add.w	fp, fp, #4
   823da:	9004      	str	r0, [sp, #16]
   823dc:	9403      	str	r4, [sp, #12]
   823de:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   823e2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   823e6:	f8cd b020 	str.w	fp, [sp, #32]
   823ea:	9405      	str	r4, [sp, #20]
   823ec:	af16      	add	r7, sp, #88	; 0x58
   823ee:	f04f 0c00 	mov.w	ip, #0
   823f2:	e6d0      	b.n	82196 <_vfiprintf_r+0x282>
   823f4:	f01a 0f20 	tst.w	sl, #32
   823f8:	9004      	str	r0, [sp, #16]
   823fa:	46ac      	mov	ip, r5
   823fc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82400:	f47f af38 	bne.w	82274 <_vfiprintf_r+0x360>
   82404:	f01a 0f10 	tst.w	sl, #16
   82408:	f040 82a7 	bne.w	8295a <_vfiprintf_r+0xa46>
   8240c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82410:	f000 82a3 	beq.w	8295a <_vfiprintf_r+0xa46>
   82414:	f8dd b020 	ldr.w	fp, [sp, #32]
   82418:	f9bb 4000 	ldrsh.w	r4, [fp]
   8241c:	f10b 0b04 	add.w	fp, fp, #4
   82420:	17e5      	asrs	r5, r4, #31
   82422:	4622      	mov	r2, r4
   82424:	462b      	mov	r3, r5
   82426:	f8cd b020 	str.w	fp, [sp, #32]
   8242a:	e72d      	b.n	82288 <_vfiprintf_r+0x374>
   8242c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82430:	f898 3000 	ldrb.w	r3, [r8]
   82434:	e5db      	b.n	81fee <_vfiprintf_r+0xda>
   82436:	f898 3000 	ldrb.w	r3, [r8]
   8243a:	4642      	mov	r2, r8
   8243c:	2b6c      	cmp	r3, #108	; 0x6c
   8243e:	bf03      	ittte	eq
   82440:	f108 0801 	addeq.w	r8, r8, #1
   82444:	f04a 0a20 	orreq.w	sl, sl, #32
   82448:	7853      	ldrbeq	r3, [r2, #1]
   8244a:	f04a 0a10 	orrne.w	sl, sl, #16
   8244e:	e5ce      	b.n	81fee <_vfiprintf_r+0xda>
   82450:	f01a 0f20 	tst.w	sl, #32
   82454:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82458:	f000 82f7 	beq.w	82a4a <_vfiprintf_r+0xb36>
   8245c:	9c08      	ldr	r4, [sp, #32]
   8245e:	6821      	ldr	r1, [r4, #0]
   82460:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82462:	17e5      	asrs	r5, r4, #31
   82464:	462b      	mov	r3, r5
   82466:	9d08      	ldr	r5, [sp, #32]
   82468:	4622      	mov	r2, r4
   8246a:	3504      	adds	r5, #4
   8246c:	9508      	str	r5, [sp, #32]
   8246e:	e9c1 2300 	strd	r2, r3, [r1]
   82472:	e582      	b.n	81f7a <_vfiprintf_r+0x66>
   82474:	9c08      	ldr	r4, [sp, #32]
   82476:	46ac      	mov	ip, r5
   82478:	6827      	ldr	r7, [r4, #0]
   8247a:	f04f 0500 	mov.w	r5, #0
   8247e:	9004      	str	r0, [sp, #16]
   82480:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82484:	3404      	adds	r4, #4
   82486:	2f00      	cmp	r7, #0
   82488:	f000 8332 	beq.w	82af0 <_vfiprintf_r+0xbdc>
   8248c:	f1bc 0f00 	cmp.w	ip, #0
   82490:	4638      	mov	r0, r7
   82492:	f2c0 8307 	blt.w	82aa4 <_vfiprintf_r+0xb90>
   82496:	4662      	mov	r2, ip
   82498:	2100      	movs	r1, #0
   8249a:	f8cd c004 	str.w	ip, [sp, #4]
   8249e:	f001 fc05 	bl	83cac <memchr>
   824a2:	f8dd c004 	ldr.w	ip, [sp, #4]
   824a6:	2800      	cmp	r0, #0
   824a8:	f000 833a 	beq.w	82b20 <_vfiprintf_r+0xc0c>
   824ac:	1bc0      	subs	r0, r0, r7
   824ae:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   824b2:	4560      	cmp	r0, ip
   824b4:	bfa8      	it	ge
   824b6:	4660      	movge	r0, ip
   824b8:	9005      	str	r0, [sp, #20]
   824ba:	9408      	str	r4, [sp, #32]
   824bc:	9507      	str	r5, [sp, #28]
   824be:	f04f 0c00 	mov.w	ip, #0
   824c2:	e65b      	b.n	8217c <_vfiprintf_r+0x268>
   824c4:	00084eb4 	.word	0x00084eb4
   824c8:	00084e74 	.word	0x00084e74
   824cc:	9b08      	ldr	r3, [sp, #32]
   824ce:	f8dd b020 	ldr.w	fp, [sp, #32]
   824d2:	9004      	str	r0, [sp, #16]
   824d4:	48b2      	ldr	r0, [pc, #712]	; (827a0 <_vfiprintf_r+0x88c>)
   824d6:	681c      	ldr	r4, [r3, #0]
   824d8:	2230      	movs	r2, #48	; 0x30
   824da:	2378      	movs	r3, #120	; 0x78
   824dc:	f10b 0b04 	add.w	fp, fp, #4
   824e0:	46ac      	mov	ip, r5
   824e2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   824e6:	f04a 0a02 	orr.w	sl, sl, #2
   824ea:	f8cd b020 	str.w	fp, [sp, #32]
   824ee:	2500      	movs	r5, #0
   824f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   824f4:	900a      	str	r0, [sp, #40]	; 0x28
   824f6:	2302      	movs	r3, #2
   824f8:	e61d      	b.n	82136 <_vfiprintf_r+0x222>
   824fa:	f04a 0a20 	orr.w	sl, sl, #32
   824fe:	f898 3000 	ldrb.w	r3, [r8]
   82502:	e574      	b.n	81fee <_vfiprintf_r+0xda>
   82504:	f8dd b020 	ldr.w	fp, [sp, #32]
   82508:	f8db 0000 	ldr.w	r0, [fp]
   8250c:	f10b 0304 	add.w	r3, fp, #4
   82510:	2800      	cmp	r0, #0
   82512:	f6ff adf7 	blt.w	82104 <_vfiprintf_r+0x1f0>
   82516:	9308      	str	r3, [sp, #32]
   82518:	f898 3000 	ldrb.w	r3, [r8]
   8251c:	e567      	b.n	81fee <_vfiprintf_r+0xda>
   8251e:	f898 3000 	ldrb.w	r3, [r8]
   82522:	212b      	movs	r1, #43	; 0x2b
   82524:	e563      	b.n	81fee <_vfiprintf_r+0xda>
   82526:	f898 3000 	ldrb.w	r3, [r8]
   8252a:	f108 0401 	add.w	r4, r8, #1
   8252e:	2b2a      	cmp	r3, #42	; 0x2a
   82530:	f000 8305 	beq.w	82b3e <_vfiprintf_r+0xc2a>
   82534:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82538:	2a09      	cmp	r2, #9
   8253a:	bf98      	it	ls
   8253c:	2500      	movls	r5, #0
   8253e:	f200 82fa 	bhi.w	82b36 <_vfiprintf_r+0xc22>
   82542:	f814 3b01 	ldrb.w	r3, [r4], #1
   82546:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8254a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8254e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82552:	2a09      	cmp	r2, #9
   82554:	d9f5      	bls.n	82542 <_vfiprintf_r+0x62e>
   82556:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8255a:	46a0      	mov	r8, r4
   8255c:	e549      	b.n	81ff2 <_vfiprintf_r+0xde>
   8255e:	4c90      	ldr	r4, [pc, #576]	; (827a0 <_vfiprintf_r+0x88c>)
   82560:	f01a 0f20 	tst.w	sl, #32
   82564:	9004      	str	r0, [sp, #16]
   82566:	46ac      	mov	ip, r5
   82568:	940a      	str	r4, [sp, #40]	; 0x28
   8256a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8256e:	f47f af10 	bne.w	82392 <_vfiprintf_r+0x47e>
   82572:	f01a 0f10 	tst.w	sl, #16
   82576:	f040 81ea 	bne.w	8294e <_vfiprintf_r+0xa3a>
   8257a:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8257e:	f000 81e6 	beq.w	8294e <_vfiprintf_r+0xa3a>
   82582:	f8dd b020 	ldr.w	fp, [sp, #32]
   82586:	2500      	movs	r5, #0
   82588:	f8bb 4000 	ldrh.w	r4, [fp]
   8258c:	f10b 0b04 	add.w	fp, fp, #4
   82590:	f8cd b020 	str.w	fp, [sp, #32]
   82594:	e707      	b.n	823a6 <_vfiprintf_r+0x492>
   82596:	f898 3000 	ldrb.w	r3, [r8]
   8259a:	2900      	cmp	r1, #0
   8259c:	f47f ad27 	bne.w	81fee <_vfiprintf_r+0xda>
   825a0:	2120      	movs	r1, #32
   825a2:	e524      	b.n	81fee <_vfiprintf_r+0xda>
   825a4:	f04a 0a01 	orr.w	sl, sl, #1
   825a8:	f898 3000 	ldrb.w	r3, [r8]
   825ac:	e51f      	b.n	81fee <_vfiprintf_r+0xda>
   825ae:	9004      	str	r0, [sp, #16]
   825b0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   825b4:	2b00      	cmp	r3, #0
   825b6:	f000 80f9 	beq.w	827ac <_vfiprintf_r+0x898>
   825ba:	2501      	movs	r5, #1
   825bc:	f04f 0b00 	mov.w	fp, #0
   825c0:	9503      	str	r5, [sp, #12]
   825c2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   825c6:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   825ca:	9505      	str	r5, [sp, #20]
   825cc:	af16      	add	r7, sp, #88	; 0x58
   825ce:	e70e      	b.n	823ee <_vfiprintf_r+0x4da>
   825d0:	9806      	ldr	r0, [sp, #24]
   825d2:	9902      	ldr	r1, [sp, #8]
   825d4:	aa13      	add	r2, sp, #76	; 0x4c
   825d6:	f7ff fc61 	bl	81e9c <__sprint_r.part.0>
   825da:	2800      	cmp	r0, #0
   825dc:	f040 80ed 	bne.w	827ba <_vfiprintf_r+0x8a6>
   825e0:	9814      	ldr	r0, [sp, #80]	; 0x50
   825e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825e4:	1c43      	adds	r3, r0, #1
   825e6:	46cc      	mov	ip, r9
   825e8:	e5fe      	b.n	821e8 <_vfiprintf_r+0x2d4>
   825ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   825ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825ee:	1c59      	adds	r1, r3, #1
   825f0:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   825f4:	b168      	cbz	r0, 82612 <_vfiprintf_r+0x6fe>
   825f6:	3201      	adds	r2, #1
   825f8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   825fc:	2301      	movs	r3, #1
   825fe:	2907      	cmp	r1, #7
   82600:	9215      	str	r2, [sp, #84]	; 0x54
   82602:	9114      	str	r1, [sp, #80]	; 0x50
   82604:	e886 0009 	stmia.w	r6, {r0, r3}
   82608:	f300 8160 	bgt.w	828cc <_vfiprintf_r+0x9b8>
   8260c:	460b      	mov	r3, r1
   8260e:	3608      	adds	r6, #8
   82610:	3101      	adds	r1, #1
   82612:	9c07      	ldr	r4, [sp, #28]
   82614:	b164      	cbz	r4, 82630 <_vfiprintf_r+0x71c>
   82616:	3202      	adds	r2, #2
   82618:	a812      	add	r0, sp, #72	; 0x48
   8261a:	2302      	movs	r3, #2
   8261c:	2907      	cmp	r1, #7
   8261e:	9215      	str	r2, [sp, #84]	; 0x54
   82620:	9114      	str	r1, [sp, #80]	; 0x50
   82622:	e886 0009 	stmia.w	r6, {r0, r3}
   82626:	f300 8157 	bgt.w	828d8 <_vfiprintf_r+0x9c4>
   8262a:	460b      	mov	r3, r1
   8262c:	3608      	adds	r6, #8
   8262e:	3101      	adds	r1, #1
   82630:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82632:	2d80      	cmp	r5, #128	; 0x80
   82634:	f000 8101 	beq.w	8283a <_vfiprintf_r+0x926>
   82638:	9d05      	ldr	r5, [sp, #20]
   8263a:	ebc5 040c 	rsb	r4, r5, ip
   8263e:	2c00      	cmp	r4, #0
   82640:	dd2f      	ble.n	826a2 <_vfiprintf_r+0x78e>
   82642:	2c10      	cmp	r4, #16
   82644:	4d57      	ldr	r5, [pc, #348]	; (827a4 <_vfiprintf_r+0x890>)
   82646:	dd22      	ble.n	8268e <_vfiprintf_r+0x77a>
   82648:	4630      	mov	r0, r6
   8264a:	f04f 0b10 	mov.w	fp, #16
   8264e:	462e      	mov	r6, r5
   82650:	4625      	mov	r5, r4
   82652:	9c06      	ldr	r4, [sp, #24]
   82654:	e006      	b.n	82664 <_vfiprintf_r+0x750>
   82656:	f103 0c02 	add.w	ip, r3, #2
   8265a:	3008      	adds	r0, #8
   8265c:	460b      	mov	r3, r1
   8265e:	3d10      	subs	r5, #16
   82660:	2d10      	cmp	r5, #16
   82662:	dd10      	ble.n	82686 <_vfiprintf_r+0x772>
   82664:	1c59      	adds	r1, r3, #1
   82666:	3210      	adds	r2, #16
   82668:	2907      	cmp	r1, #7
   8266a:	9215      	str	r2, [sp, #84]	; 0x54
   8266c:	e880 0840 	stmia.w	r0, {r6, fp}
   82670:	9114      	str	r1, [sp, #80]	; 0x50
   82672:	ddf0      	ble.n	82656 <_vfiprintf_r+0x742>
   82674:	2a00      	cmp	r2, #0
   82676:	d163      	bne.n	82740 <_vfiprintf_r+0x82c>
   82678:	3d10      	subs	r5, #16
   8267a:	2d10      	cmp	r5, #16
   8267c:	f04f 0c01 	mov.w	ip, #1
   82680:	4613      	mov	r3, r2
   82682:	4648      	mov	r0, r9
   82684:	dcee      	bgt.n	82664 <_vfiprintf_r+0x750>
   82686:	462c      	mov	r4, r5
   82688:	4661      	mov	r1, ip
   8268a:	4635      	mov	r5, r6
   8268c:	4606      	mov	r6, r0
   8268e:	4422      	add	r2, r4
   82690:	2907      	cmp	r1, #7
   82692:	9215      	str	r2, [sp, #84]	; 0x54
   82694:	6035      	str	r5, [r6, #0]
   82696:	6074      	str	r4, [r6, #4]
   82698:	9114      	str	r1, [sp, #80]	; 0x50
   8269a:	f300 80c1 	bgt.w	82820 <_vfiprintf_r+0x90c>
   8269e:	3608      	adds	r6, #8
   826a0:	3101      	adds	r1, #1
   826a2:	9d05      	ldr	r5, [sp, #20]
   826a4:	2907      	cmp	r1, #7
   826a6:	442a      	add	r2, r5
   826a8:	9215      	str	r2, [sp, #84]	; 0x54
   826aa:	6037      	str	r7, [r6, #0]
   826ac:	6075      	str	r5, [r6, #4]
   826ae:	9114      	str	r1, [sp, #80]	; 0x50
   826b0:	f340 80c1 	ble.w	82836 <_vfiprintf_r+0x922>
   826b4:	2a00      	cmp	r2, #0
   826b6:	f040 8130 	bne.w	8291a <_vfiprintf_r+0xa06>
   826ba:	9214      	str	r2, [sp, #80]	; 0x50
   826bc:	464e      	mov	r6, r9
   826be:	f01a 0f04 	tst.w	sl, #4
   826c2:	f000 808b 	beq.w	827dc <_vfiprintf_r+0x8c8>
   826c6:	9d04      	ldr	r5, [sp, #16]
   826c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   826cc:	ebcb 0405 	rsb	r4, fp, r5
   826d0:	2c00      	cmp	r4, #0
   826d2:	f340 8083 	ble.w	827dc <_vfiprintf_r+0x8c8>
   826d6:	2c10      	cmp	r4, #16
   826d8:	f340 821e 	ble.w	82b18 <_vfiprintf_r+0xc04>
   826dc:	9914      	ldr	r1, [sp, #80]	; 0x50
   826de:	4d32      	ldr	r5, [pc, #200]	; (827a8 <_vfiprintf_r+0x894>)
   826e0:	2710      	movs	r7, #16
   826e2:	f8dd a018 	ldr.w	sl, [sp, #24]
   826e6:	f8dd b008 	ldr.w	fp, [sp, #8]
   826ea:	e005      	b.n	826f8 <_vfiprintf_r+0x7e4>
   826ec:	1c88      	adds	r0, r1, #2
   826ee:	3608      	adds	r6, #8
   826f0:	4619      	mov	r1, r3
   826f2:	3c10      	subs	r4, #16
   826f4:	2c10      	cmp	r4, #16
   826f6:	dd10      	ble.n	8271a <_vfiprintf_r+0x806>
   826f8:	1c4b      	adds	r3, r1, #1
   826fa:	3210      	adds	r2, #16
   826fc:	2b07      	cmp	r3, #7
   826fe:	9215      	str	r2, [sp, #84]	; 0x54
   82700:	e886 00a0 	stmia.w	r6, {r5, r7}
   82704:	9314      	str	r3, [sp, #80]	; 0x50
   82706:	ddf1      	ble.n	826ec <_vfiprintf_r+0x7d8>
   82708:	2a00      	cmp	r2, #0
   8270a:	d17d      	bne.n	82808 <_vfiprintf_r+0x8f4>
   8270c:	3c10      	subs	r4, #16
   8270e:	2c10      	cmp	r4, #16
   82710:	f04f 0001 	mov.w	r0, #1
   82714:	4611      	mov	r1, r2
   82716:	464e      	mov	r6, r9
   82718:	dcee      	bgt.n	826f8 <_vfiprintf_r+0x7e4>
   8271a:	4422      	add	r2, r4
   8271c:	2807      	cmp	r0, #7
   8271e:	9215      	str	r2, [sp, #84]	; 0x54
   82720:	6035      	str	r5, [r6, #0]
   82722:	6074      	str	r4, [r6, #4]
   82724:	9014      	str	r0, [sp, #80]	; 0x50
   82726:	dd59      	ble.n	827dc <_vfiprintf_r+0x8c8>
   82728:	2a00      	cmp	r2, #0
   8272a:	d14f      	bne.n	827cc <_vfiprintf_r+0x8b8>
   8272c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8272e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82732:	9d04      	ldr	r5, [sp, #16]
   82734:	45ab      	cmp	fp, r5
   82736:	bfac      	ite	ge
   82738:	445c      	addge	r4, fp
   8273a:	1964      	addlt	r4, r4, r5
   8273c:	9409      	str	r4, [sp, #36]	; 0x24
   8273e:	e05e      	b.n	827fe <_vfiprintf_r+0x8ea>
   82740:	4620      	mov	r0, r4
   82742:	9902      	ldr	r1, [sp, #8]
   82744:	aa13      	add	r2, sp, #76	; 0x4c
   82746:	f7ff fba9 	bl	81e9c <__sprint_r.part.0>
   8274a:	2800      	cmp	r0, #0
   8274c:	d135      	bne.n	827ba <_vfiprintf_r+0x8a6>
   8274e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82750:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82752:	f103 0c01 	add.w	ip, r3, #1
   82756:	4648      	mov	r0, r9
   82758:	e781      	b.n	8265e <_vfiprintf_r+0x74a>
   8275a:	08e0      	lsrs	r0, r4, #3
   8275c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   82760:	f004 0207 	and.w	r2, r4, #7
   82764:	08e9      	lsrs	r1, r5, #3
   82766:	3230      	adds	r2, #48	; 0x30
   82768:	ea50 0b01 	orrs.w	fp, r0, r1
   8276c:	461f      	mov	r7, r3
   8276e:	701a      	strb	r2, [r3, #0]
   82770:	4604      	mov	r4, r0
   82772:	460d      	mov	r5, r1
   82774:	f103 33ff 	add.w	r3, r3, #4294967295
   82778:	d1ef      	bne.n	8275a <_vfiprintf_r+0x846>
   8277a:	f01a 0f01 	tst.w	sl, #1
   8277e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   82782:	4639      	mov	r1, r7
   82784:	f000 80b9 	beq.w	828fa <_vfiprintf_r+0x9e6>
   82788:	2a30      	cmp	r2, #48	; 0x30
   8278a:	f43f acf4 	beq.w	82176 <_vfiprintf_r+0x262>
   8278e:	461f      	mov	r7, r3
   82790:	ebc7 0509 	rsb	r5, r7, r9
   82794:	2330      	movs	r3, #48	; 0x30
   82796:	9505      	str	r5, [sp, #20]
   82798:	f801 3c01 	strb.w	r3, [r1, #-1]
   8279c:	e4ee      	b.n	8217c <_vfiprintf_r+0x268>
   8279e:	bf00      	nop
   827a0:	00084e88 	.word	0x00084e88
   827a4:	00084ea4 	.word	0x00084ea4
   827a8:	00084eb4 	.word	0x00084eb4
   827ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   827ae:	b123      	cbz	r3, 827ba <_vfiprintf_r+0x8a6>
   827b0:	9806      	ldr	r0, [sp, #24]
   827b2:	9902      	ldr	r1, [sp, #8]
   827b4:	aa13      	add	r2, sp, #76	; 0x4c
   827b6:	f7ff fb71 	bl	81e9c <__sprint_r.part.0>
   827ba:	9c02      	ldr	r4, [sp, #8]
   827bc:	89a3      	ldrh	r3, [r4, #12]
   827be:	065b      	lsls	r3, r3, #25
   827c0:	f53f ac98 	bmi.w	820f4 <_vfiprintf_r+0x1e0>
   827c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   827c6:	b031      	add	sp, #196	; 0xc4
   827c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827cc:	9806      	ldr	r0, [sp, #24]
   827ce:	9902      	ldr	r1, [sp, #8]
   827d0:	aa13      	add	r2, sp, #76	; 0x4c
   827d2:	f7ff fb63 	bl	81e9c <__sprint_r.part.0>
   827d6:	2800      	cmp	r0, #0
   827d8:	d1ef      	bne.n	827ba <_vfiprintf_r+0x8a6>
   827da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   827dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   827de:	f8dd b00c 	ldr.w	fp, [sp, #12]
   827e2:	9d04      	ldr	r5, [sp, #16]
   827e4:	45ab      	cmp	fp, r5
   827e6:	bfac      	ite	ge
   827e8:	445c      	addge	r4, fp
   827ea:	1964      	addlt	r4, r4, r5
   827ec:	9409      	str	r4, [sp, #36]	; 0x24
   827ee:	b132      	cbz	r2, 827fe <_vfiprintf_r+0x8ea>
   827f0:	9806      	ldr	r0, [sp, #24]
   827f2:	9902      	ldr	r1, [sp, #8]
   827f4:	aa13      	add	r2, sp, #76	; 0x4c
   827f6:	f7ff fb51 	bl	81e9c <__sprint_r.part.0>
   827fa:	2800      	cmp	r0, #0
   827fc:	d1dd      	bne.n	827ba <_vfiprintf_r+0x8a6>
   827fe:	2000      	movs	r0, #0
   82800:	9014      	str	r0, [sp, #80]	; 0x50
   82802:	464e      	mov	r6, r9
   82804:	f7ff bbb9 	b.w	81f7a <_vfiprintf_r+0x66>
   82808:	4650      	mov	r0, sl
   8280a:	4659      	mov	r1, fp
   8280c:	aa13      	add	r2, sp, #76	; 0x4c
   8280e:	f7ff fb45 	bl	81e9c <__sprint_r.part.0>
   82812:	2800      	cmp	r0, #0
   82814:	d1d1      	bne.n	827ba <_vfiprintf_r+0x8a6>
   82816:	9914      	ldr	r1, [sp, #80]	; 0x50
   82818:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8281a:	1c48      	adds	r0, r1, #1
   8281c:	464e      	mov	r6, r9
   8281e:	e768      	b.n	826f2 <_vfiprintf_r+0x7de>
   82820:	2a00      	cmp	r2, #0
   82822:	f040 80f7 	bne.w	82a14 <_vfiprintf_r+0xb00>
   82826:	9c05      	ldr	r4, [sp, #20]
   82828:	2301      	movs	r3, #1
   8282a:	9720      	str	r7, [sp, #128]	; 0x80
   8282c:	9421      	str	r4, [sp, #132]	; 0x84
   8282e:	9415      	str	r4, [sp, #84]	; 0x54
   82830:	4622      	mov	r2, r4
   82832:	9314      	str	r3, [sp, #80]	; 0x50
   82834:	464e      	mov	r6, r9
   82836:	3608      	adds	r6, #8
   82838:	e741      	b.n	826be <_vfiprintf_r+0x7aa>
   8283a:	9d04      	ldr	r5, [sp, #16]
   8283c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82840:	ebcb 0405 	rsb	r4, fp, r5
   82844:	2c00      	cmp	r4, #0
   82846:	f77f aef7 	ble.w	82638 <_vfiprintf_r+0x724>
   8284a:	2c10      	cmp	r4, #16
   8284c:	4da6      	ldr	r5, [pc, #664]	; (82ae8 <_vfiprintf_r+0xbd4>)
   8284e:	f340 8170 	ble.w	82b32 <_vfiprintf_r+0xc1e>
   82852:	4629      	mov	r1, r5
   82854:	f04f 0b10 	mov.w	fp, #16
   82858:	4625      	mov	r5, r4
   8285a:	4664      	mov	r4, ip
   8285c:	46b4      	mov	ip, r6
   8285e:	460e      	mov	r6, r1
   82860:	e006      	b.n	82870 <_vfiprintf_r+0x95c>
   82862:	1c98      	adds	r0, r3, #2
   82864:	f10c 0c08 	add.w	ip, ip, #8
   82868:	460b      	mov	r3, r1
   8286a:	3d10      	subs	r5, #16
   8286c:	2d10      	cmp	r5, #16
   8286e:	dd0f      	ble.n	82890 <_vfiprintf_r+0x97c>
   82870:	1c59      	adds	r1, r3, #1
   82872:	3210      	adds	r2, #16
   82874:	2907      	cmp	r1, #7
   82876:	9215      	str	r2, [sp, #84]	; 0x54
   82878:	e88c 0840 	stmia.w	ip, {r6, fp}
   8287c:	9114      	str	r1, [sp, #80]	; 0x50
   8287e:	ddf0      	ble.n	82862 <_vfiprintf_r+0x94e>
   82880:	b9ba      	cbnz	r2, 828b2 <_vfiprintf_r+0x99e>
   82882:	3d10      	subs	r5, #16
   82884:	2d10      	cmp	r5, #16
   82886:	f04f 0001 	mov.w	r0, #1
   8288a:	4613      	mov	r3, r2
   8288c:	46cc      	mov	ip, r9
   8288e:	dcef      	bgt.n	82870 <_vfiprintf_r+0x95c>
   82890:	4633      	mov	r3, r6
   82892:	4666      	mov	r6, ip
   82894:	46a4      	mov	ip, r4
   82896:	462c      	mov	r4, r5
   82898:	461d      	mov	r5, r3
   8289a:	4422      	add	r2, r4
   8289c:	2807      	cmp	r0, #7
   8289e:	9215      	str	r2, [sp, #84]	; 0x54
   828a0:	6035      	str	r5, [r6, #0]
   828a2:	6074      	str	r4, [r6, #4]
   828a4:	9014      	str	r0, [sp, #80]	; 0x50
   828a6:	f300 80af 	bgt.w	82a08 <_vfiprintf_r+0xaf4>
   828aa:	3608      	adds	r6, #8
   828ac:	1c41      	adds	r1, r0, #1
   828ae:	4603      	mov	r3, r0
   828b0:	e6c2      	b.n	82638 <_vfiprintf_r+0x724>
   828b2:	9806      	ldr	r0, [sp, #24]
   828b4:	9902      	ldr	r1, [sp, #8]
   828b6:	aa13      	add	r2, sp, #76	; 0x4c
   828b8:	f7ff faf0 	bl	81e9c <__sprint_r.part.0>
   828bc:	2800      	cmp	r0, #0
   828be:	f47f af7c 	bne.w	827ba <_vfiprintf_r+0x8a6>
   828c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   828c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   828c6:	1c58      	adds	r0, r3, #1
   828c8:	46cc      	mov	ip, r9
   828ca:	e7ce      	b.n	8286a <_vfiprintf_r+0x956>
   828cc:	2a00      	cmp	r2, #0
   828ce:	d179      	bne.n	829c4 <_vfiprintf_r+0xab0>
   828d0:	4619      	mov	r1, r3
   828d2:	464e      	mov	r6, r9
   828d4:	4613      	mov	r3, r2
   828d6:	e69c      	b.n	82612 <_vfiprintf_r+0x6fe>
   828d8:	2a00      	cmp	r2, #0
   828da:	f040 8084 	bne.w	829e6 <_vfiprintf_r+0xad2>
   828de:	2101      	movs	r1, #1
   828e0:	4613      	mov	r3, r2
   828e2:	464e      	mov	r6, r9
   828e4:	e6a4      	b.n	82630 <_vfiprintf_r+0x71c>
   828e6:	464f      	mov	r7, r9
   828e8:	e448      	b.n	8217c <_vfiprintf_r+0x268>
   828ea:	2d00      	cmp	r5, #0
   828ec:	bf08      	it	eq
   828ee:	2c0a      	cmpeq	r4, #10
   828f0:	d246      	bcs.n	82980 <_vfiprintf_r+0xa6c>
   828f2:	3430      	adds	r4, #48	; 0x30
   828f4:	af30      	add	r7, sp, #192	; 0xc0
   828f6:	f807 4d41 	strb.w	r4, [r7, #-65]!
   828fa:	ebc7 0309 	rsb	r3, r7, r9
   828fe:	9305      	str	r3, [sp, #20]
   82900:	e43c      	b.n	8217c <_vfiprintf_r+0x268>
   82902:	2302      	movs	r3, #2
   82904:	e417      	b.n	82136 <_vfiprintf_r+0x222>
   82906:	2a00      	cmp	r2, #0
   82908:	f040 80af 	bne.w	82a6a <_vfiprintf_r+0xb56>
   8290c:	4613      	mov	r3, r2
   8290e:	2101      	movs	r1, #1
   82910:	464e      	mov	r6, r9
   82912:	e66d      	b.n	825f0 <_vfiprintf_r+0x6dc>
   82914:	4644      	mov	r4, r8
   82916:	f7ff bb58 	b.w	81fca <_vfiprintf_r+0xb6>
   8291a:	9806      	ldr	r0, [sp, #24]
   8291c:	9902      	ldr	r1, [sp, #8]
   8291e:	aa13      	add	r2, sp, #76	; 0x4c
   82920:	f7ff fabc 	bl	81e9c <__sprint_r.part.0>
   82924:	2800      	cmp	r0, #0
   82926:	f47f af48 	bne.w	827ba <_vfiprintf_r+0x8a6>
   8292a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8292c:	464e      	mov	r6, r9
   8292e:	e6c6      	b.n	826be <_vfiprintf_r+0x7aa>
   82930:	9d08      	ldr	r5, [sp, #32]
   82932:	682c      	ldr	r4, [r5, #0]
   82934:	3504      	adds	r5, #4
   82936:	9508      	str	r5, [sp, #32]
   82938:	2500      	movs	r5, #0
   8293a:	f7ff bbfc 	b.w	82136 <_vfiprintf_r+0x222>
   8293e:	9d08      	ldr	r5, [sp, #32]
   82940:	2301      	movs	r3, #1
   82942:	682c      	ldr	r4, [r5, #0]
   82944:	3504      	adds	r5, #4
   82946:	9508      	str	r5, [sp, #32]
   82948:	2500      	movs	r5, #0
   8294a:	f7ff bbf4 	b.w	82136 <_vfiprintf_r+0x222>
   8294e:	9d08      	ldr	r5, [sp, #32]
   82950:	682c      	ldr	r4, [r5, #0]
   82952:	3504      	adds	r5, #4
   82954:	9508      	str	r5, [sp, #32]
   82956:	2500      	movs	r5, #0
   82958:	e525      	b.n	823a6 <_vfiprintf_r+0x492>
   8295a:	9d08      	ldr	r5, [sp, #32]
   8295c:	682c      	ldr	r4, [r5, #0]
   8295e:	3504      	adds	r5, #4
   82960:	9508      	str	r5, [sp, #32]
   82962:	17e5      	asrs	r5, r4, #31
   82964:	4622      	mov	r2, r4
   82966:	462b      	mov	r3, r5
   82968:	e48e      	b.n	82288 <_vfiprintf_r+0x374>
   8296a:	9806      	ldr	r0, [sp, #24]
   8296c:	9902      	ldr	r1, [sp, #8]
   8296e:	aa13      	add	r2, sp, #76	; 0x4c
   82970:	f7ff fa94 	bl	81e9c <__sprint_r.part.0>
   82974:	2800      	cmp	r0, #0
   82976:	f47f af20 	bne.w	827ba <_vfiprintf_r+0x8a6>
   8297a:	464e      	mov	r6, r9
   8297c:	f7ff bb9a 	b.w	820b4 <_vfiprintf_r+0x1a0>
   82980:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82984:	9603      	str	r6, [sp, #12]
   82986:	465e      	mov	r6, fp
   82988:	46e3      	mov	fp, ip
   8298a:	4620      	mov	r0, r4
   8298c:	4629      	mov	r1, r5
   8298e:	220a      	movs	r2, #10
   82990:	2300      	movs	r3, #0
   82992:	f001 fe5f 	bl	84654 <__aeabi_uldivmod>
   82996:	3230      	adds	r2, #48	; 0x30
   82998:	7032      	strb	r2, [r6, #0]
   8299a:	4620      	mov	r0, r4
   8299c:	4629      	mov	r1, r5
   8299e:	220a      	movs	r2, #10
   829a0:	2300      	movs	r3, #0
   829a2:	f001 fe57 	bl	84654 <__aeabi_uldivmod>
   829a6:	4604      	mov	r4, r0
   829a8:	460d      	mov	r5, r1
   829aa:	ea54 0005 	orrs.w	r0, r4, r5
   829ae:	4637      	mov	r7, r6
   829b0:	f106 36ff 	add.w	r6, r6, #4294967295
   829b4:	d1e9      	bne.n	8298a <_vfiprintf_r+0xa76>
   829b6:	ebc7 0309 	rsb	r3, r7, r9
   829ba:	46dc      	mov	ip, fp
   829bc:	9e03      	ldr	r6, [sp, #12]
   829be:	9305      	str	r3, [sp, #20]
   829c0:	f7ff bbdc 	b.w	8217c <_vfiprintf_r+0x268>
   829c4:	9806      	ldr	r0, [sp, #24]
   829c6:	9902      	ldr	r1, [sp, #8]
   829c8:	aa13      	add	r2, sp, #76	; 0x4c
   829ca:	f8cd c004 	str.w	ip, [sp, #4]
   829ce:	f7ff fa65 	bl	81e9c <__sprint_r.part.0>
   829d2:	f8dd c004 	ldr.w	ip, [sp, #4]
   829d6:	2800      	cmp	r0, #0
   829d8:	f47f aeef 	bne.w	827ba <_vfiprintf_r+0x8a6>
   829dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   829de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   829e0:	1c59      	adds	r1, r3, #1
   829e2:	464e      	mov	r6, r9
   829e4:	e615      	b.n	82612 <_vfiprintf_r+0x6fe>
   829e6:	9806      	ldr	r0, [sp, #24]
   829e8:	9902      	ldr	r1, [sp, #8]
   829ea:	aa13      	add	r2, sp, #76	; 0x4c
   829ec:	f8cd c004 	str.w	ip, [sp, #4]
   829f0:	f7ff fa54 	bl	81e9c <__sprint_r.part.0>
   829f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   829f8:	2800      	cmp	r0, #0
   829fa:	f47f aede 	bne.w	827ba <_vfiprintf_r+0x8a6>
   829fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a02:	1c59      	adds	r1, r3, #1
   82a04:	464e      	mov	r6, r9
   82a06:	e613      	b.n	82630 <_vfiprintf_r+0x71c>
   82a08:	2a00      	cmp	r2, #0
   82a0a:	d156      	bne.n	82aba <_vfiprintf_r+0xba6>
   82a0c:	2101      	movs	r1, #1
   82a0e:	4613      	mov	r3, r2
   82a10:	464e      	mov	r6, r9
   82a12:	e611      	b.n	82638 <_vfiprintf_r+0x724>
   82a14:	9806      	ldr	r0, [sp, #24]
   82a16:	9902      	ldr	r1, [sp, #8]
   82a18:	aa13      	add	r2, sp, #76	; 0x4c
   82a1a:	f7ff fa3f 	bl	81e9c <__sprint_r.part.0>
   82a1e:	2800      	cmp	r0, #0
   82a20:	f47f aecb 	bne.w	827ba <_vfiprintf_r+0x8a6>
   82a24:	9914      	ldr	r1, [sp, #80]	; 0x50
   82a26:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a28:	3101      	adds	r1, #1
   82a2a:	464e      	mov	r6, r9
   82a2c:	e639      	b.n	826a2 <_vfiprintf_r+0x78e>
   82a2e:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   82a32:	4264      	negs	r4, r4
   82a34:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82a38:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82a3c:	f8cd b01c 	str.w	fp, [sp, #28]
   82a40:	f8cd c014 	str.w	ip, [sp, #20]
   82a44:	2301      	movs	r3, #1
   82a46:	f7ff bb7e 	b.w	82146 <_vfiprintf_r+0x232>
   82a4a:	f01a 0f10 	tst.w	sl, #16
   82a4e:	d11d      	bne.n	82a8c <_vfiprintf_r+0xb78>
   82a50:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82a54:	d058      	beq.n	82b08 <_vfiprintf_r+0xbf4>
   82a56:	9d08      	ldr	r5, [sp, #32]
   82a58:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82a5c:	682b      	ldr	r3, [r5, #0]
   82a5e:	3504      	adds	r5, #4
   82a60:	9508      	str	r5, [sp, #32]
   82a62:	f8a3 b000 	strh.w	fp, [r3]
   82a66:	f7ff ba88 	b.w	81f7a <_vfiprintf_r+0x66>
   82a6a:	9806      	ldr	r0, [sp, #24]
   82a6c:	9902      	ldr	r1, [sp, #8]
   82a6e:	aa13      	add	r2, sp, #76	; 0x4c
   82a70:	f8cd c004 	str.w	ip, [sp, #4]
   82a74:	f7ff fa12 	bl	81e9c <__sprint_r.part.0>
   82a78:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a7c:	2800      	cmp	r0, #0
   82a7e:	f47f ae9c 	bne.w	827ba <_vfiprintf_r+0x8a6>
   82a82:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a84:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a86:	1c59      	adds	r1, r3, #1
   82a88:	464e      	mov	r6, r9
   82a8a:	e5b1      	b.n	825f0 <_vfiprintf_r+0x6dc>
   82a8c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82a90:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82a92:	f8db 3000 	ldr.w	r3, [fp]
   82a96:	f10b 0b04 	add.w	fp, fp, #4
   82a9a:	f8cd b020 	str.w	fp, [sp, #32]
   82a9e:	601c      	str	r4, [r3, #0]
   82aa0:	f7ff ba6b 	b.w	81f7a <_vfiprintf_r+0x66>
   82aa4:	9408      	str	r4, [sp, #32]
   82aa6:	f001 fc5f 	bl	84368 <strlen>
   82aaa:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82aae:	9005      	str	r0, [sp, #20]
   82ab0:	9407      	str	r4, [sp, #28]
   82ab2:	f04f 0c00 	mov.w	ip, #0
   82ab6:	f7ff bb61 	b.w	8217c <_vfiprintf_r+0x268>
   82aba:	9806      	ldr	r0, [sp, #24]
   82abc:	9902      	ldr	r1, [sp, #8]
   82abe:	aa13      	add	r2, sp, #76	; 0x4c
   82ac0:	f8cd c004 	str.w	ip, [sp, #4]
   82ac4:	f7ff f9ea 	bl	81e9c <__sprint_r.part.0>
   82ac8:	f8dd c004 	ldr.w	ip, [sp, #4]
   82acc:	2800      	cmp	r0, #0
   82ace:	f47f ae74 	bne.w	827ba <_vfiprintf_r+0x8a6>
   82ad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ad6:	1c59      	adds	r1, r3, #1
   82ad8:	464e      	mov	r6, r9
   82ada:	e5ad      	b.n	82638 <_vfiprintf_r+0x724>
   82adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ade:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ae0:	3301      	adds	r3, #1
   82ae2:	4d02      	ldr	r5, [pc, #8]	; (82aec <_vfiprintf_r+0xbd8>)
   82ae4:	f7ff bb9a 	b.w	8221c <_vfiprintf_r+0x308>
   82ae8:	00084ea4 	.word	0x00084ea4
   82aec:	00084eb4 	.word	0x00084eb4
   82af0:	f1bc 0f06 	cmp.w	ip, #6
   82af4:	bf34      	ite	cc
   82af6:	4663      	movcc	r3, ip
   82af8:	2306      	movcs	r3, #6
   82afa:	9408      	str	r4, [sp, #32]
   82afc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82b00:	9305      	str	r3, [sp, #20]
   82b02:	9403      	str	r4, [sp, #12]
   82b04:	4f16      	ldr	r7, [pc, #88]	; (82b60 <_vfiprintf_r+0xc4c>)
   82b06:	e472      	b.n	823ee <_vfiprintf_r+0x4da>
   82b08:	9c08      	ldr	r4, [sp, #32]
   82b0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82b0c:	6823      	ldr	r3, [r4, #0]
   82b0e:	3404      	adds	r4, #4
   82b10:	9408      	str	r4, [sp, #32]
   82b12:	601d      	str	r5, [r3, #0]
   82b14:	f7ff ba31 	b.w	81f7a <_vfiprintf_r+0x66>
   82b18:	9814      	ldr	r0, [sp, #80]	; 0x50
   82b1a:	4d12      	ldr	r5, [pc, #72]	; (82b64 <_vfiprintf_r+0xc50>)
   82b1c:	3001      	adds	r0, #1
   82b1e:	e5fc      	b.n	8271a <_vfiprintf_r+0x806>
   82b20:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82b24:	f8cd c014 	str.w	ip, [sp, #20]
   82b28:	9507      	str	r5, [sp, #28]
   82b2a:	9408      	str	r4, [sp, #32]
   82b2c:	4684      	mov	ip, r0
   82b2e:	f7ff bb25 	b.w	8217c <_vfiprintf_r+0x268>
   82b32:	4608      	mov	r0, r1
   82b34:	e6b1      	b.n	8289a <_vfiprintf_r+0x986>
   82b36:	46a0      	mov	r8, r4
   82b38:	2500      	movs	r5, #0
   82b3a:	f7ff ba5a 	b.w	81ff2 <_vfiprintf_r+0xde>
   82b3e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82b42:	f898 3001 	ldrb.w	r3, [r8, #1]
   82b46:	f8db 5000 	ldr.w	r5, [fp]
   82b4a:	f10b 0204 	add.w	r2, fp, #4
   82b4e:	2d00      	cmp	r5, #0
   82b50:	9208      	str	r2, [sp, #32]
   82b52:	46a0      	mov	r8, r4
   82b54:	f6bf aa4b 	bge.w	81fee <_vfiprintf_r+0xda>
   82b58:	f04f 35ff 	mov.w	r5, #4294967295
   82b5c:	f7ff ba47 	b.w	81fee <_vfiprintf_r+0xda>
   82b60:	00084e9c 	.word	0x00084e9c
   82b64:	00084eb4 	.word	0x00084eb4

00082b68 <__sbprintf>:
   82b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82b6c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82b6e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82b72:	4688      	mov	r8, r1
   82b74:	9719      	str	r7, [sp, #100]	; 0x64
   82b76:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82b7a:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82b7e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82b82:	9707      	str	r7, [sp, #28]
   82b84:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82b88:	ac1a      	add	r4, sp, #104	; 0x68
   82b8a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82b8e:	f02a 0a02 	bic.w	sl, sl, #2
   82b92:	2600      	movs	r6, #0
   82b94:	4669      	mov	r1, sp
   82b96:	9400      	str	r4, [sp, #0]
   82b98:	9404      	str	r4, [sp, #16]
   82b9a:	9502      	str	r5, [sp, #8]
   82b9c:	9505      	str	r5, [sp, #20]
   82b9e:	f8ad a00c 	strh.w	sl, [sp, #12]
   82ba2:	f8ad 900e 	strh.w	r9, [sp, #14]
   82ba6:	9709      	str	r7, [sp, #36]	; 0x24
   82ba8:	9606      	str	r6, [sp, #24]
   82baa:	4605      	mov	r5, r0
   82bac:	f7ff f9b2 	bl	81f14 <_vfiprintf_r>
   82bb0:	1e04      	subs	r4, r0, #0
   82bb2:	db07      	blt.n	82bc4 <__sbprintf+0x5c>
   82bb4:	4628      	mov	r0, r5
   82bb6:	4669      	mov	r1, sp
   82bb8:	f000 f97e 	bl	82eb8 <_fflush_r>
   82bbc:	42b0      	cmp	r0, r6
   82bbe:	bf18      	it	ne
   82bc0:	f04f 34ff 	movne.w	r4, #4294967295
   82bc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82bc8:	065b      	lsls	r3, r3, #25
   82bca:	d505      	bpl.n	82bd8 <__sbprintf+0x70>
   82bcc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82bd4:	f8a8 300c 	strh.w	r3, [r8, #12]
   82bd8:	4620      	mov	r0, r4
   82bda:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82be2:	bf00      	nop

00082be4 <__swbuf_r>:
   82be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82be6:	460d      	mov	r5, r1
   82be8:	4614      	mov	r4, r2
   82bea:	4607      	mov	r7, r0
   82bec:	b110      	cbz	r0, 82bf4 <__swbuf_r+0x10>
   82bee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82bf0:	2b00      	cmp	r3, #0
   82bf2:	d048      	beq.n	82c86 <__swbuf_r+0xa2>
   82bf4:	89a2      	ldrh	r2, [r4, #12]
   82bf6:	69a0      	ldr	r0, [r4, #24]
   82bf8:	b293      	uxth	r3, r2
   82bfa:	60a0      	str	r0, [r4, #8]
   82bfc:	0718      	lsls	r0, r3, #28
   82bfe:	d538      	bpl.n	82c72 <__swbuf_r+0x8e>
   82c00:	6926      	ldr	r6, [r4, #16]
   82c02:	2e00      	cmp	r6, #0
   82c04:	d035      	beq.n	82c72 <__swbuf_r+0x8e>
   82c06:	0499      	lsls	r1, r3, #18
   82c08:	b2ed      	uxtb	r5, r5
   82c0a:	d515      	bpl.n	82c38 <__swbuf_r+0x54>
   82c0c:	6823      	ldr	r3, [r4, #0]
   82c0e:	6962      	ldr	r2, [r4, #20]
   82c10:	1b9e      	subs	r6, r3, r6
   82c12:	4296      	cmp	r6, r2
   82c14:	da1c      	bge.n	82c50 <__swbuf_r+0x6c>
   82c16:	3601      	adds	r6, #1
   82c18:	68a2      	ldr	r2, [r4, #8]
   82c1a:	1c59      	adds	r1, r3, #1
   82c1c:	3a01      	subs	r2, #1
   82c1e:	60a2      	str	r2, [r4, #8]
   82c20:	6021      	str	r1, [r4, #0]
   82c22:	701d      	strb	r5, [r3, #0]
   82c24:	6963      	ldr	r3, [r4, #20]
   82c26:	42b3      	cmp	r3, r6
   82c28:	d01a      	beq.n	82c60 <__swbuf_r+0x7c>
   82c2a:	89a3      	ldrh	r3, [r4, #12]
   82c2c:	07db      	lsls	r3, r3, #31
   82c2e:	d501      	bpl.n	82c34 <__swbuf_r+0x50>
   82c30:	2d0a      	cmp	r5, #10
   82c32:	d015      	beq.n	82c60 <__swbuf_r+0x7c>
   82c34:	4628      	mov	r0, r5
   82c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82c42:	6663      	str	r3, [r4, #100]	; 0x64
   82c44:	6823      	ldr	r3, [r4, #0]
   82c46:	81a2      	strh	r2, [r4, #12]
   82c48:	6962      	ldr	r2, [r4, #20]
   82c4a:	1b9e      	subs	r6, r3, r6
   82c4c:	4296      	cmp	r6, r2
   82c4e:	dbe2      	blt.n	82c16 <__swbuf_r+0x32>
   82c50:	4638      	mov	r0, r7
   82c52:	4621      	mov	r1, r4
   82c54:	f000 f930 	bl	82eb8 <_fflush_r>
   82c58:	b940      	cbnz	r0, 82c6c <__swbuf_r+0x88>
   82c5a:	6823      	ldr	r3, [r4, #0]
   82c5c:	2601      	movs	r6, #1
   82c5e:	e7db      	b.n	82c18 <__swbuf_r+0x34>
   82c60:	4638      	mov	r0, r7
   82c62:	4621      	mov	r1, r4
   82c64:	f000 f928 	bl	82eb8 <_fflush_r>
   82c68:	2800      	cmp	r0, #0
   82c6a:	d0e3      	beq.n	82c34 <__swbuf_r+0x50>
   82c6c:	f04f 30ff 	mov.w	r0, #4294967295
   82c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c72:	4638      	mov	r0, r7
   82c74:	4621      	mov	r1, r4
   82c76:	f000 f809 	bl	82c8c <__swsetup_r>
   82c7a:	2800      	cmp	r0, #0
   82c7c:	d1f6      	bne.n	82c6c <__swbuf_r+0x88>
   82c7e:	89a2      	ldrh	r2, [r4, #12]
   82c80:	6926      	ldr	r6, [r4, #16]
   82c82:	b293      	uxth	r3, r2
   82c84:	e7bf      	b.n	82c06 <__swbuf_r+0x22>
   82c86:	f000 f933 	bl	82ef0 <__sinit>
   82c8a:	e7b3      	b.n	82bf4 <__swbuf_r+0x10>

00082c8c <__swsetup_r>:
   82c8c:	4b2f      	ldr	r3, [pc, #188]	; (82d4c <__swsetup_r+0xc0>)
   82c8e:	b570      	push	{r4, r5, r6, lr}
   82c90:	4606      	mov	r6, r0
   82c92:	6818      	ldr	r0, [r3, #0]
   82c94:	460c      	mov	r4, r1
   82c96:	b110      	cbz	r0, 82c9e <__swsetup_r+0x12>
   82c98:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82c9a:	2a00      	cmp	r2, #0
   82c9c:	d036      	beq.n	82d0c <__swsetup_r+0x80>
   82c9e:	89a5      	ldrh	r5, [r4, #12]
   82ca0:	b2ab      	uxth	r3, r5
   82ca2:	0719      	lsls	r1, r3, #28
   82ca4:	d50c      	bpl.n	82cc0 <__swsetup_r+0x34>
   82ca6:	6922      	ldr	r2, [r4, #16]
   82ca8:	b1aa      	cbz	r2, 82cd6 <__swsetup_r+0x4a>
   82caa:	f013 0101 	ands.w	r1, r3, #1
   82cae:	d01e      	beq.n	82cee <__swsetup_r+0x62>
   82cb0:	6963      	ldr	r3, [r4, #20]
   82cb2:	2100      	movs	r1, #0
   82cb4:	425b      	negs	r3, r3
   82cb6:	61a3      	str	r3, [r4, #24]
   82cb8:	60a1      	str	r1, [r4, #8]
   82cba:	b1f2      	cbz	r2, 82cfa <__swsetup_r+0x6e>
   82cbc:	2000      	movs	r0, #0
   82cbe:	bd70      	pop	{r4, r5, r6, pc}
   82cc0:	06da      	lsls	r2, r3, #27
   82cc2:	d53a      	bpl.n	82d3a <__swsetup_r+0xae>
   82cc4:	075b      	lsls	r3, r3, #29
   82cc6:	d424      	bmi.n	82d12 <__swsetup_r+0x86>
   82cc8:	6922      	ldr	r2, [r4, #16]
   82cca:	f045 0308 	orr.w	r3, r5, #8
   82cce:	81a3      	strh	r3, [r4, #12]
   82cd0:	b29b      	uxth	r3, r3
   82cd2:	2a00      	cmp	r2, #0
   82cd4:	d1e9      	bne.n	82caa <__swsetup_r+0x1e>
   82cd6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82cda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82cde:	d0e4      	beq.n	82caa <__swsetup_r+0x1e>
   82ce0:	4630      	mov	r0, r6
   82ce2:	4621      	mov	r1, r4
   82ce4:	f000 fcce 	bl	83684 <__smakebuf_r>
   82ce8:	89a3      	ldrh	r3, [r4, #12]
   82cea:	6922      	ldr	r2, [r4, #16]
   82cec:	e7dd      	b.n	82caa <__swsetup_r+0x1e>
   82cee:	0798      	lsls	r0, r3, #30
   82cf0:	bf58      	it	pl
   82cf2:	6961      	ldrpl	r1, [r4, #20]
   82cf4:	60a1      	str	r1, [r4, #8]
   82cf6:	2a00      	cmp	r2, #0
   82cf8:	d1e0      	bne.n	82cbc <__swsetup_r+0x30>
   82cfa:	89a3      	ldrh	r3, [r4, #12]
   82cfc:	061a      	lsls	r2, r3, #24
   82cfe:	d5dd      	bpl.n	82cbc <__swsetup_r+0x30>
   82d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d04:	81a3      	strh	r3, [r4, #12]
   82d06:	f04f 30ff 	mov.w	r0, #4294967295
   82d0a:	bd70      	pop	{r4, r5, r6, pc}
   82d0c:	f000 f8f0 	bl	82ef0 <__sinit>
   82d10:	e7c5      	b.n	82c9e <__swsetup_r+0x12>
   82d12:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82d14:	b149      	cbz	r1, 82d2a <__swsetup_r+0x9e>
   82d16:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82d1a:	4299      	cmp	r1, r3
   82d1c:	d003      	beq.n	82d26 <__swsetup_r+0x9a>
   82d1e:	4630      	mov	r0, r6
   82d20:	f000 fa2a 	bl	83178 <_free_r>
   82d24:	89a5      	ldrh	r5, [r4, #12]
   82d26:	2300      	movs	r3, #0
   82d28:	6323      	str	r3, [r4, #48]	; 0x30
   82d2a:	6922      	ldr	r2, [r4, #16]
   82d2c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82d30:	2100      	movs	r1, #0
   82d32:	b2ad      	uxth	r5, r5
   82d34:	6022      	str	r2, [r4, #0]
   82d36:	6061      	str	r1, [r4, #4]
   82d38:	e7c7      	b.n	82cca <__swsetup_r+0x3e>
   82d3a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82d3e:	2309      	movs	r3, #9
   82d40:	6033      	str	r3, [r6, #0]
   82d42:	f04f 30ff 	mov.w	r0, #4294967295
   82d46:	81a5      	strh	r5, [r4, #12]
   82d48:	bd70      	pop	{r4, r5, r6, pc}
   82d4a:	bf00      	nop
   82d4c:	20070560 	.word	0x20070560

00082d50 <register_fini>:
   82d50:	4b02      	ldr	r3, [pc, #8]	; (82d5c <register_fini+0xc>)
   82d52:	b113      	cbz	r3, 82d5a <register_fini+0xa>
   82d54:	4802      	ldr	r0, [pc, #8]	; (82d60 <register_fini+0x10>)
   82d56:	f000 b805 	b.w	82d64 <atexit>
   82d5a:	4770      	bx	lr
   82d5c:	00000000 	.word	0x00000000
   82d60:	00082fed 	.word	0x00082fed

00082d64 <atexit>:
   82d64:	4601      	mov	r1, r0
   82d66:	2000      	movs	r0, #0
   82d68:	4602      	mov	r2, r0
   82d6a:	4603      	mov	r3, r0
   82d6c:	f001 bb76 	b.w	8445c <__register_exitproc>

00082d70 <__sflush_r>:
   82d70:	898b      	ldrh	r3, [r1, #12]
   82d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d76:	b29a      	uxth	r2, r3
   82d78:	460d      	mov	r5, r1
   82d7a:	0711      	lsls	r1, r2, #28
   82d7c:	4680      	mov	r8, r0
   82d7e:	d43c      	bmi.n	82dfa <__sflush_r+0x8a>
   82d80:	686a      	ldr	r2, [r5, #4]
   82d82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d86:	2a00      	cmp	r2, #0
   82d88:	81ab      	strh	r3, [r5, #12]
   82d8a:	dd59      	ble.n	82e40 <__sflush_r+0xd0>
   82d8c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82d8e:	2c00      	cmp	r4, #0
   82d90:	d04b      	beq.n	82e2a <__sflush_r+0xba>
   82d92:	b29b      	uxth	r3, r3
   82d94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82d98:	2100      	movs	r1, #0
   82d9a:	b292      	uxth	r2, r2
   82d9c:	f8d8 6000 	ldr.w	r6, [r8]
   82da0:	f8c8 1000 	str.w	r1, [r8]
   82da4:	2a00      	cmp	r2, #0
   82da6:	d04f      	beq.n	82e48 <__sflush_r+0xd8>
   82da8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82daa:	075f      	lsls	r7, r3, #29
   82dac:	d505      	bpl.n	82dba <__sflush_r+0x4a>
   82dae:	6869      	ldr	r1, [r5, #4]
   82db0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82db2:	1a52      	subs	r2, r2, r1
   82db4:	b10b      	cbz	r3, 82dba <__sflush_r+0x4a>
   82db6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82db8:	1ad2      	subs	r2, r2, r3
   82dba:	4640      	mov	r0, r8
   82dbc:	69e9      	ldr	r1, [r5, #28]
   82dbe:	2300      	movs	r3, #0
   82dc0:	47a0      	blx	r4
   82dc2:	1c44      	adds	r4, r0, #1
   82dc4:	d04a      	beq.n	82e5c <__sflush_r+0xec>
   82dc6:	89ab      	ldrh	r3, [r5, #12]
   82dc8:	692a      	ldr	r2, [r5, #16]
   82dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82dce:	b29b      	uxth	r3, r3
   82dd0:	2100      	movs	r1, #0
   82dd2:	602a      	str	r2, [r5, #0]
   82dd4:	04da      	lsls	r2, r3, #19
   82dd6:	81ab      	strh	r3, [r5, #12]
   82dd8:	6069      	str	r1, [r5, #4]
   82dda:	d44c      	bmi.n	82e76 <__sflush_r+0x106>
   82ddc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82dde:	f8c8 6000 	str.w	r6, [r8]
   82de2:	b311      	cbz	r1, 82e2a <__sflush_r+0xba>
   82de4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82de8:	4299      	cmp	r1, r3
   82dea:	d002      	beq.n	82df2 <__sflush_r+0x82>
   82dec:	4640      	mov	r0, r8
   82dee:	f000 f9c3 	bl	83178 <_free_r>
   82df2:	2000      	movs	r0, #0
   82df4:	6328      	str	r0, [r5, #48]	; 0x30
   82df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82dfa:	692e      	ldr	r6, [r5, #16]
   82dfc:	b1ae      	cbz	r6, 82e2a <__sflush_r+0xba>
   82dfe:	0791      	lsls	r1, r2, #30
   82e00:	682c      	ldr	r4, [r5, #0]
   82e02:	bf0c      	ite	eq
   82e04:	696b      	ldreq	r3, [r5, #20]
   82e06:	2300      	movne	r3, #0
   82e08:	602e      	str	r6, [r5, #0]
   82e0a:	1ba4      	subs	r4, r4, r6
   82e0c:	60ab      	str	r3, [r5, #8]
   82e0e:	e00a      	b.n	82e26 <__sflush_r+0xb6>
   82e10:	4632      	mov	r2, r6
   82e12:	4623      	mov	r3, r4
   82e14:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82e16:	4640      	mov	r0, r8
   82e18:	69e9      	ldr	r1, [r5, #28]
   82e1a:	47b8      	blx	r7
   82e1c:	2800      	cmp	r0, #0
   82e1e:	ebc0 0404 	rsb	r4, r0, r4
   82e22:	4406      	add	r6, r0
   82e24:	dd04      	ble.n	82e30 <__sflush_r+0xc0>
   82e26:	2c00      	cmp	r4, #0
   82e28:	dcf2      	bgt.n	82e10 <__sflush_r+0xa0>
   82e2a:	2000      	movs	r0, #0
   82e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e30:	89ab      	ldrh	r3, [r5, #12]
   82e32:	f04f 30ff 	mov.w	r0, #4294967295
   82e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82e3a:	81ab      	strh	r3, [r5, #12]
   82e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e40:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82e42:	2a00      	cmp	r2, #0
   82e44:	dca2      	bgt.n	82d8c <__sflush_r+0x1c>
   82e46:	e7f0      	b.n	82e2a <__sflush_r+0xba>
   82e48:	2301      	movs	r3, #1
   82e4a:	4640      	mov	r0, r8
   82e4c:	69e9      	ldr	r1, [r5, #28]
   82e4e:	47a0      	blx	r4
   82e50:	1c43      	adds	r3, r0, #1
   82e52:	4602      	mov	r2, r0
   82e54:	d01e      	beq.n	82e94 <__sflush_r+0x124>
   82e56:	89ab      	ldrh	r3, [r5, #12]
   82e58:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82e5a:	e7a6      	b.n	82daa <__sflush_r+0x3a>
   82e5c:	f8d8 3000 	ldr.w	r3, [r8]
   82e60:	b95b      	cbnz	r3, 82e7a <__sflush_r+0x10a>
   82e62:	89aa      	ldrh	r2, [r5, #12]
   82e64:	6929      	ldr	r1, [r5, #16]
   82e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82e6a:	b292      	uxth	r2, r2
   82e6c:	606b      	str	r3, [r5, #4]
   82e6e:	04d3      	lsls	r3, r2, #19
   82e70:	81aa      	strh	r2, [r5, #12]
   82e72:	6029      	str	r1, [r5, #0]
   82e74:	d5b2      	bpl.n	82ddc <__sflush_r+0x6c>
   82e76:	6528      	str	r0, [r5, #80]	; 0x50
   82e78:	e7b0      	b.n	82ddc <__sflush_r+0x6c>
   82e7a:	2b1d      	cmp	r3, #29
   82e7c:	d001      	beq.n	82e82 <__sflush_r+0x112>
   82e7e:	2b16      	cmp	r3, #22
   82e80:	d113      	bne.n	82eaa <__sflush_r+0x13a>
   82e82:	89a9      	ldrh	r1, [r5, #12]
   82e84:	692b      	ldr	r3, [r5, #16]
   82e86:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82e8a:	2200      	movs	r2, #0
   82e8c:	81a9      	strh	r1, [r5, #12]
   82e8e:	602b      	str	r3, [r5, #0]
   82e90:	606a      	str	r2, [r5, #4]
   82e92:	e7a3      	b.n	82ddc <__sflush_r+0x6c>
   82e94:	f8d8 3000 	ldr.w	r3, [r8]
   82e98:	2b00      	cmp	r3, #0
   82e9a:	d0dc      	beq.n	82e56 <__sflush_r+0xe6>
   82e9c:	2b1d      	cmp	r3, #29
   82e9e:	d001      	beq.n	82ea4 <__sflush_r+0x134>
   82ea0:	2b16      	cmp	r3, #22
   82ea2:	d1c5      	bne.n	82e30 <__sflush_r+0xc0>
   82ea4:	f8c8 6000 	str.w	r6, [r8]
   82ea8:	e7bf      	b.n	82e2a <__sflush_r+0xba>
   82eaa:	89ab      	ldrh	r3, [r5, #12]
   82eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82eb0:	81ab      	strh	r3, [r5, #12]
   82eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82eb6:	bf00      	nop

00082eb8 <_fflush_r>:
   82eb8:	b510      	push	{r4, lr}
   82eba:	4604      	mov	r4, r0
   82ebc:	b082      	sub	sp, #8
   82ebe:	b108      	cbz	r0, 82ec4 <_fflush_r+0xc>
   82ec0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82ec2:	b153      	cbz	r3, 82eda <_fflush_r+0x22>
   82ec4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82ec8:	b908      	cbnz	r0, 82ece <_fflush_r+0x16>
   82eca:	b002      	add	sp, #8
   82ecc:	bd10      	pop	{r4, pc}
   82ece:	4620      	mov	r0, r4
   82ed0:	b002      	add	sp, #8
   82ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ed6:	f7ff bf4b 	b.w	82d70 <__sflush_r>
   82eda:	9101      	str	r1, [sp, #4]
   82edc:	f000 f808 	bl	82ef0 <__sinit>
   82ee0:	9901      	ldr	r1, [sp, #4]
   82ee2:	e7ef      	b.n	82ec4 <_fflush_r+0xc>

00082ee4 <_cleanup_r>:
   82ee4:	4901      	ldr	r1, [pc, #4]	; (82eec <_cleanup_r+0x8>)
   82ee6:	f000 bb9f 	b.w	83628 <_fwalk>
   82eea:	bf00      	nop
   82eec:	000845a9 	.word	0x000845a9

00082ef0 <__sinit>:
   82ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ef4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82ef6:	b083      	sub	sp, #12
   82ef8:	4607      	mov	r7, r0
   82efa:	2c00      	cmp	r4, #0
   82efc:	d165      	bne.n	82fca <__sinit+0xda>
   82efe:	687d      	ldr	r5, [r7, #4]
   82f00:	4833      	ldr	r0, [pc, #204]	; (82fd0 <__sinit+0xe0>)
   82f02:	2304      	movs	r3, #4
   82f04:	2103      	movs	r1, #3
   82f06:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
   82f0c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82f10:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82f14:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82f18:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82f1c:	81ab      	strh	r3, [r5, #12]
   82f1e:	602c      	str	r4, [r5, #0]
   82f20:	606c      	str	r4, [r5, #4]
   82f22:	60ac      	str	r4, [r5, #8]
   82f24:	666c      	str	r4, [r5, #100]	; 0x64
   82f26:	81ec      	strh	r4, [r5, #14]
   82f28:	612c      	str	r4, [r5, #16]
   82f2a:	616c      	str	r4, [r5, #20]
   82f2c:	61ac      	str	r4, [r5, #24]
   82f2e:	4621      	mov	r1, r4
   82f30:	2208      	movs	r2, #8
   82f32:	f7fe fed3 	bl	81cdc <memset>
   82f36:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82fd4 <__sinit+0xe4>
   82f3a:	68be      	ldr	r6, [r7, #8]
   82f3c:	f8df a098 	ldr.w	sl, [pc, #152]	; 82fd8 <__sinit+0xe8>
   82f40:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82fdc <__sinit+0xec>
   82f44:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82fe0 <__sinit+0xf0>
   82f48:	2301      	movs	r3, #1
   82f4a:	2209      	movs	r2, #9
   82f4c:	61ed      	str	r5, [r5, #28]
   82f4e:	f8c5 b020 	str.w	fp, [r5, #32]
   82f52:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82f56:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82f5a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82f5e:	4621      	mov	r1, r4
   82f60:	81f3      	strh	r3, [r6, #14]
   82f62:	81b2      	strh	r2, [r6, #12]
   82f64:	6034      	str	r4, [r6, #0]
   82f66:	6074      	str	r4, [r6, #4]
   82f68:	60b4      	str	r4, [r6, #8]
   82f6a:	6674      	str	r4, [r6, #100]	; 0x64
   82f6c:	6134      	str	r4, [r6, #16]
   82f6e:	6174      	str	r4, [r6, #20]
   82f70:	61b4      	str	r4, [r6, #24]
   82f72:	2208      	movs	r2, #8
   82f74:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82f78:	9301      	str	r3, [sp, #4]
   82f7a:	f7fe feaf 	bl	81cdc <memset>
   82f7e:	68fd      	ldr	r5, [r7, #12]
   82f80:	2012      	movs	r0, #18
   82f82:	2202      	movs	r2, #2
   82f84:	61f6      	str	r6, [r6, #28]
   82f86:	f8c6 b020 	str.w	fp, [r6, #32]
   82f8a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82f8e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82f92:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82f96:	4621      	mov	r1, r4
   82f98:	81a8      	strh	r0, [r5, #12]
   82f9a:	81ea      	strh	r2, [r5, #14]
   82f9c:	602c      	str	r4, [r5, #0]
   82f9e:	606c      	str	r4, [r5, #4]
   82fa0:	60ac      	str	r4, [r5, #8]
   82fa2:	666c      	str	r4, [r5, #100]	; 0x64
   82fa4:	612c      	str	r4, [r5, #16]
   82fa6:	616c      	str	r4, [r5, #20]
   82fa8:	61ac      	str	r4, [r5, #24]
   82faa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82fae:	2208      	movs	r2, #8
   82fb0:	f7fe fe94 	bl	81cdc <memset>
   82fb4:	9b01      	ldr	r3, [sp, #4]
   82fb6:	61ed      	str	r5, [r5, #28]
   82fb8:	f8c5 b020 	str.w	fp, [r5, #32]
   82fbc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82fc0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82fc4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   82fca:	b003      	add	sp, #12
   82fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fd0:	00082ee5 	.word	0x00082ee5
   82fd4:	000842e5 	.word	0x000842e5
   82fd8:	00084309 	.word	0x00084309
   82fdc:	00084341 	.word	0x00084341
   82fe0:	00084361 	.word	0x00084361

00082fe4 <__sfp_lock_acquire>:
   82fe4:	4770      	bx	lr
   82fe6:	bf00      	nop

00082fe8 <__sfp_lock_release>:
   82fe8:	4770      	bx	lr
   82fea:	bf00      	nop

00082fec <__libc_fini_array>:
   82fec:	b538      	push	{r3, r4, r5, lr}
   82fee:	4d09      	ldr	r5, [pc, #36]	; (83014 <__libc_fini_array+0x28>)
   82ff0:	4c09      	ldr	r4, [pc, #36]	; (83018 <__libc_fini_array+0x2c>)
   82ff2:	1b64      	subs	r4, r4, r5
   82ff4:	10a4      	asrs	r4, r4, #2
   82ff6:	bf18      	it	ne
   82ff8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82ffc:	d005      	beq.n	8300a <__libc_fini_array+0x1e>
   82ffe:	3c01      	subs	r4, #1
   83000:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83004:	4798      	blx	r3
   83006:	2c00      	cmp	r4, #0
   83008:	d1f9      	bne.n	82ffe <__libc_fini_array+0x12>
   8300a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8300e:	f001 bf63 	b.w	84ed8 <_fini>
   83012:	bf00      	nop
   83014:	00084ee4 	.word	0x00084ee4
   83018:	00084ee8 	.word	0x00084ee8

0008301c <_fputwc_r>:
   8301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83020:	8993      	ldrh	r3, [r2, #12]
   83022:	460f      	mov	r7, r1
   83024:	0499      	lsls	r1, r3, #18
   83026:	b082      	sub	sp, #8
   83028:	4614      	mov	r4, r2
   8302a:	4680      	mov	r8, r0
   8302c:	d406      	bmi.n	8303c <_fputwc_r+0x20>
   8302e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83030:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83038:	81a3      	strh	r3, [r4, #12]
   8303a:	6662      	str	r2, [r4, #100]	; 0x64
   8303c:	f000 fb1c 	bl	83678 <__locale_mb_cur_max>
   83040:	2801      	cmp	r0, #1
   83042:	d03e      	beq.n	830c2 <_fputwc_r+0xa6>
   83044:	463a      	mov	r2, r7
   83046:	4640      	mov	r0, r8
   83048:	a901      	add	r1, sp, #4
   8304a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8304e:	f001 f9bb 	bl	843c8 <_wcrtomb_r>
   83052:	1c42      	adds	r2, r0, #1
   83054:	4606      	mov	r6, r0
   83056:	d02d      	beq.n	830b4 <_fputwc_r+0x98>
   83058:	2800      	cmp	r0, #0
   8305a:	d03a      	beq.n	830d2 <_fputwc_r+0xb6>
   8305c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83060:	2500      	movs	r5, #0
   83062:	e009      	b.n	83078 <_fputwc_r+0x5c>
   83064:	6823      	ldr	r3, [r4, #0]
   83066:	7019      	strb	r1, [r3, #0]
   83068:	6823      	ldr	r3, [r4, #0]
   8306a:	3301      	adds	r3, #1
   8306c:	6023      	str	r3, [r4, #0]
   8306e:	3501      	adds	r5, #1
   83070:	42b5      	cmp	r5, r6
   83072:	d22e      	bcs.n	830d2 <_fputwc_r+0xb6>
   83074:	ab01      	add	r3, sp, #4
   83076:	5ce9      	ldrb	r1, [r5, r3]
   83078:	68a3      	ldr	r3, [r4, #8]
   8307a:	3b01      	subs	r3, #1
   8307c:	2b00      	cmp	r3, #0
   8307e:	60a3      	str	r3, [r4, #8]
   83080:	daf0      	bge.n	83064 <_fputwc_r+0x48>
   83082:	69a2      	ldr	r2, [r4, #24]
   83084:	4293      	cmp	r3, r2
   83086:	db06      	blt.n	83096 <_fputwc_r+0x7a>
   83088:	6823      	ldr	r3, [r4, #0]
   8308a:	7019      	strb	r1, [r3, #0]
   8308c:	6823      	ldr	r3, [r4, #0]
   8308e:	7819      	ldrb	r1, [r3, #0]
   83090:	3301      	adds	r3, #1
   83092:	290a      	cmp	r1, #10
   83094:	d1ea      	bne.n	8306c <_fputwc_r+0x50>
   83096:	4640      	mov	r0, r8
   83098:	4622      	mov	r2, r4
   8309a:	f7ff fda3 	bl	82be4 <__swbuf_r>
   8309e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   830a2:	4258      	negs	r0, r3
   830a4:	4158      	adcs	r0, r3
   830a6:	2800      	cmp	r0, #0
   830a8:	d0e1      	beq.n	8306e <_fputwc_r+0x52>
   830aa:	f04f 30ff 	mov.w	r0, #4294967295
   830ae:	b002      	add	sp, #8
   830b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830b4:	89a3      	ldrh	r3, [r4, #12]
   830b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   830ba:	81a3      	strh	r3, [r4, #12]
   830bc:	b002      	add	sp, #8
   830be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830c2:	1e7b      	subs	r3, r7, #1
   830c4:	2bfe      	cmp	r3, #254	; 0xfe
   830c6:	d8bd      	bhi.n	83044 <_fputwc_r+0x28>
   830c8:	b2f9      	uxtb	r1, r7
   830ca:	4606      	mov	r6, r0
   830cc:	f88d 1004 	strb.w	r1, [sp, #4]
   830d0:	e7c6      	b.n	83060 <_fputwc_r+0x44>
   830d2:	4638      	mov	r0, r7
   830d4:	b002      	add	sp, #8
   830d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830da:	bf00      	nop

000830dc <_malloc_trim_r>:
   830dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   830de:	4d23      	ldr	r5, [pc, #140]	; (8316c <_malloc_trim_r+0x90>)
   830e0:	460f      	mov	r7, r1
   830e2:	4604      	mov	r4, r0
   830e4:	f000 ff08 	bl	83ef8 <__malloc_lock>
   830e8:	68ab      	ldr	r3, [r5, #8]
   830ea:	685e      	ldr	r6, [r3, #4]
   830ec:	f026 0603 	bic.w	r6, r6, #3
   830f0:	1bf1      	subs	r1, r6, r7
   830f2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   830f6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   830fa:	f021 010f 	bic.w	r1, r1, #15
   830fe:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83102:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83106:	db07      	blt.n	83118 <_malloc_trim_r+0x3c>
   83108:	4620      	mov	r0, r4
   8310a:	2100      	movs	r1, #0
   8310c:	f001 f8d8 	bl	842c0 <_sbrk_r>
   83110:	68ab      	ldr	r3, [r5, #8]
   83112:	4433      	add	r3, r6
   83114:	4298      	cmp	r0, r3
   83116:	d004      	beq.n	83122 <_malloc_trim_r+0x46>
   83118:	4620      	mov	r0, r4
   8311a:	f000 feef 	bl	83efc <__malloc_unlock>
   8311e:	2000      	movs	r0, #0
   83120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83122:	4620      	mov	r0, r4
   83124:	4279      	negs	r1, r7
   83126:	f001 f8cb 	bl	842c0 <_sbrk_r>
   8312a:	3001      	adds	r0, #1
   8312c:	d00d      	beq.n	8314a <_malloc_trim_r+0x6e>
   8312e:	4b10      	ldr	r3, [pc, #64]	; (83170 <_malloc_trim_r+0x94>)
   83130:	68aa      	ldr	r2, [r5, #8]
   83132:	6819      	ldr	r1, [r3, #0]
   83134:	1bf6      	subs	r6, r6, r7
   83136:	f046 0601 	orr.w	r6, r6, #1
   8313a:	4620      	mov	r0, r4
   8313c:	1bc9      	subs	r1, r1, r7
   8313e:	6056      	str	r6, [r2, #4]
   83140:	6019      	str	r1, [r3, #0]
   83142:	f000 fedb 	bl	83efc <__malloc_unlock>
   83146:	2001      	movs	r0, #1
   83148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8314a:	4620      	mov	r0, r4
   8314c:	2100      	movs	r1, #0
   8314e:	f001 f8b7 	bl	842c0 <_sbrk_r>
   83152:	68ab      	ldr	r3, [r5, #8]
   83154:	1ac2      	subs	r2, r0, r3
   83156:	2a0f      	cmp	r2, #15
   83158:	ddde      	ble.n	83118 <_malloc_trim_r+0x3c>
   8315a:	4d06      	ldr	r5, [pc, #24]	; (83174 <_malloc_trim_r+0x98>)
   8315c:	4904      	ldr	r1, [pc, #16]	; (83170 <_malloc_trim_r+0x94>)
   8315e:	682d      	ldr	r5, [r5, #0]
   83160:	f042 0201 	orr.w	r2, r2, #1
   83164:	1b40      	subs	r0, r0, r5
   83166:	605a      	str	r2, [r3, #4]
   83168:	6008      	str	r0, [r1, #0]
   8316a:	e7d5      	b.n	83118 <_malloc_trim_r+0x3c>
   8316c:	20070588 	.word	0x20070588
   83170:	20070ad8 	.word	0x20070ad8
   83174:	20070994 	.word	0x20070994

00083178 <_free_r>:
   83178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8317c:	460d      	mov	r5, r1
   8317e:	4606      	mov	r6, r0
   83180:	2900      	cmp	r1, #0
   83182:	d055      	beq.n	83230 <_free_r+0xb8>
   83184:	f000 feb8 	bl	83ef8 <__malloc_lock>
   83188:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8318c:	f8df c170 	ldr.w	ip, [pc, #368]	; 83300 <_free_r+0x188>
   83190:	f1a5 0408 	sub.w	r4, r5, #8
   83194:	f021 0301 	bic.w	r3, r1, #1
   83198:	18e2      	adds	r2, r4, r3
   8319a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8319e:	6857      	ldr	r7, [r2, #4]
   831a0:	4290      	cmp	r0, r2
   831a2:	f027 0703 	bic.w	r7, r7, #3
   831a6:	d068      	beq.n	8327a <_free_r+0x102>
   831a8:	f011 0101 	ands.w	r1, r1, #1
   831ac:	6057      	str	r7, [r2, #4]
   831ae:	d032      	beq.n	83216 <_free_r+0x9e>
   831b0:	2100      	movs	r1, #0
   831b2:	19d0      	adds	r0, r2, r7
   831b4:	6840      	ldr	r0, [r0, #4]
   831b6:	07c0      	lsls	r0, r0, #31
   831b8:	d406      	bmi.n	831c8 <_free_r+0x50>
   831ba:	443b      	add	r3, r7
   831bc:	6890      	ldr	r0, [r2, #8]
   831be:	2900      	cmp	r1, #0
   831c0:	d04d      	beq.n	8325e <_free_r+0xe6>
   831c2:	68d2      	ldr	r2, [r2, #12]
   831c4:	60c2      	str	r2, [r0, #12]
   831c6:	6090      	str	r0, [r2, #8]
   831c8:	f043 0201 	orr.w	r2, r3, #1
   831cc:	6062      	str	r2, [r4, #4]
   831ce:	50e3      	str	r3, [r4, r3]
   831d0:	b9e1      	cbnz	r1, 8320c <_free_r+0x94>
   831d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   831d6:	d32d      	bcc.n	83234 <_free_r+0xbc>
   831d8:	0a5a      	lsrs	r2, r3, #9
   831da:	2a04      	cmp	r2, #4
   831dc:	d869      	bhi.n	832b2 <_free_r+0x13a>
   831de:	0998      	lsrs	r0, r3, #6
   831e0:	3038      	adds	r0, #56	; 0x38
   831e2:	0041      	lsls	r1, r0, #1
   831e4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   831e8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   831ec:	4944      	ldr	r1, [pc, #272]	; (83300 <_free_r+0x188>)
   831ee:	4562      	cmp	r2, ip
   831f0:	d065      	beq.n	832be <_free_r+0x146>
   831f2:	6851      	ldr	r1, [r2, #4]
   831f4:	f021 0103 	bic.w	r1, r1, #3
   831f8:	428b      	cmp	r3, r1
   831fa:	d202      	bcs.n	83202 <_free_r+0x8a>
   831fc:	6892      	ldr	r2, [r2, #8]
   831fe:	4594      	cmp	ip, r2
   83200:	d1f7      	bne.n	831f2 <_free_r+0x7a>
   83202:	68d3      	ldr	r3, [r2, #12]
   83204:	60e3      	str	r3, [r4, #12]
   83206:	60a2      	str	r2, [r4, #8]
   83208:	609c      	str	r4, [r3, #8]
   8320a:	60d4      	str	r4, [r2, #12]
   8320c:	4630      	mov	r0, r6
   8320e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83212:	f000 be73 	b.w	83efc <__malloc_unlock>
   83216:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8321a:	f10c 0808 	add.w	r8, ip, #8
   8321e:	1b64      	subs	r4, r4, r5
   83220:	68a0      	ldr	r0, [r4, #8]
   83222:	442b      	add	r3, r5
   83224:	4540      	cmp	r0, r8
   83226:	d042      	beq.n	832ae <_free_r+0x136>
   83228:	68e5      	ldr	r5, [r4, #12]
   8322a:	60c5      	str	r5, [r0, #12]
   8322c:	60a8      	str	r0, [r5, #8]
   8322e:	e7c0      	b.n	831b2 <_free_r+0x3a>
   83230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83234:	08db      	lsrs	r3, r3, #3
   83236:	109a      	asrs	r2, r3, #2
   83238:	2001      	movs	r0, #1
   8323a:	4090      	lsls	r0, r2
   8323c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83240:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83244:	689a      	ldr	r2, [r3, #8]
   83246:	4301      	orrs	r1, r0
   83248:	60a2      	str	r2, [r4, #8]
   8324a:	60e3      	str	r3, [r4, #12]
   8324c:	f8cc 1004 	str.w	r1, [ip, #4]
   83250:	4630      	mov	r0, r6
   83252:	609c      	str	r4, [r3, #8]
   83254:	60d4      	str	r4, [r2, #12]
   83256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8325a:	f000 be4f 	b.w	83efc <__malloc_unlock>
   8325e:	4d29      	ldr	r5, [pc, #164]	; (83304 <_free_r+0x18c>)
   83260:	42a8      	cmp	r0, r5
   83262:	d1ae      	bne.n	831c2 <_free_r+0x4a>
   83264:	f043 0201 	orr.w	r2, r3, #1
   83268:	f8cc 4014 	str.w	r4, [ip, #20]
   8326c:	f8cc 4010 	str.w	r4, [ip, #16]
   83270:	60e0      	str	r0, [r4, #12]
   83272:	60a0      	str	r0, [r4, #8]
   83274:	6062      	str	r2, [r4, #4]
   83276:	50e3      	str	r3, [r4, r3]
   83278:	e7c8      	b.n	8320c <_free_r+0x94>
   8327a:	441f      	add	r7, r3
   8327c:	07cb      	lsls	r3, r1, #31
   8327e:	d407      	bmi.n	83290 <_free_r+0x118>
   83280:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83284:	1a64      	subs	r4, r4, r1
   83286:	68e3      	ldr	r3, [r4, #12]
   83288:	68a2      	ldr	r2, [r4, #8]
   8328a:	440f      	add	r7, r1
   8328c:	60d3      	str	r3, [r2, #12]
   8328e:	609a      	str	r2, [r3, #8]
   83290:	4b1d      	ldr	r3, [pc, #116]	; (83308 <_free_r+0x190>)
   83292:	f047 0201 	orr.w	r2, r7, #1
   83296:	681b      	ldr	r3, [r3, #0]
   83298:	6062      	str	r2, [r4, #4]
   8329a:	429f      	cmp	r7, r3
   8329c:	f8cc 4008 	str.w	r4, [ip, #8]
   832a0:	d3b4      	bcc.n	8320c <_free_r+0x94>
   832a2:	4b1a      	ldr	r3, [pc, #104]	; (8330c <_free_r+0x194>)
   832a4:	4630      	mov	r0, r6
   832a6:	6819      	ldr	r1, [r3, #0]
   832a8:	f7ff ff18 	bl	830dc <_malloc_trim_r>
   832ac:	e7ae      	b.n	8320c <_free_r+0x94>
   832ae:	2101      	movs	r1, #1
   832b0:	e77f      	b.n	831b2 <_free_r+0x3a>
   832b2:	2a14      	cmp	r2, #20
   832b4:	d80b      	bhi.n	832ce <_free_r+0x156>
   832b6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   832ba:	0041      	lsls	r1, r0, #1
   832bc:	e792      	b.n	831e4 <_free_r+0x6c>
   832be:	1080      	asrs	r0, r0, #2
   832c0:	2501      	movs	r5, #1
   832c2:	4085      	lsls	r5, r0
   832c4:	6848      	ldr	r0, [r1, #4]
   832c6:	4613      	mov	r3, r2
   832c8:	4328      	orrs	r0, r5
   832ca:	6048      	str	r0, [r1, #4]
   832cc:	e79a      	b.n	83204 <_free_r+0x8c>
   832ce:	2a54      	cmp	r2, #84	; 0x54
   832d0:	d803      	bhi.n	832da <_free_r+0x162>
   832d2:	0b18      	lsrs	r0, r3, #12
   832d4:	306e      	adds	r0, #110	; 0x6e
   832d6:	0041      	lsls	r1, r0, #1
   832d8:	e784      	b.n	831e4 <_free_r+0x6c>
   832da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832de:	d803      	bhi.n	832e8 <_free_r+0x170>
   832e0:	0bd8      	lsrs	r0, r3, #15
   832e2:	3077      	adds	r0, #119	; 0x77
   832e4:	0041      	lsls	r1, r0, #1
   832e6:	e77d      	b.n	831e4 <_free_r+0x6c>
   832e8:	f240 5154 	movw	r1, #1364	; 0x554
   832ec:	428a      	cmp	r2, r1
   832ee:	d803      	bhi.n	832f8 <_free_r+0x180>
   832f0:	0c98      	lsrs	r0, r3, #18
   832f2:	307c      	adds	r0, #124	; 0x7c
   832f4:	0041      	lsls	r1, r0, #1
   832f6:	e775      	b.n	831e4 <_free_r+0x6c>
   832f8:	21fc      	movs	r1, #252	; 0xfc
   832fa:	207e      	movs	r0, #126	; 0x7e
   832fc:	e772      	b.n	831e4 <_free_r+0x6c>
   832fe:	bf00      	nop
   83300:	20070588 	.word	0x20070588
   83304:	20070590 	.word	0x20070590
   83308:	20070990 	.word	0x20070990
   8330c:	20070ad4 	.word	0x20070ad4

00083310 <__sfvwrite_r>:
   83310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83314:	6893      	ldr	r3, [r2, #8]
   83316:	b083      	sub	sp, #12
   83318:	4616      	mov	r6, r2
   8331a:	4681      	mov	r9, r0
   8331c:	460c      	mov	r4, r1
   8331e:	b32b      	cbz	r3, 8336c <__sfvwrite_r+0x5c>
   83320:	898b      	ldrh	r3, [r1, #12]
   83322:	0719      	lsls	r1, r3, #28
   83324:	d526      	bpl.n	83374 <__sfvwrite_r+0x64>
   83326:	6922      	ldr	r2, [r4, #16]
   83328:	b322      	cbz	r2, 83374 <__sfvwrite_r+0x64>
   8332a:	f003 0202 	and.w	r2, r3, #2
   8332e:	b292      	uxth	r2, r2
   83330:	6835      	ldr	r5, [r6, #0]
   83332:	2a00      	cmp	r2, #0
   83334:	d02c      	beq.n	83390 <__sfvwrite_r+0x80>
   83336:	f04f 0a00 	mov.w	sl, #0
   8333a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 83624 <__sfvwrite_r+0x314>
   8333e:	46d0      	mov	r8, sl
   83340:	45d8      	cmp	r8, fp
   83342:	bf34      	ite	cc
   83344:	4643      	movcc	r3, r8
   83346:	465b      	movcs	r3, fp
   83348:	4652      	mov	r2, sl
   8334a:	4648      	mov	r0, r9
   8334c:	f1b8 0f00 	cmp.w	r8, #0
   83350:	d04f      	beq.n	833f2 <__sfvwrite_r+0xe2>
   83352:	69e1      	ldr	r1, [r4, #28]
   83354:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83356:	47b8      	blx	r7
   83358:	2800      	cmp	r0, #0
   8335a:	dd56      	ble.n	8340a <__sfvwrite_r+0xfa>
   8335c:	68b3      	ldr	r3, [r6, #8]
   8335e:	4482      	add	sl, r0
   83360:	1a1b      	subs	r3, r3, r0
   83362:	ebc0 0808 	rsb	r8, r0, r8
   83366:	60b3      	str	r3, [r6, #8]
   83368:	2b00      	cmp	r3, #0
   8336a:	d1e9      	bne.n	83340 <__sfvwrite_r+0x30>
   8336c:	2000      	movs	r0, #0
   8336e:	b003      	add	sp, #12
   83370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83374:	4648      	mov	r0, r9
   83376:	4621      	mov	r1, r4
   83378:	f7ff fc88 	bl	82c8c <__swsetup_r>
   8337c:	2800      	cmp	r0, #0
   8337e:	f040 8148 	bne.w	83612 <__sfvwrite_r+0x302>
   83382:	89a3      	ldrh	r3, [r4, #12]
   83384:	6835      	ldr	r5, [r6, #0]
   83386:	f003 0202 	and.w	r2, r3, #2
   8338a:	b292      	uxth	r2, r2
   8338c:	2a00      	cmp	r2, #0
   8338e:	d1d2      	bne.n	83336 <__sfvwrite_r+0x26>
   83390:	f013 0a01 	ands.w	sl, r3, #1
   83394:	d142      	bne.n	8341c <__sfvwrite_r+0x10c>
   83396:	46d0      	mov	r8, sl
   83398:	f1b8 0f00 	cmp.w	r8, #0
   8339c:	d023      	beq.n	833e6 <__sfvwrite_r+0xd6>
   8339e:	059a      	lsls	r2, r3, #22
   833a0:	68a7      	ldr	r7, [r4, #8]
   833a2:	d576      	bpl.n	83492 <__sfvwrite_r+0x182>
   833a4:	45b8      	cmp	r8, r7
   833a6:	f0c0 80a4 	bcc.w	834f2 <__sfvwrite_r+0x1e2>
   833aa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   833ae:	f040 80b2 	bne.w	83516 <__sfvwrite_r+0x206>
   833b2:	6820      	ldr	r0, [r4, #0]
   833b4:	46bb      	mov	fp, r7
   833b6:	4651      	mov	r1, sl
   833b8:	465a      	mov	r2, fp
   833ba:	f000 fd37 	bl	83e2c <memmove>
   833be:	68a2      	ldr	r2, [r4, #8]
   833c0:	6821      	ldr	r1, [r4, #0]
   833c2:	1bd2      	subs	r2, r2, r7
   833c4:	eb01 030b 	add.w	r3, r1, fp
   833c8:	60a2      	str	r2, [r4, #8]
   833ca:	6023      	str	r3, [r4, #0]
   833cc:	4642      	mov	r2, r8
   833ce:	68b3      	ldr	r3, [r6, #8]
   833d0:	4492      	add	sl, r2
   833d2:	1a9b      	subs	r3, r3, r2
   833d4:	ebc2 0808 	rsb	r8, r2, r8
   833d8:	60b3      	str	r3, [r6, #8]
   833da:	2b00      	cmp	r3, #0
   833dc:	d0c6      	beq.n	8336c <__sfvwrite_r+0x5c>
   833de:	89a3      	ldrh	r3, [r4, #12]
   833e0:	f1b8 0f00 	cmp.w	r8, #0
   833e4:	d1db      	bne.n	8339e <__sfvwrite_r+0x8e>
   833e6:	f8d5 a000 	ldr.w	sl, [r5]
   833ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
   833ee:	3508      	adds	r5, #8
   833f0:	e7d2      	b.n	83398 <__sfvwrite_r+0x88>
   833f2:	f8d5 a000 	ldr.w	sl, [r5]
   833f6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   833fa:	3508      	adds	r5, #8
   833fc:	e7a0      	b.n	83340 <__sfvwrite_r+0x30>
   833fe:	4648      	mov	r0, r9
   83400:	4621      	mov	r1, r4
   83402:	f7ff fd59 	bl	82eb8 <_fflush_r>
   83406:	2800      	cmp	r0, #0
   83408:	d059      	beq.n	834be <__sfvwrite_r+0x1ae>
   8340a:	89a3      	ldrh	r3, [r4, #12]
   8340c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83410:	f04f 30ff 	mov.w	r0, #4294967295
   83414:	81a3      	strh	r3, [r4, #12]
   83416:	b003      	add	sp, #12
   83418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8341c:	4692      	mov	sl, r2
   8341e:	9201      	str	r2, [sp, #4]
   83420:	4693      	mov	fp, r2
   83422:	4690      	mov	r8, r2
   83424:	f1b8 0f00 	cmp.w	r8, #0
   83428:	d02b      	beq.n	83482 <__sfvwrite_r+0x172>
   8342a:	9f01      	ldr	r7, [sp, #4]
   8342c:	2f00      	cmp	r7, #0
   8342e:	d064      	beq.n	834fa <__sfvwrite_r+0x1ea>
   83430:	6820      	ldr	r0, [r4, #0]
   83432:	6921      	ldr	r1, [r4, #16]
   83434:	45c2      	cmp	sl, r8
   83436:	bf34      	ite	cc
   83438:	4653      	movcc	r3, sl
   8343a:	4643      	movcs	r3, r8
   8343c:	4288      	cmp	r0, r1
   8343e:	461f      	mov	r7, r3
   83440:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83444:	6962      	ldr	r2, [r4, #20]
   83446:	d903      	bls.n	83450 <__sfvwrite_r+0x140>
   83448:	4494      	add	ip, r2
   8344a:	4563      	cmp	r3, ip
   8344c:	f300 80ae 	bgt.w	835ac <__sfvwrite_r+0x29c>
   83450:	4293      	cmp	r3, r2
   83452:	db36      	blt.n	834c2 <__sfvwrite_r+0x1b2>
   83454:	4613      	mov	r3, r2
   83456:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83458:	4648      	mov	r0, r9
   8345a:	69e1      	ldr	r1, [r4, #28]
   8345c:	465a      	mov	r2, fp
   8345e:	47b8      	blx	r7
   83460:	1e07      	subs	r7, r0, #0
   83462:	ddd2      	ble.n	8340a <__sfvwrite_r+0xfa>
   83464:	ebba 0a07 	subs.w	sl, sl, r7
   83468:	d03a      	beq.n	834e0 <__sfvwrite_r+0x1d0>
   8346a:	68b3      	ldr	r3, [r6, #8]
   8346c:	44bb      	add	fp, r7
   8346e:	1bdb      	subs	r3, r3, r7
   83470:	ebc7 0808 	rsb	r8, r7, r8
   83474:	60b3      	str	r3, [r6, #8]
   83476:	2b00      	cmp	r3, #0
   83478:	f43f af78 	beq.w	8336c <__sfvwrite_r+0x5c>
   8347c:	f1b8 0f00 	cmp.w	r8, #0
   83480:	d1d3      	bne.n	8342a <__sfvwrite_r+0x11a>
   83482:	2700      	movs	r7, #0
   83484:	f8d5 b000 	ldr.w	fp, [r5]
   83488:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8348c:	9701      	str	r7, [sp, #4]
   8348e:	3508      	adds	r5, #8
   83490:	e7c8      	b.n	83424 <__sfvwrite_r+0x114>
   83492:	6820      	ldr	r0, [r4, #0]
   83494:	6923      	ldr	r3, [r4, #16]
   83496:	4298      	cmp	r0, r3
   83498:	d802      	bhi.n	834a0 <__sfvwrite_r+0x190>
   8349a:	6963      	ldr	r3, [r4, #20]
   8349c:	4598      	cmp	r8, r3
   8349e:	d272      	bcs.n	83586 <__sfvwrite_r+0x276>
   834a0:	45b8      	cmp	r8, r7
   834a2:	bf38      	it	cc
   834a4:	4647      	movcc	r7, r8
   834a6:	463a      	mov	r2, r7
   834a8:	4651      	mov	r1, sl
   834aa:	f000 fcbf 	bl	83e2c <memmove>
   834ae:	68a3      	ldr	r3, [r4, #8]
   834b0:	6822      	ldr	r2, [r4, #0]
   834b2:	1bdb      	subs	r3, r3, r7
   834b4:	443a      	add	r2, r7
   834b6:	60a3      	str	r3, [r4, #8]
   834b8:	6022      	str	r2, [r4, #0]
   834ba:	2b00      	cmp	r3, #0
   834bc:	d09f      	beq.n	833fe <__sfvwrite_r+0xee>
   834be:	463a      	mov	r2, r7
   834c0:	e785      	b.n	833ce <__sfvwrite_r+0xbe>
   834c2:	461a      	mov	r2, r3
   834c4:	4659      	mov	r1, fp
   834c6:	9300      	str	r3, [sp, #0]
   834c8:	f000 fcb0 	bl	83e2c <memmove>
   834cc:	9b00      	ldr	r3, [sp, #0]
   834ce:	68a1      	ldr	r1, [r4, #8]
   834d0:	6822      	ldr	r2, [r4, #0]
   834d2:	1ac9      	subs	r1, r1, r3
   834d4:	ebba 0a07 	subs.w	sl, sl, r7
   834d8:	4413      	add	r3, r2
   834da:	60a1      	str	r1, [r4, #8]
   834dc:	6023      	str	r3, [r4, #0]
   834de:	d1c4      	bne.n	8346a <__sfvwrite_r+0x15a>
   834e0:	4648      	mov	r0, r9
   834e2:	4621      	mov	r1, r4
   834e4:	f7ff fce8 	bl	82eb8 <_fflush_r>
   834e8:	2800      	cmp	r0, #0
   834ea:	d18e      	bne.n	8340a <__sfvwrite_r+0xfa>
   834ec:	f8cd a004 	str.w	sl, [sp, #4]
   834f0:	e7bb      	b.n	8346a <__sfvwrite_r+0x15a>
   834f2:	6820      	ldr	r0, [r4, #0]
   834f4:	4647      	mov	r7, r8
   834f6:	46c3      	mov	fp, r8
   834f8:	e75d      	b.n	833b6 <__sfvwrite_r+0xa6>
   834fa:	4658      	mov	r0, fp
   834fc:	210a      	movs	r1, #10
   834fe:	4642      	mov	r2, r8
   83500:	f000 fbd4 	bl	83cac <memchr>
   83504:	2800      	cmp	r0, #0
   83506:	d07f      	beq.n	83608 <__sfvwrite_r+0x2f8>
   83508:	f100 0a01 	add.w	sl, r0, #1
   8350c:	2701      	movs	r7, #1
   8350e:	ebcb 0a0a 	rsb	sl, fp, sl
   83512:	9701      	str	r7, [sp, #4]
   83514:	e78c      	b.n	83430 <__sfvwrite_r+0x120>
   83516:	6822      	ldr	r2, [r4, #0]
   83518:	6921      	ldr	r1, [r4, #16]
   8351a:	6967      	ldr	r7, [r4, #20]
   8351c:	ebc1 0c02 	rsb	ip, r1, r2
   83520:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83524:	f10c 0201 	add.w	r2, ip, #1
   83528:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8352c:	4442      	add	r2, r8
   8352e:	107f      	asrs	r7, r7, #1
   83530:	4297      	cmp	r7, r2
   83532:	bf34      	ite	cc
   83534:	4617      	movcc	r7, r2
   83536:	463a      	movcs	r2, r7
   83538:	055b      	lsls	r3, r3, #21
   8353a:	d54f      	bpl.n	835dc <__sfvwrite_r+0x2cc>
   8353c:	4611      	mov	r1, r2
   8353e:	4648      	mov	r0, r9
   83540:	f8cd c000 	str.w	ip, [sp]
   83544:	f000 f916 	bl	83774 <_malloc_r>
   83548:	f8dd c000 	ldr.w	ip, [sp]
   8354c:	4683      	mov	fp, r0
   8354e:	2800      	cmp	r0, #0
   83550:	d062      	beq.n	83618 <__sfvwrite_r+0x308>
   83552:	4662      	mov	r2, ip
   83554:	6921      	ldr	r1, [r4, #16]
   83556:	f8cd c000 	str.w	ip, [sp]
   8355a:	f000 fbf1 	bl	83d40 <memcpy>
   8355e:	89a2      	ldrh	r2, [r4, #12]
   83560:	f8dd c000 	ldr.w	ip, [sp]
   83564:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8356c:	81a2      	strh	r2, [r4, #12]
   8356e:	eb0b 000c 	add.w	r0, fp, ip
   83572:	ebcc 0207 	rsb	r2, ip, r7
   83576:	f8c4 b010 	str.w	fp, [r4, #16]
   8357a:	6167      	str	r7, [r4, #20]
   8357c:	6020      	str	r0, [r4, #0]
   8357e:	60a2      	str	r2, [r4, #8]
   83580:	4647      	mov	r7, r8
   83582:	46c3      	mov	fp, r8
   83584:	e717      	b.n	833b6 <__sfvwrite_r+0xa6>
   83586:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8358a:	4590      	cmp	r8, r2
   8358c:	bf38      	it	cc
   8358e:	4642      	movcc	r2, r8
   83590:	fb92 f2f3 	sdiv	r2, r2, r3
   83594:	fb02 f303 	mul.w	r3, r2, r3
   83598:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8359a:	4648      	mov	r0, r9
   8359c:	69e1      	ldr	r1, [r4, #28]
   8359e:	4652      	mov	r2, sl
   835a0:	47b8      	blx	r7
   835a2:	2800      	cmp	r0, #0
   835a4:	f77f af31 	ble.w	8340a <__sfvwrite_r+0xfa>
   835a8:	4602      	mov	r2, r0
   835aa:	e710      	b.n	833ce <__sfvwrite_r+0xbe>
   835ac:	4662      	mov	r2, ip
   835ae:	4659      	mov	r1, fp
   835b0:	f8cd c000 	str.w	ip, [sp]
   835b4:	f000 fc3a 	bl	83e2c <memmove>
   835b8:	f8dd c000 	ldr.w	ip, [sp]
   835bc:	6823      	ldr	r3, [r4, #0]
   835be:	4648      	mov	r0, r9
   835c0:	4463      	add	r3, ip
   835c2:	6023      	str	r3, [r4, #0]
   835c4:	4621      	mov	r1, r4
   835c6:	f8cd c000 	str.w	ip, [sp]
   835ca:	f7ff fc75 	bl	82eb8 <_fflush_r>
   835ce:	f8dd c000 	ldr.w	ip, [sp]
   835d2:	2800      	cmp	r0, #0
   835d4:	f47f af19 	bne.w	8340a <__sfvwrite_r+0xfa>
   835d8:	4667      	mov	r7, ip
   835da:	e743      	b.n	83464 <__sfvwrite_r+0x154>
   835dc:	4648      	mov	r0, r9
   835de:	f8cd c000 	str.w	ip, [sp]
   835e2:	f000 fc8d 	bl	83f00 <_realloc_r>
   835e6:	f8dd c000 	ldr.w	ip, [sp]
   835ea:	4683      	mov	fp, r0
   835ec:	2800      	cmp	r0, #0
   835ee:	d1be      	bne.n	8356e <__sfvwrite_r+0x25e>
   835f0:	4648      	mov	r0, r9
   835f2:	6921      	ldr	r1, [r4, #16]
   835f4:	f7ff fdc0 	bl	83178 <_free_r>
   835f8:	89a3      	ldrh	r3, [r4, #12]
   835fa:	220c      	movs	r2, #12
   835fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83600:	b29b      	uxth	r3, r3
   83602:	f8c9 2000 	str.w	r2, [r9]
   83606:	e701      	b.n	8340c <__sfvwrite_r+0xfc>
   83608:	2701      	movs	r7, #1
   8360a:	f108 0a01 	add.w	sl, r8, #1
   8360e:	9701      	str	r7, [sp, #4]
   83610:	e70e      	b.n	83430 <__sfvwrite_r+0x120>
   83612:	f04f 30ff 	mov.w	r0, #4294967295
   83616:	e6aa      	b.n	8336e <__sfvwrite_r+0x5e>
   83618:	230c      	movs	r3, #12
   8361a:	f8c9 3000 	str.w	r3, [r9]
   8361e:	89a3      	ldrh	r3, [r4, #12]
   83620:	e6f4      	b.n	8340c <__sfvwrite_r+0xfc>
   83622:	bf00      	nop
   83624:	7ffffc00 	.word	0x7ffffc00

00083628 <_fwalk>:
   83628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8362c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83630:	4688      	mov	r8, r1
   83632:	d019      	beq.n	83668 <_fwalk+0x40>
   83634:	2600      	movs	r6, #0
   83636:	687d      	ldr	r5, [r7, #4]
   83638:	68bc      	ldr	r4, [r7, #8]
   8363a:	3d01      	subs	r5, #1
   8363c:	d40e      	bmi.n	8365c <_fwalk+0x34>
   8363e:	89a3      	ldrh	r3, [r4, #12]
   83640:	3d01      	subs	r5, #1
   83642:	2b01      	cmp	r3, #1
   83644:	d906      	bls.n	83654 <_fwalk+0x2c>
   83646:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8364a:	4620      	mov	r0, r4
   8364c:	3301      	adds	r3, #1
   8364e:	d001      	beq.n	83654 <_fwalk+0x2c>
   83650:	47c0      	blx	r8
   83652:	4306      	orrs	r6, r0
   83654:	1c6b      	adds	r3, r5, #1
   83656:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8365a:	d1f0      	bne.n	8363e <_fwalk+0x16>
   8365c:	683f      	ldr	r7, [r7, #0]
   8365e:	2f00      	cmp	r7, #0
   83660:	d1e9      	bne.n	83636 <_fwalk+0xe>
   83662:	4630      	mov	r0, r6
   83664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83668:	463e      	mov	r6, r7
   8366a:	4630      	mov	r0, r6
   8366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083670 <__locale_charset>:
   83670:	4800      	ldr	r0, [pc, #0]	; (83674 <__locale_charset+0x4>)
   83672:	4770      	bx	lr
   83674:	20070564 	.word	0x20070564

00083678 <__locale_mb_cur_max>:
   83678:	4b01      	ldr	r3, [pc, #4]	; (83680 <__locale_mb_cur_max+0x8>)
   8367a:	6818      	ldr	r0, [r3, #0]
   8367c:	4770      	bx	lr
   8367e:	bf00      	nop
   83680:	20070584 	.word	0x20070584

00083684 <__smakebuf_r>:
   83684:	b5f0      	push	{r4, r5, r6, r7, lr}
   83686:	898b      	ldrh	r3, [r1, #12]
   83688:	b091      	sub	sp, #68	; 0x44
   8368a:	b29a      	uxth	r2, r3
   8368c:	0796      	lsls	r6, r2, #30
   8368e:	460c      	mov	r4, r1
   83690:	4605      	mov	r5, r0
   83692:	d437      	bmi.n	83704 <__smakebuf_r+0x80>
   83694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83698:	2900      	cmp	r1, #0
   8369a:	db17      	blt.n	836cc <__smakebuf_r+0x48>
   8369c:	aa01      	add	r2, sp, #4
   8369e:	f000 ff8b 	bl	845b8 <_fstat_r>
   836a2:	2800      	cmp	r0, #0
   836a4:	db10      	blt.n	836c8 <__smakebuf_r+0x44>
   836a6:	9b02      	ldr	r3, [sp, #8]
   836a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   836ac:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   836b0:	424f      	negs	r7, r1
   836b2:	414f      	adcs	r7, r1
   836b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   836b8:	d02c      	beq.n	83714 <__smakebuf_r+0x90>
   836ba:	89a3      	ldrh	r3, [r4, #12]
   836bc:	f44f 6680 	mov.w	r6, #1024	; 0x400
   836c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836c4:	81a3      	strh	r3, [r4, #12]
   836c6:	e00b      	b.n	836e0 <__smakebuf_r+0x5c>
   836c8:	89a3      	ldrh	r3, [r4, #12]
   836ca:	b29a      	uxth	r2, r3
   836cc:	f012 0f80 	tst.w	r2, #128	; 0x80
   836d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836d4:	81a3      	strh	r3, [r4, #12]
   836d6:	bf14      	ite	ne
   836d8:	2640      	movne	r6, #64	; 0x40
   836da:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   836de:	2700      	movs	r7, #0
   836e0:	4628      	mov	r0, r5
   836e2:	4631      	mov	r1, r6
   836e4:	f000 f846 	bl	83774 <_malloc_r>
   836e8:	89a3      	ldrh	r3, [r4, #12]
   836ea:	2800      	cmp	r0, #0
   836ec:	d029      	beq.n	83742 <__smakebuf_r+0xbe>
   836ee:	4a1b      	ldr	r2, [pc, #108]	; (8375c <__smakebuf_r+0xd8>)
   836f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   836f4:	63ea      	str	r2, [r5, #60]	; 0x3c
   836f6:	81a3      	strh	r3, [r4, #12]
   836f8:	6020      	str	r0, [r4, #0]
   836fa:	6120      	str	r0, [r4, #16]
   836fc:	6166      	str	r6, [r4, #20]
   836fe:	b9a7      	cbnz	r7, 8372a <__smakebuf_r+0xa6>
   83700:	b011      	add	sp, #68	; 0x44
   83702:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83704:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83708:	2201      	movs	r2, #1
   8370a:	600b      	str	r3, [r1, #0]
   8370c:	610b      	str	r3, [r1, #16]
   8370e:	614a      	str	r2, [r1, #20]
   83710:	b011      	add	sp, #68	; 0x44
   83712:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83714:	4a12      	ldr	r2, [pc, #72]	; (83760 <__smakebuf_r+0xdc>)
   83716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   83718:	4293      	cmp	r3, r2
   8371a:	d1ce      	bne.n	836ba <__smakebuf_r+0x36>
   8371c:	89a3      	ldrh	r3, [r4, #12]
   8371e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83722:	4333      	orrs	r3, r6
   83724:	81a3      	strh	r3, [r4, #12]
   83726:	64e6      	str	r6, [r4, #76]	; 0x4c
   83728:	e7da      	b.n	836e0 <__smakebuf_r+0x5c>
   8372a:	4628      	mov	r0, r5
   8372c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83730:	f000 ff56 	bl	845e0 <_isatty_r>
   83734:	2800      	cmp	r0, #0
   83736:	d0e3      	beq.n	83700 <__smakebuf_r+0x7c>
   83738:	89a3      	ldrh	r3, [r4, #12]
   8373a:	f043 0301 	orr.w	r3, r3, #1
   8373e:	81a3      	strh	r3, [r4, #12]
   83740:	e7de      	b.n	83700 <__smakebuf_r+0x7c>
   83742:	059a      	lsls	r2, r3, #22
   83744:	d4dc      	bmi.n	83700 <__smakebuf_r+0x7c>
   83746:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8374a:	f043 0302 	orr.w	r3, r3, #2
   8374e:	2101      	movs	r1, #1
   83750:	81a3      	strh	r3, [r4, #12]
   83752:	6022      	str	r2, [r4, #0]
   83754:	6122      	str	r2, [r4, #16]
   83756:	6161      	str	r1, [r4, #20]
   83758:	e7d2      	b.n	83700 <__smakebuf_r+0x7c>
   8375a:	bf00      	nop
   8375c:	00082ee5 	.word	0x00082ee5
   83760:	00084341 	.word	0x00084341

00083764 <malloc>:
   83764:	4b02      	ldr	r3, [pc, #8]	; (83770 <malloc+0xc>)
   83766:	4601      	mov	r1, r0
   83768:	6818      	ldr	r0, [r3, #0]
   8376a:	f000 b803 	b.w	83774 <_malloc_r>
   8376e:	bf00      	nop
   83770:	20070560 	.word	0x20070560

00083774 <_malloc_r>:
   83774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83778:	f101 050b 	add.w	r5, r1, #11
   8377c:	2d16      	cmp	r5, #22
   8377e:	b083      	sub	sp, #12
   83780:	4606      	mov	r6, r0
   83782:	d927      	bls.n	837d4 <_malloc_r+0x60>
   83784:	f035 0507 	bics.w	r5, r5, #7
   83788:	d427      	bmi.n	837da <_malloc_r+0x66>
   8378a:	42a9      	cmp	r1, r5
   8378c:	d825      	bhi.n	837da <_malloc_r+0x66>
   8378e:	4630      	mov	r0, r6
   83790:	f000 fbb2 	bl	83ef8 <__malloc_lock>
   83794:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83798:	d226      	bcs.n	837e8 <_malloc_r+0x74>
   8379a:	4fc1      	ldr	r7, [pc, #772]	; (83aa0 <_malloc_r+0x32c>)
   8379c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   837a0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   837a4:	68dc      	ldr	r4, [r3, #12]
   837a6:	429c      	cmp	r4, r3
   837a8:	f000 81d2 	beq.w	83b50 <_malloc_r+0x3dc>
   837ac:	6863      	ldr	r3, [r4, #4]
   837ae:	68e2      	ldr	r2, [r4, #12]
   837b0:	f023 0303 	bic.w	r3, r3, #3
   837b4:	4423      	add	r3, r4
   837b6:	6858      	ldr	r0, [r3, #4]
   837b8:	68a1      	ldr	r1, [r4, #8]
   837ba:	f040 0501 	orr.w	r5, r0, #1
   837be:	60ca      	str	r2, [r1, #12]
   837c0:	4630      	mov	r0, r6
   837c2:	6091      	str	r1, [r2, #8]
   837c4:	605d      	str	r5, [r3, #4]
   837c6:	f000 fb99 	bl	83efc <__malloc_unlock>
   837ca:	3408      	adds	r4, #8
   837cc:	4620      	mov	r0, r4
   837ce:	b003      	add	sp, #12
   837d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837d4:	2510      	movs	r5, #16
   837d6:	42a9      	cmp	r1, r5
   837d8:	d9d9      	bls.n	8378e <_malloc_r+0x1a>
   837da:	2400      	movs	r4, #0
   837dc:	230c      	movs	r3, #12
   837de:	4620      	mov	r0, r4
   837e0:	6033      	str	r3, [r6, #0]
   837e2:	b003      	add	sp, #12
   837e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837e8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   837ec:	f000 8089 	beq.w	83902 <_malloc_r+0x18e>
   837f0:	f1bc 0f04 	cmp.w	ip, #4
   837f4:	f200 8160 	bhi.w	83ab8 <_malloc_r+0x344>
   837f8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   837fc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83800:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83804:	4fa6      	ldr	r7, [pc, #664]	; (83aa0 <_malloc_r+0x32c>)
   83806:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8380a:	68cc      	ldr	r4, [r1, #12]
   8380c:	42a1      	cmp	r1, r4
   8380e:	d105      	bne.n	8381c <_malloc_r+0xa8>
   83810:	e00c      	b.n	8382c <_malloc_r+0xb8>
   83812:	2b00      	cmp	r3, #0
   83814:	da79      	bge.n	8390a <_malloc_r+0x196>
   83816:	68e4      	ldr	r4, [r4, #12]
   83818:	42a1      	cmp	r1, r4
   8381a:	d007      	beq.n	8382c <_malloc_r+0xb8>
   8381c:	6862      	ldr	r2, [r4, #4]
   8381e:	f022 0203 	bic.w	r2, r2, #3
   83822:	1b53      	subs	r3, r2, r5
   83824:	2b0f      	cmp	r3, #15
   83826:	ddf4      	ble.n	83812 <_malloc_r+0x9e>
   83828:	f10c 3cff 	add.w	ip, ip, #4294967295
   8382c:	f10c 0c01 	add.w	ip, ip, #1
   83830:	4b9b      	ldr	r3, [pc, #620]	; (83aa0 <_malloc_r+0x32c>)
   83832:	693c      	ldr	r4, [r7, #16]
   83834:	f103 0e08 	add.w	lr, r3, #8
   83838:	4574      	cmp	r4, lr
   8383a:	f000 817e 	beq.w	83b3a <_malloc_r+0x3c6>
   8383e:	6861      	ldr	r1, [r4, #4]
   83840:	f021 0103 	bic.w	r1, r1, #3
   83844:	1b4a      	subs	r2, r1, r5
   83846:	2a0f      	cmp	r2, #15
   83848:	f300 8164 	bgt.w	83b14 <_malloc_r+0x3a0>
   8384c:	2a00      	cmp	r2, #0
   8384e:	f8c3 e014 	str.w	lr, [r3, #20]
   83852:	f8c3 e010 	str.w	lr, [r3, #16]
   83856:	da69      	bge.n	8392c <_malloc_r+0x1b8>
   83858:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8385c:	f080 813a 	bcs.w	83ad4 <_malloc_r+0x360>
   83860:	08c9      	lsrs	r1, r1, #3
   83862:	108a      	asrs	r2, r1, #2
   83864:	f04f 0801 	mov.w	r8, #1
   83868:	fa08 f802 	lsl.w	r8, r8, r2
   8386c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83870:	685a      	ldr	r2, [r3, #4]
   83872:	6888      	ldr	r0, [r1, #8]
   83874:	ea48 0202 	orr.w	r2, r8, r2
   83878:	60a0      	str	r0, [r4, #8]
   8387a:	60e1      	str	r1, [r4, #12]
   8387c:	605a      	str	r2, [r3, #4]
   8387e:	608c      	str	r4, [r1, #8]
   83880:	60c4      	str	r4, [r0, #12]
   83882:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83886:	2001      	movs	r0, #1
   83888:	4098      	lsls	r0, r3
   8388a:	4290      	cmp	r0, r2
   8388c:	d85b      	bhi.n	83946 <_malloc_r+0x1d2>
   8388e:	4202      	tst	r2, r0
   83890:	d106      	bne.n	838a0 <_malloc_r+0x12c>
   83892:	f02c 0c03 	bic.w	ip, ip, #3
   83896:	0040      	lsls	r0, r0, #1
   83898:	4202      	tst	r2, r0
   8389a:	f10c 0c04 	add.w	ip, ip, #4
   8389e:	d0fa      	beq.n	83896 <_malloc_r+0x122>
   838a0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   838a4:	4644      	mov	r4, r8
   838a6:	46e1      	mov	r9, ip
   838a8:	68e3      	ldr	r3, [r4, #12]
   838aa:	429c      	cmp	r4, r3
   838ac:	d107      	bne.n	838be <_malloc_r+0x14a>
   838ae:	e146      	b.n	83b3e <_malloc_r+0x3ca>
   838b0:	2a00      	cmp	r2, #0
   838b2:	f280 8157 	bge.w	83b64 <_malloc_r+0x3f0>
   838b6:	68db      	ldr	r3, [r3, #12]
   838b8:	429c      	cmp	r4, r3
   838ba:	f000 8140 	beq.w	83b3e <_malloc_r+0x3ca>
   838be:	6859      	ldr	r1, [r3, #4]
   838c0:	f021 0103 	bic.w	r1, r1, #3
   838c4:	1b4a      	subs	r2, r1, r5
   838c6:	2a0f      	cmp	r2, #15
   838c8:	ddf2      	ble.n	838b0 <_malloc_r+0x13c>
   838ca:	461c      	mov	r4, r3
   838cc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   838d0:	68d9      	ldr	r1, [r3, #12]
   838d2:	f045 0901 	orr.w	r9, r5, #1
   838d6:	f042 0801 	orr.w	r8, r2, #1
   838da:	441d      	add	r5, r3
   838dc:	f8c3 9004 	str.w	r9, [r3, #4]
   838e0:	4630      	mov	r0, r6
   838e2:	f8cc 100c 	str.w	r1, [ip, #12]
   838e6:	f8c1 c008 	str.w	ip, [r1, #8]
   838ea:	617d      	str	r5, [r7, #20]
   838ec:	613d      	str	r5, [r7, #16]
   838ee:	f8c5 e00c 	str.w	lr, [r5, #12]
   838f2:	f8c5 e008 	str.w	lr, [r5, #8]
   838f6:	f8c5 8004 	str.w	r8, [r5, #4]
   838fa:	50aa      	str	r2, [r5, r2]
   838fc:	f000 fafe 	bl	83efc <__malloc_unlock>
   83900:	e764      	b.n	837cc <_malloc_r+0x58>
   83902:	217e      	movs	r1, #126	; 0x7e
   83904:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83908:	e77c      	b.n	83804 <_malloc_r+0x90>
   8390a:	4422      	add	r2, r4
   8390c:	6850      	ldr	r0, [r2, #4]
   8390e:	68e3      	ldr	r3, [r4, #12]
   83910:	68a1      	ldr	r1, [r4, #8]
   83912:	f040 0501 	orr.w	r5, r0, #1
   83916:	60cb      	str	r3, [r1, #12]
   83918:	4630      	mov	r0, r6
   8391a:	6099      	str	r1, [r3, #8]
   8391c:	6055      	str	r5, [r2, #4]
   8391e:	f000 faed 	bl	83efc <__malloc_unlock>
   83922:	3408      	adds	r4, #8
   83924:	4620      	mov	r0, r4
   83926:	b003      	add	sp, #12
   83928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8392c:	4421      	add	r1, r4
   8392e:	684b      	ldr	r3, [r1, #4]
   83930:	4630      	mov	r0, r6
   83932:	f043 0301 	orr.w	r3, r3, #1
   83936:	604b      	str	r3, [r1, #4]
   83938:	f000 fae0 	bl	83efc <__malloc_unlock>
   8393c:	3408      	adds	r4, #8
   8393e:	4620      	mov	r0, r4
   83940:	b003      	add	sp, #12
   83942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83946:	68bc      	ldr	r4, [r7, #8]
   83948:	6863      	ldr	r3, [r4, #4]
   8394a:	f023 0903 	bic.w	r9, r3, #3
   8394e:	45a9      	cmp	r9, r5
   83950:	d304      	bcc.n	8395c <_malloc_r+0x1e8>
   83952:	ebc5 0309 	rsb	r3, r5, r9
   83956:	2b0f      	cmp	r3, #15
   83958:	f300 8091 	bgt.w	83a7e <_malloc_r+0x30a>
   8395c:	4b51      	ldr	r3, [pc, #324]	; (83aa4 <_malloc_r+0x330>)
   8395e:	4a52      	ldr	r2, [pc, #328]	; (83aa8 <_malloc_r+0x334>)
   83960:	6819      	ldr	r1, [r3, #0]
   83962:	6813      	ldr	r3, [r2, #0]
   83964:	eb05 0a01 	add.w	sl, r5, r1
   83968:	3301      	adds	r3, #1
   8396a:	eb04 0b09 	add.w	fp, r4, r9
   8396e:	f000 8161 	beq.w	83c34 <_malloc_r+0x4c0>
   83972:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83976:	f10a 0a0f 	add.w	sl, sl, #15
   8397a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8397e:	f02a 0a0f 	bic.w	sl, sl, #15
   83982:	4630      	mov	r0, r6
   83984:	4651      	mov	r1, sl
   83986:	9201      	str	r2, [sp, #4]
   83988:	f000 fc9a 	bl	842c0 <_sbrk_r>
   8398c:	f1b0 3fff 	cmp.w	r0, #4294967295
   83990:	4680      	mov	r8, r0
   83992:	9a01      	ldr	r2, [sp, #4]
   83994:	f000 8101 	beq.w	83b9a <_malloc_r+0x426>
   83998:	4583      	cmp	fp, r0
   8399a:	f200 80fb 	bhi.w	83b94 <_malloc_r+0x420>
   8399e:	f8df c114 	ldr.w	ip, [pc, #276]	; 83ab4 <_malloc_r+0x340>
   839a2:	45c3      	cmp	fp, r8
   839a4:	f8dc 3000 	ldr.w	r3, [ip]
   839a8:	4453      	add	r3, sl
   839aa:	f8cc 3000 	str.w	r3, [ip]
   839ae:	f000 814a 	beq.w	83c46 <_malloc_r+0x4d2>
   839b2:	6812      	ldr	r2, [r2, #0]
   839b4:	493c      	ldr	r1, [pc, #240]	; (83aa8 <_malloc_r+0x334>)
   839b6:	3201      	adds	r2, #1
   839b8:	bf1b      	ittet	ne
   839ba:	ebcb 0b08 	rsbne	fp, fp, r8
   839be:	445b      	addne	r3, fp
   839c0:	f8c1 8000 	streq.w	r8, [r1]
   839c4:	f8cc 3000 	strne.w	r3, [ip]
   839c8:	f018 0307 	ands.w	r3, r8, #7
   839cc:	f000 8114 	beq.w	83bf8 <_malloc_r+0x484>
   839d0:	f1c3 0208 	rsb	r2, r3, #8
   839d4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   839d8:	4490      	add	r8, r2
   839da:	3308      	adds	r3, #8
   839dc:	44c2      	add	sl, r8
   839de:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   839e2:	ebca 0a03 	rsb	sl, sl, r3
   839e6:	4651      	mov	r1, sl
   839e8:	4630      	mov	r0, r6
   839ea:	f8cd c004 	str.w	ip, [sp, #4]
   839ee:	f000 fc67 	bl	842c0 <_sbrk_r>
   839f2:	1c43      	adds	r3, r0, #1
   839f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   839f8:	f000 8135 	beq.w	83c66 <_malloc_r+0x4f2>
   839fc:	ebc8 0200 	rsb	r2, r8, r0
   83a00:	4452      	add	r2, sl
   83a02:	f042 0201 	orr.w	r2, r2, #1
   83a06:	f8dc 3000 	ldr.w	r3, [ip]
   83a0a:	42bc      	cmp	r4, r7
   83a0c:	4453      	add	r3, sl
   83a0e:	f8c7 8008 	str.w	r8, [r7, #8]
   83a12:	f8cc 3000 	str.w	r3, [ip]
   83a16:	f8c8 2004 	str.w	r2, [r8, #4]
   83a1a:	f8df a098 	ldr.w	sl, [pc, #152]	; 83ab4 <_malloc_r+0x340>
   83a1e:	d015      	beq.n	83a4c <_malloc_r+0x2d8>
   83a20:	f1b9 0f0f 	cmp.w	r9, #15
   83a24:	f240 80eb 	bls.w	83bfe <_malloc_r+0x48a>
   83a28:	6861      	ldr	r1, [r4, #4]
   83a2a:	f1a9 020c 	sub.w	r2, r9, #12
   83a2e:	f022 0207 	bic.w	r2, r2, #7
   83a32:	f001 0101 	and.w	r1, r1, #1
   83a36:	ea42 0e01 	orr.w	lr, r2, r1
   83a3a:	2005      	movs	r0, #5
   83a3c:	18a1      	adds	r1, r4, r2
   83a3e:	2a0f      	cmp	r2, #15
   83a40:	f8c4 e004 	str.w	lr, [r4, #4]
   83a44:	6048      	str	r0, [r1, #4]
   83a46:	6088      	str	r0, [r1, #8]
   83a48:	f200 8111 	bhi.w	83c6e <_malloc_r+0x4fa>
   83a4c:	4a17      	ldr	r2, [pc, #92]	; (83aac <_malloc_r+0x338>)
   83a4e:	68bc      	ldr	r4, [r7, #8]
   83a50:	6811      	ldr	r1, [r2, #0]
   83a52:	428b      	cmp	r3, r1
   83a54:	bf88      	it	hi
   83a56:	6013      	strhi	r3, [r2, #0]
   83a58:	4a15      	ldr	r2, [pc, #84]	; (83ab0 <_malloc_r+0x33c>)
   83a5a:	6811      	ldr	r1, [r2, #0]
   83a5c:	428b      	cmp	r3, r1
   83a5e:	bf88      	it	hi
   83a60:	6013      	strhi	r3, [r2, #0]
   83a62:	6862      	ldr	r2, [r4, #4]
   83a64:	f022 0203 	bic.w	r2, r2, #3
   83a68:	4295      	cmp	r5, r2
   83a6a:	ebc5 0302 	rsb	r3, r5, r2
   83a6e:	d801      	bhi.n	83a74 <_malloc_r+0x300>
   83a70:	2b0f      	cmp	r3, #15
   83a72:	dc04      	bgt.n	83a7e <_malloc_r+0x30a>
   83a74:	4630      	mov	r0, r6
   83a76:	f000 fa41 	bl	83efc <__malloc_unlock>
   83a7a:	2400      	movs	r4, #0
   83a7c:	e6a6      	b.n	837cc <_malloc_r+0x58>
   83a7e:	f045 0201 	orr.w	r2, r5, #1
   83a82:	f043 0301 	orr.w	r3, r3, #1
   83a86:	4425      	add	r5, r4
   83a88:	6062      	str	r2, [r4, #4]
   83a8a:	4630      	mov	r0, r6
   83a8c:	60bd      	str	r5, [r7, #8]
   83a8e:	606b      	str	r3, [r5, #4]
   83a90:	f000 fa34 	bl	83efc <__malloc_unlock>
   83a94:	3408      	adds	r4, #8
   83a96:	4620      	mov	r0, r4
   83a98:	b003      	add	sp, #12
   83a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a9e:	bf00      	nop
   83aa0:	20070588 	.word	0x20070588
   83aa4:	20070ad4 	.word	0x20070ad4
   83aa8:	20070994 	.word	0x20070994
   83aac:	20070ad0 	.word	0x20070ad0
   83ab0:	20070acc 	.word	0x20070acc
   83ab4:	20070ad8 	.word	0x20070ad8
   83ab8:	f1bc 0f14 	cmp.w	ip, #20
   83abc:	d961      	bls.n	83b82 <_malloc_r+0x40e>
   83abe:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83ac2:	f200 808f 	bhi.w	83be4 <_malloc_r+0x470>
   83ac6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83aca:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83ace:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83ad2:	e697      	b.n	83804 <_malloc_r+0x90>
   83ad4:	0a4b      	lsrs	r3, r1, #9
   83ad6:	2b04      	cmp	r3, #4
   83ad8:	d958      	bls.n	83b8c <_malloc_r+0x418>
   83ada:	2b14      	cmp	r3, #20
   83adc:	f200 80ad 	bhi.w	83c3a <_malloc_r+0x4c6>
   83ae0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83ae4:	0050      	lsls	r0, r2, #1
   83ae6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83aea:	6883      	ldr	r3, [r0, #8]
   83aec:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83ca8 <_malloc_r+0x534>
   83af0:	4283      	cmp	r3, r0
   83af2:	f000 808a 	beq.w	83c0a <_malloc_r+0x496>
   83af6:	685a      	ldr	r2, [r3, #4]
   83af8:	f022 0203 	bic.w	r2, r2, #3
   83afc:	4291      	cmp	r1, r2
   83afe:	d202      	bcs.n	83b06 <_malloc_r+0x392>
   83b00:	689b      	ldr	r3, [r3, #8]
   83b02:	4298      	cmp	r0, r3
   83b04:	d1f7      	bne.n	83af6 <_malloc_r+0x382>
   83b06:	68d9      	ldr	r1, [r3, #12]
   83b08:	687a      	ldr	r2, [r7, #4]
   83b0a:	60e1      	str	r1, [r4, #12]
   83b0c:	60a3      	str	r3, [r4, #8]
   83b0e:	608c      	str	r4, [r1, #8]
   83b10:	60dc      	str	r4, [r3, #12]
   83b12:	e6b6      	b.n	83882 <_malloc_r+0x10e>
   83b14:	f045 0701 	orr.w	r7, r5, #1
   83b18:	f042 0101 	orr.w	r1, r2, #1
   83b1c:	4425      	add	r5, r4
   83b1e:	6067      	str	r7, [r4, #4]
   83b20:	4630      	mov	r0, r6
   83b22:	615d      	str	r5, [r3, #20]
   83b24:	611d      	str	r5, [r3, #16]
   83b26:	f8c5 e00c 	str.w	lr, [r5, #12]
   83b2a:	f8c5 e008 	str.w	lr, [r5, #8]
   83b2e:	6069      	str	r1, [r5, #4]
   83b30:	50aa      	str	r2, [r5, r2]
   83b32:	3408      	adds	r4, #8
   83b34:	f000 f9e2 	bl	83efc <__malloc_unlock>
   83b38:	e648      	b.n	837cc <_malloc_r+0x58>
   83b3a:	685a      	ldr	r2, [r3, #4]
   83b3c:	e6a1      	b.n	83882 <_malloc_r+0x10e>
   83b3e:	f109 0901 	add.w	r9, r9, #1
   83b42:	f019 0f03 	tst.w	r9, #3
   83b46:	f104 0408 	add.w	r4, r4, #8
   83b4a:	f47f aead 	bne.w	838a8 <_malloc_r+0x134>
   83b4e:	e02d      	b.n	83bac <_malloc_r+0x438>
   83b50:	f104 0308 	add.w	r3, r4, #8
   83b54:	6964      	ldr	r4, [r4, #20]
   83b56:	42a3      	cmp	r3, r4
   83b58:	bf08      	it	eq
   83b5a:	f10c 0c02 	addeq.w	ip, ip, #2
   83b5e:	f43f ae67 	beq.w	83830 <_malloc_r+0xbc>
   83b62:	e623      	b.n	837ac <_malloc_r+0x38>
   83b64:	4419      	add	r1, r3
   83b66:	6848      	ldr	r0, [r1, #4]
   83b68:	461c      	mov	r4, r3
   83b6a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83b6e:	68db      	ldr	r3, [r3, #12]
   83b70:	f040 0501 	orr.w	r5, r0, #1
   83b74:	604d      	str	r5, [r1, #4]
   83b76:	4630      	mov	r0, r6
   83b78:	60d3      	str	r3, [r2, #12]
   83b7a:	609a      	str	r2, [r3, #8]
   83b7c:	f000 f9be 	bl	83efc <__malloc_unlock>
   83b80:	e624      	b.n	837cc <_malloc_r+0x58>
   83b82:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83b86:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83b8a:	e63b      	b.n	83804 <_malloc_r+0x90>
   83b8c:	098a      	lsrs	r2, r1, #6
   83b8e:	3238      	adds	r2, #56	; 0x38
   83b90:	0050      	lsls	r0, r2, #1
   83b92:	e7a8      	b.n	83ae6 <_malloc_r+0x372>
   83b94:	42bc      	cmp	r4, r7
   83b96:	f43f af02 	beq.w	8399e <_malloc_r+0x22a>
   83b9a:	68bc      	ldr	r4, [r7, #8]
   83b9c:	6862      	ldr	r2, [r4, #4]
   83b9e:	f022 0203 	bic.w	r2, r2, #3
   83ba2:	e761      	b.n	83a68 <_malloc_r+0x2f4>
   83ba4:	f8d8 8000 	ldr.w	r8, [r8]
   83ba8:	4598      	cmp	r8, r3
   83baa:	d17a      	bne.n	83ca2 <_malloc_r+0x52e>
   83bac:	f01c 0f03 	tst.w	ip, #3
   83bb0:	f1a8 0308 	sub.w	r3, r8, #8
   83bb4:	f10c 3cff 	add.w	ip, ip, #4294967295
   83bb8:	d1f4      	bne.n	83ba4 <_malloc_r+0x430>
   83bba:	687b      	ldr	r3, [r7, #4]
   83bbc:	ea23 0300 	bic.w	r3, r3, r0
   83bc0:	607b      	str	r3, [r7, #4]
   83bc2:	0040      	lsls	r0, r0, #1
   83bc4:	4298      	cmp	r0, r3
   83bc6:	f63f aebe 	bhi.w	83946 <_malloc_r+0x1d2>
   83bca:	2800      	cmp	r0, #0
   83bcc:	f43f aebb 	beq.w	83946 <_malloc_r+0x1d2>
   83bd0:	4203      	tst	r3, r0
   83bd2:	46cc      	mov	ip, r9
   83bd4:	f47f ae64 	bne.w	838a0 <_malloc_r+0x12c>
   83bd8:	0040      	lsls	r0, r0, #1
   83bda:	4203      	tst	r3, r0
   83bdc:	f10c 0c04 	add.w	ip, ip, #4
   83be0:	d0fa      	beq.n	83bd8 <_malloc_r+0x464>
   83be2:	e65d      	b.n	838a0 <_malloc_r+0x12c>
   83be4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83be8:	d819      	bhi.n	83c1e <_malloc_r+0x4aa>
   83bea:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83bee:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83bf2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83bf6:	e605      	b.n	83804 <_malloc_r+0x90>
   83bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83bfc:	e6ee      	b.n	839dc <_malloc_r+0x268>
   83bfe:	2301      	movs	r3, #1
   83c00:	f8c8 3004 	str.w	r3, [r8, #4]
   83c04:	4644      	mov	r4, r8
   83c06:	2200      	movs	r2, #0
   83c08:	e72e      	b.n	83a68 <_malloc_r+0x2f4>
   83c0a:	1092      	asrs	r2, r2, #2
   83c0c:	2001      	movs	r0, #1
   83c0e:	4090      	lsls	r0, r2
   83c10:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83c14:	4619      	mov	r1, r3
   83c16:	4302      	orrs	r2, r0
   83c18:	f8c8 2004 	str.w	r2, [r8, #4]
   83c1c:	e775      	b.n	83b0a <_malloc_r+0x396>
   83c1e:	f240 5354 	movw	r3, #1364	; 0x554
   83c22:	459c      	cmp	ip, r3
   83c24:	d81b      	bhi.n	83c5e <_malloc_r+0x4ea>
   83c26:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83c2a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83c2e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83c32:	e5e7      	b.n	83804 <_malloc_r+0x90>
   83c34:	f10a 0a10 	add.w	sl, sl, #16
   83c38:	e6a3      	b.n	83982 <_malloc_r+0x20e>
   83c3a:	2b54      	cmp	r3, #84	; 0x54
   83c3c:	d81f      	bhi.n	83c7e <_malloc_r+0x50a>
   83c3e:	0b0a      	lsrs	r2, r1, #12
   83c40:	326e      	adds	r2, #110	; 0x6e
   83c42:	0050      	lsls	r0, r2, #1
   83c44:	e74f      	b.n	83ae6 <_malloc_r+0x372>
   83c46:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83c4a:	2900      	cmp	r1, #0
   83c4c:	f47f aeb1 	bne.w	839b2 <_malloc_r+0x23e>
   83c50:	eb0a 0109 	add.w	r1, sl, r9
   83c54:	68ba      	ldr	r2, [r7, #8]
   83c56:	f041 0101 	orr.w	r1, r1, #1
   83c5a:	6051      	str	r1, [r2, #4]
   83c5c:	e6f6      	b.n	83a4c <_malloc_r+0x2d8>
   83c5e:	21fc      	movs	r1, #252	; 0xfc
   83c60:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83c64:	e5ce      	b.n	83804 <_malloc_r+0x90>
   83c66:	2201      	movs	r2, #1
   83c68:	f04f 0a00 	mov.w	sl, #0
   83c6c:	e6cb      	b.n	83a06 <_malloc_r+0x292>
   83c6e:	f104 0108 	add.w	r1, r4, #8
   83c72:	4630      	mov	r0, r6
   83c74:	f7ff fa80 	bl	83178 <_free_r>
   83c78:	f8da 3000 	ldr.w	r3, [sl]
   83c7c:	e6e6      	b.n	83a4c <_malloc_r+0x2d8>
   83c7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83c82:	d803      	bhi.n	83c8c <_malloc_r+0x518>
   83c84:	0bca      	lsrs	r2, r1, #15
   83c86:	3277      	adds	r2, #119	; 0x77
   83c88:	0050      	lsls	r0, r2, #1
   83c8a:	e72c      	b.n	83ae6 <_malloc_r+0x372>
   83c8c:	f240 5254 	movw	r2, #1364	; 0x554
   83c90:	4293      	cmp	r3, r2
   83c92:	d803      	bhi.n	83c9c <_malloc_r+0x528>
   83c94:	0c8a      	lsrs	r2, r1, #18
   83c96:	327c      	adds	r2, #124	; 0x7c
   83c98:	0050      	lsls	r0, r2, #1
   83c9a:	e724      	b.n	83ae6 <_malloc_r+0x372>
   83c9c:	20fc      	movs	r0, #252	; 0xfc
   83c9e:	227e      	movs	r2, #126	; 0x7e
   83ca0:	e721      	b.n	83ae6 <_malloc_r+0x372>
   83ca2:	687b      	ldr	r3, [r7, #4]
   83ca4:	e78d      	b.n	83bc2 <_malloc_r+0x44e>
   83ca6:	bf00      	nop
   83ca8:	20070588 	.word	0x20070588

00083cac <memchr>:
   83cac:	0783      	lsls	r3, r0, #30
   83cae:	b470      	push	{r4, r5, r6}
   83cb0:	b2c9      	uxtb	r1, r1
   83cb2:	d040      	beq.n	83d36 <memchr+0x8a>
   83cb4:	1e54      	subs	r4, r2, #1
   83cb6:	b32a      	cbz	r2, 83d04 <memchr+0x58>
   83cb8:	7803      	ldrb	r3, [r0, #0]
   83cba:	428b      	cmp	r3, r1
   83cbc:	d023      	beq.n	83d06 <memchr+0x5a>
   83cbe:	1c43      	adds	r3, r0, #1
   83cc0:	e004      	b.n	83ccc <memchr+0x20>
   83cc2:	b1fc      	cbz	r4, 83d04 <memchr+0x58>
   83cc4:	7805      	ldrb	r5, [r0, #0]
   83cc6:	4614      	mov	r4, r2
   83cc8:	428d      	cmp	r5, r1
   83cca:	d01c      	beq.n	83d06 <memchr+0x5a>
   83ccc:	f013 0f03 	tst.w	r3, #3
   83cd0:	4618      	mov	r0, r3
   83cd2:	f104 32ff 	add.w	r2, r4, #4294967295
   83cd6:	f103 0301 	add.w	r3, r3, #1
   83cda:	d1f2      	bne.n	83cc2 <memchr+0x16>
   83cdc:	2c03      	cmp	r4, #3
   83cde:	d814      	bhi.n	83d0a <memchr+0x5e>
   83ce0:	1e65      	subs	r5, r4, #1
   83ce2:	b354      	cbz	r4, 83d3a <memchr+0x8e>
   83ce4:	7803      	ldrb	r3, [r0, #0]
   83ce6:	428b      	cmp	r3, r1
   83ce8:	d00d      	beq.n	83d06 <memchr+0x5a>
   83cea:	1c42      	adds	r2, r0, #1
   83cec:	2300      	movs	r3, #0
   83cee:	e002      	b.n	83cf6 <memchr+0x4a>
   83cf0:	7804      	ldrb	r4, [r0, #0]
   83cf2:	428c      	cmp	r4, r1
   83cf4:	d007      	beq.n	83d06 <memchr+0x5a>
   83cf6:	42ab      	cmp	r3, r5
   83cf8:	4610      	mov	r0, r2
   83cfa:	f103 0301 	add.w	r3, r3, #1
   83cfe:	f102 0201 	add.w	r2, r2, #1
   83d02:	d1f5      	bne.n	83cf0 <memchr+0x44>
   83d04:	2000      	movs	r0, #0
   83d06:	bc70      	pop	{r4, r5, r6}
   83d08:	4770      	bx	lr
   83d0a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83d0e:	4603      	mov	r3, r0
   83d10:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83d14:	681a      	ldr	r2, [r3, #0]
   83d16:	4618      	mov	r0, r3
   83d18:	4072      	eors	r2, r6
   83d1a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83d1e:	ea25 0202 	bic.w	r2, r5, r2
   83d22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83d26:	f103 0304 	add.w	r3, r3, #4
   83d2a:	d1d9      	bne.n	83ce0 <memchr+0x34>
   83d2c:	3c04      	subs	r4, #4
   83d2e:	2c03      	cmp	r4, #3
   83d30:	4618      	mov	r0, r3
   83d32:	d8ef      	bhi.n	83d14 <memchr+0x68>
   83d34:	e7d4      	b.n	83ce0 <memchr+0x34>
   83d36:	4614      	mov	r4, r2
   83d38:	e7d0      	b.n	83cdc <memchr+0x30>
   83d3a:	4620      	mov	r0, r4
   83d3c:	e7e3      	b.n	83d06 <memchr+0x5a>
   83d3e:	bf00      	nop

00083d40 <memcpy>:
   83d40:	4684      	mov	ip, r0
   83d42:	ea41 0300 	orr.w	r3, r1, r0
   83d46:	f013 0303 	ands.w	r3, r3, #3
   83d4a:	d149      	bne.n	83de0 <memcpy+0xa0>
   83d4c:	3a40      	subs	r2, #64	; 0x40
   83d4e:	d323      	bcc.n	83d98 <memcpy+0x58>
   83d50:	680b      	ldr	r3, [r1, #0]
   83d52:	6003      	str	r3, [r0, #0]
   83d54:	684b      	ldr	r3, [r1, #4]
   83d56:	6043      	str	r3, [r0, #4]
   83d58:	688b      	ldr	r3, [r1, #8]
   83d5a:	6083      	str	r3, [r0, #8]
   83d5c:	68cb      	ldr	r3, [r1, #12]
   83d5e:	60c3      	str	r3, [r0, #12]
   83d60:	690b      	ldr	r3, [r1, #16]
   83d62:	6103      	str	r3, [r0, #16]
   83d64:	694b      	ldr	r3, [r1, #20]
   83d66:	6143      	str	r3, [r0, #20]
   83d68:	698b      	ldr	r3, [r1, #24]
   83d6a:	6183      	str	r3, [r0, #24]
   83d6c:	69cb      	ldr	r3, [r1, #28]
   83d6e:	61c3      	str	r3, [r0, #28]
   83d70:	6a0b      	ldr	r3, [r1, #32]
   83d72:	6203      	str	r3, [r0, #32]
   83d74:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83d76:	6243      	str	r3, [r0, #36]	; 0x24
   83d78:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83d7a:	6283      	str	r3, [r0, #40]	; 0x28
   83d7c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83d80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83d82:	6303      	str	r3, [r0, #48]	; 0x30
   83d84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83d86:	6343      	str	r3, [r0, #52]	; 0x34
   83d88:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83d8a:	6383      	str	r3, [r0, #56]	; 0x38
   83d8c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83d8e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83d90:	3040      	adds	r0, #64	; 0x40
   83d92:	3140      	adds	r1, #64	; 0x40
   83d94:	3a40      	subs	r2, #64	; 0x40
   83d96:	d2db      	bcs.n	83d50 <memcpy+0x10>
   83d98:	3230      	adds	r2, #48	; 0x30
   83d9a:	d30b      	bcc.n	83db4 <memcpy+0x74>
   83d9c:	680b      	ldr	r3, [r1, #0]
   83d9e:	6003      	str	r3, [r0, #0]
   83da0:	684b      	ldr	r3, [r1, #4]
   83da2:	6043      	str	r3, [r0, #4]
   83da4:	688b      	ldr	r3, [r1, #8]
   83da6:	6083      	str	r3, [r0, #8]
   83da8:	68cb      	ldr	r3, [r1, #12]
   83daa:	60c3      	str	r3, [r0, #12]
   83dac:	3010      	adds	r0, #16
   83dae:	3110      	adds	r1, #16
   83db0:	3a10      	subs	r2, #16
   83db2:	d2f3      	bcs.n	83d9c <memcpy+0x5c>
   83db4:	320c      	adds	r2, #12
   83db6:	d305      	bcc.n	83dc4 <memcpy+0x84>
   83db8:	f851 3b04 	ldr.w	r3, [r1], #4
   83dbc:	f840 3b04 	str.w	r3, [r0], #4
   83dc0:	3a04      	subs	r2, #4
   83dc2:	d2f9      	bcs.n	83db8 <memcpy+0x78>
   83dc4:	3204      	adds	r2, #4
   83dc6:	d008      	beq.n	83dda <memcpy+0x9a>
   83dc8:	07d2      	lsls	r2, r2, #31
   83dca:	bf1c      	itt	ne
   83dcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83dd0:	f800 3b01 	strbne.w	r3, [r0], #1
   83dd4:	d301      	bcc.n	83dda <memcpy+0x9a>
   83dd6:	880b      	ldrh	r3, [r1, #0]
   83dd8:	8003      	strh	r3, [r0, #0]
   83dda:	4660      	mov	r0, ip
   83ddc:	4770      	bx	lr
   83dde:	bf00      	nop
   83de0:	2a08      	cmp	r2, #8
   83de2:	d313      	bcc.n	83e0c <memcpy+0xcc>
   83de4:	078b      	lsls	r3, r1, #30
   83de6:	d0b1      	beq.n	83d4c <memcpy+0xc>
   83de8:	f010 0303 	ands.w	r3, r0, #3
   83dec:	d0ae      	beq.n	83d4c <memcpy+0xc>
   83dee:	f1c3 0304 	rsb	r3, r3, #4
   83df2:	1ad2      	subs	r2, r2, r3
   83df4:	07db      	lsls	r3, r3, #31
   83df6:	bf1c      	itt	ne
   83df8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83dfc:	f800 3b01 	strbne.w	r3, [r0], #1
   83e00:	d3a4      	bcc.n	83d4c <memcpy+0xc>
   83e02:	f831 3b02 	ldrh.w	r3, [r1], #2
   83e06:	f820 3b02 	strh.w	r3, [r0], #2
   83e0a:	e79f      	b.n	83d4c <memcpy+0xc>
   83e0c:	3a04      	subs	r2, #4
   83e0e:	d3d9      	bcc.n	83dc4 <memcpy+0x84>
   83e10:	3a01      	subs	r2, #1
   83e12:	f811 3b01 	ldrb.w	r3, [r1], #1
   83e16:	f800 3b01 	strb.w	r3, [r0], #1
   83e1a:	d2f9      	bcs.n	83e10 <memcpy+0xd0>
   83e1c:	780b      	ldrb	r3, [r1, #0]
   83e1e:	7003      	strb	r3, [r0, #0]
   83e20:	784b      	ldrb	r3, [r1, #1]
   83e22:	7043      	strb	r3, [r0, #1]
   83e24:	788b      	ldrb	r3, [r1, #2]
   83e26:	7083      	strb	r3, [r0, #2]
   83e28:	4660      	mov	r0, ip
   83e2a:	4770      	bx	lr

00083e2c <memmove>:
   83e2c:	4288      	cmp	r0, r1
   83e2e:	b4f0      	push	{r4, r5, r6, r7}
   83e30:	d910      	bls.n	83e54 <memmove+0x28>
   83e32:	188c      	adds	r4, r1, r2
   83e34:	42a0      	cmp	r0, r4
   83e36:	d20d      	bcs.n	83e54 <memmove+0x28>
   83e38:	1885      	adds	r5, r0, r2
   83e3a:	1e53      	subs	r3, r2, #1
   83e3c:	b142      	cbz	r2, 83e50 <memmove+0x24>
   83e3e:	4621      	mov	r1, r4
   83e40:	462a      	mov	r2, r5
   83e42:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83e46:	3b01      	subs	r3, #1
   83e48:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83e4c:	1c5c      	adds	r4, r3, #1
   83e4e:	d1f8      	bne.n	83e42 <memmove+0x16>
   83e50:	bcf0      	pop	{r4, r5, r6, r7}
   83e52:	4770      	bx	lr
   83e54:	2a0f      	cmp	r2, #15
   83e56:	d944      	bls.n	83ee2 <memmove+0xb6>
   83e58:	ea40 0301 	orr.w	r3, r0, r1
   83e5c:	079b      	lsls	r3, r3, #30
   83e5e:	d144      	bne.n	83eea <memmove+0xbe>
   83e60:	f1a2 0710 	sub.w	r7, r2, #16
   83e64:	093f      	lsrs	r7, r7, #4
   83e66:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83e6a:	3610      	adds	r6, #16
   83e6c:	460c      	mov	r4, r1
   83e6e:	4603      	mov	r3, r0
   83e70:	6825      	ldr	r5, [r4, #0]
   83e72:	3310      	adds	r3, #16
   83e74:	f843 5c10 	str.w	r5, [r3, #-16]
   83e78:	6865      	ldr	r5, [r4, #4]
   83e7a:	3410      	adds	r4, #16
   83e7c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83e80:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83e84:	f843 5c08 	str.w	r5, [r3, #-8]
   83e88:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83e8c:	f843 5c04 	str.w	r5, [r3, #-4]
   83e90:	42b3      	cmp	r3, r6
   83e92:	d1ed      	bne.n	83e70 <memmove+0x44>
   83e94:	1c7b      	adds	r3, r7, #1
   83e96:	f002 0c0f 	and.w	ip, r2, #15
   83e9a:	011b      	lsls	r3, r3, #4
   83e9c:	f1bc 0f03 	cmp.w	ip, #3
   83ea0:	4419      	add	r1, r3
   83ea2:	4403      	add	r3, r0
   83ea4:	d923      	bls.n	83eee <memmove+0xc2>
   83ea6:	460e      	mov	r6, r1
   83ea8:	461d      	mov	r5, r3
   83eaa:	4664      	mov	r4, ip
   83eac:	f856 7b04 	ldr.w	r7, [r6], #4
   83eb0:	3c04      	subs	r4, #4
   83eb2:	2c03      	cmp	r4, #3
   83eb4:	f845 7b04 	str.w	r7, [r5], #4
   83eb8:	d8f8      	bhi.n	83eac <memmove+0x80>
   83eba:	f1ac 0404 	sub.w	r4, ip, #4
   83ebe:	f024 0403 	bic.w	r4, r4, #3
   83ec2:	3404      	adds	r4, #4
   83ec4:	f002 0203 	and.w	r2, r2, #3
   83ec8:	4423      	add	r3, r4
   83eca:	4421      	add	r1, r4
   83ecc:	2a00      	cmp	r2, #0
   83ece:	d0bf      	beq.n	83e50 <memmove+0x24>
   83ed0:	441a      	add	r2, r3
   83ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
   83ed6:	f803 4b01 	strb.w	r4, [r3], #1
   83eda:	4293      	cmp	r3, r2
   83edc:	d1f9      	bne.n	83ed2 <memmove+0xa6>
   83ede:	bcf0      	pop	{r4, r5, r6, r7}
   83ee0:	4770      	bx	lr
   83ee2:	4603      	mov	r3, r0
   83ee4:	2a00      	cmp	r2, #0
   83ee6:	d1f3      	bne.n	83ed0 <memmove+0xa4>
   83ee8:	e7b2      	b.n	83e50 <memmove+0x24>
   83eea:	4603      	mov	r3, r0
   83eec:	e7f0      	b.n	83ed0 <memmove+0xa4>
   83eee:	4662      	mov	r2, ip
   83ef0:	2a00      	cmp	r2, #0
   83ef2:	d1ed      	bne.n	83ed0 <memmove+0xa4>
   83ef4:	e7ac      	b.n	83e50 <memmove+0x24>
   83ef6:	bf00      	nop

00083ef8 <__malloc_lock>:
   83ef8:	4770      	bx	lr
   83efa:	bf00      	nop

00083efc <__malloc_unlock>:
   83efc:	4770      	bx	lr
   83efe:	bf00      	nop

00083f00 <_realloc_r>:
   83f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f04:	460c      	mov	r4, r1
   83f06:	b083      	sub	sp, #12
   83f08:	4690      	mov	r8, r2
   83f0a:	4681      	mov	r9, r0
   83f0c:	2900      	cmp	r1, #0
   83f0e:	f000 80ba 	beq.w	84086 <_realloc_r+0x186>
   83f12:	f7ff fff1 	bl	83ef8 <__malloc_lock>
   83f16:	f108 060b 	add.w	r6, r8, #11
   83f1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83f1e:	2e16      	cmp	r6, #22
   83f20:	f023 0503 	bic.w	r5, r3, #3
   83f24:	f1a4 0708 	sub.w	r7, r4, #8
   83f28:	d84b      	bhi.n	83fc2 <_realloc_r+0xc2>
   83f2a:	2110      	movs	r1, #16
   83f2c:	460e      	mov	r6, r1
   83f2e:	45b0      	cmp	r8, r6
   83f30:	d84c      	bhi.n	83fcc <_realloc_r+0xcc>
   83f32:	428d      	cmp	r5, r1
   83f34:	da51      	bge.n	83fda <_realloc_r+0xda>
   83f36:	f8df b384 	ldr.w	fp, [pc, #900]	; 842bc <_realloc_r+0x3bc>
   83f3a:	1978      	adds	r0, r7, r5
   83f3c:	f8db e008 	ldr.w	lr, [fp, #8]
   83f40:	4586      	cmp	lr, r0
   83f42:	f000 80a6 	beq.w	84092 <_realloc_r+0x192>
   83f46:	6842      	ldr	r2, [r0, #4]
   83f48:	f022 0c01 	bic.w	ip, r2, #1
   83f4c:	4484      	add	ip, r0
   83f4e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83f52:	f01c 0f01 	tst.w	ip, #1
   83f56:	d054      	beq.n	84002 <_realloc_r+0x102>
   83f58:	2200      	movs	r2, #0
   83f5a:	4610      	mov	r0, r2
   83f5c:	07db      	lsls	r3, r3, #31
   83f5e:	d46f      	bmi.n	84040 <_realloc_r+0x140>
   83f60:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83f64:	ebc3 0a07 	rsb	sl, r3, r7
   83f68:	f8da 3004 	ldr.w	r3, [sl, #4]
   83f6c:	f023 0303 	bic.w	r3, r3, #3
   83f70:	442b      	add	r3, r5
   83f72:	2800      	cmp	r0, #0
   83f74:	d062      	beq.n	8403c <_realloc_r+0x13c>
   83f76:	4570      	cmp	r0, lr
   83f78:	f000 80e9 	beq.w	8414e <_realloc_r+0x24e>
   83f7c:	eb02 0e03 	add.w	lr, r2, r3
   83f80:	458e      	cmp	lr, r1
   83f82:	db5b      	blt.n	8403c <_realloc_r+0x13c>
   83f84:	68c3      	ldr	r3, [r0, #12]
   83f86:	6882      	ldr	r2, [r0, #8]
   83f88:	46d0      	mov	r8, sl
   83f8a:	60d3      	str	r3, [r2, #12]
   83f8c:	609a      	str	r2, [r3, #8]
   83f8e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83f92:	f8da 300c 	ldr.w	r3, [sl, #12]
   83f96:	1f2a      	subs	r2, r5, #4
   83f98:	2a24      	cmp	r2, #36	; 0x24
   83f9a:	60cb      	str	r3, [r1, #12]
   83f9c:	6099      	str	r1, [r3, #8]
   83f9e:	f200 8123 	bhi.w	841e8 <_realloc_r+0x2e8>
   83fa2:	2a13      	cmp	r2, #19
   83fa4:	f240 80b0 	bls.w	84108 <_realloc_r+0x208>
   83fa8:	6823      	ldr	r3, [r4, #0]
   83faa:	2a1b      	cmp	r2, #27
   83fac:	f8ca 3008 	str.w	r3, [sl, #8]
   83fb0:	6863      	ldr	r3, [r4, #4]
   83fb2:	f8ca 300c 	str.w	r3, [sl, #12]
   83fb6:	f200 812b 	bhi.w	84210 <_realloc_r+0x310>
   83fba:	3408      	adds	r4, #8
   83fbc:	f10a 0310 	add.w	r3, sl, #16
   83fc0:	e0a3      	b.n	8410a <_realloc_r+0x20a>
   83fc2:	f026 0607 	bic.w	r6, r6, #7
   83fc6:	2e00      	cmp	r6, #0
   83fc8:	4631      	mov	r1, r6
   83fca:	dab0      	bge.n	83f2e <_realloc_r+0x2e>
   83fcc:	230c      	movs	r3, #12
   83fce:	2000      	movs	r0, #0
   83fd0:	f8c9 3000 	str.w	r3, [r9]
   83fd4:	b003      	add	sp, #12
   83fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fda:	46a0      	mov	r8, r4
   83fdc:	1baa      	subs	r2, r5, r6
   83fde:	2a0f      	cmp	r2, #15
   83fe0:	f003 0301 	and.w	r3, r3, #1
   83fe4:	d81a      	bhi.n	8401c <_realloc_r+0x11c>
   83fe6:	432b      	orrs	r3, r5
   83fe8:	607b      	str	r3, [r7, #4]
   83fea:	443d      	add	r5, r7
   83fec:	686b      	ldr	r3, [r5, #4]
   83fee:	f043 0301 	orr.w	r3, r3, #1
   83ff2:	606b      	str	r3, [r5, #4]
   83ff4:	4648      	mov	r0, r9
   83ff6:	f7ff ff81 	bl	83efc <__malloc_unlock>
   83ffa:	4640      	mov	r0, r8
   83ffc:	b003      	add	sp, #12
   83ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84002:	f022 0203 	bic.w	r2, r2, #3
   84006:	eb02 0c05 	add.w	ip, r2, r5
   8400a:	458c      	cmp	ip, r1
   8400c:	dba6      	blt.n	83f5c <_realloc_r+0x5c>
   8400e:	68c2      	ldr	r2, [r0, #12]
   84010:	6881      	ldr	r1, [r0, #8]
   84012:	46a0      	mov	r8, r4
   84014:	60ca      	str	r2, [r1, #12]
   84016:	4665      	mov	r5, ip
   84018:	6091      	str	r1, [r2, #8]
   8401a:	e7df      	b.n	83fdc <_realloc_r+0xdc>
   8401c:	19b9      	adds	r1, r7, r6
   8401e:	4333      	orrs	r3, r6
   84020:	f042 0001 	orr.w	r0, r2, #1
   84024:	607b      	str	r3, [r7, #4]
   84026:	440a      	add	r2, r1
   84028:	6048      	str	r0, [r1, #4]
   8402a:	6853      	ldr	r3, [r2, #4]
   8402c:	3108      	adds	r1, #8
   8402e:	f043 0301 	orr.w	r3, r3, #1
   84032:	6053      	str	r3, [r2, #4]
   84034:	4648      	mov	r0, r9
   84036:	f7ff f89f 	bl	83178 <_free_r>
   8403a:	e7db      	b.n	83ff4 <_realloc_r+0xf4>
   8403c:	428b      	cmp	r3, r1
   8403e:	da33      	bge.n	840a8 <_realloc_r+0x1a8>
   84040:	4641      	mov	r1, r8
   84042:	4648      	mov	r0, r9
   84044:	f7ff fb96 	bl	83774 <_malloc_r>
   84048:	4680      	mov	r8, r0
   8404a:	2800      	cmp	r0, #0
   8404c:	d0d2      	beq.n	83ff4 <_realloc_r+0xf4>
   8404e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84052:	f1a0 0108 	sub.w	r1, r0, #8
   84056:	f023 0201 	bic.w	r2, r3, #1
   8405a:	443a      	add	r2, r7
   8405c:	4291      	cmp	r1, r2
   8405e:	f000 80bc 	beq.w	841da <_realloc_r+0x2da>
   84062:	1f2a      	subs	r2, r5, #4
   84064:	2a24      	cmp	r2, #36	; 0x24
   84066:	d86e      	bhi.n	84146 <_realloc_r+0x246>
   84068:	2a13      	cmp	r2, #19
   8406a:	d842      	bhi.n	840f2 <_realloc_r+0x1f2>
   8406c:	4603      	mov	r3, r0
   8406e:	4622      	mov	r2, r4
   84070:	6811      	ldr	r1, [r2, #0]
   84072:	6019      	str	r1, [r3, #0]
   84074:	6851      	ldr	r1, [r2, #4]
   84076:	6059      	str	r1, [r3, #4]
   84078:	6892      	ldr	r2, [r2, #8]
   8407a:	609a      	str	r2, [r3, #8]
   8407c:	4621      	mov	r1, r4
   8407e:	4648      	mov	r0, r9
   84080:	f7ff f87a 	bl	83178 <_free_r>
   84084:	e7b6      	b.n	83ff4 <_realloc_r+0xf4>
   84086:	4611      	mov	r1, r2
   84088:	b003      	add	sp, #12
   8408a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8408e:	f7ff bb71 	b.w	83774 <_malloc_r>
   84092:	f8de 2004 	ldr.w	r2, [lr, #4]
   84096:	f106 0c10 	add.w	ip, r6, #16
   8409a:	f022 0203 	bic.w	r2, r2, #3
   8409e:	1950      	adds	r0, r2, r5
   840a0:	4560      	cmp	r0, ip
   840a2:	da3d      	bge.n	84120 <_realloc_r+0x220>
   840a4:	4670      	mov	r0, lr
   840a6:	e759      	b.n	83f5c <_realloc_r+0x5c>
   840a8:	46d0      	mov	r8, sl
   840aa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   840ae:	f8da 100c 	ldr.w	r1, [sl, #12]
   840b2:	1f2a      	subs	r2, r5, #4
   840b4:	2a24      	cmp	r2, #36	; 0x24
   840b6:	60c1      	str	r1, [r0, #12]
   840b8:	6088      	str	r0, [r1, #8]
   840ba:	f200 80a0 	bhi.w	841fe <_realloc_r+0x2fe>
   840be:	2a13      	cmp	r2, #19
   840c0:	f240 809b 	bls.w	841fa <_realloc_r+0x2fa>
   840c4:	6821      	ldr	r1, [r4, #0]
   840c6:	2a1b      	cmp	r2, #27
   840c8:	f8ca 1008 	str.w	r1, [sl, #8]
   840cc:	6861      	ldr	r1, [r4, #4]
   840ce:	f8ca 100c 	str.w	r1, [sl, #12]
   840d2:	f200 80b2 	bhi.w	8423a <_realloc_r+0x33a>
   840d6:	3408      	adds	r4, #8
   840d8:	f10a 0210 	add.w	r2, sl, #16
   840dc:	6821      	ldr	r1, [r4, #0]
   840de:	461d      	mov	r5, r3
   840e0:	6011      	str	r1, [r2, #0]
   840e2:	6861      	ldr	r1, [r4, #4]
   840e4:	4657      	mov	r7, sl
   840e6:	6051      	str	r1, [r2, #4]
   840e8:	68a3      	ldr	r3, [r4, #8]
   840ea:	6093      	str	r3, [r2, #8]
   840ec:	f8da 3004 	ldr.w	r3, [sl, #4]
   840f0:	e774      	b.n	83fdc <_realloc_r+0xdc>
   840f2:	6823      	ldr	r3, [r4, #0]
   840f4:	2a1b      	cmp	r2, #27
   840f6:	6003      	str	r3, [r0, #0]
   840f8:	6863      	ldr	r3, [r4, #4]
   840fa:	6043      	str	r3, [r0, #4]
   840fc:	d862      	bhi.n	841c4 <_realloc_r+0x2c4>
   840fe:	f100 0308 	add.w	r3, r0, #8
   84102:	f104 0208 	add.w	r2, r4, #8
   84106:	e7b3      	b.n	84070 <_realloc_r+0x170>
   84108:	4643      	mov	r3, r8
   8410a:	6822      	ldr	r2, [r4, #0]
   8410c:	4675      	mov	r5, lr
   8410e:	601a      	str	r2, [r3, #0]
   84110:	6862      	ldr	r2, [r4, #4]
   84112:	4657      	mov	r7, sl
   84114:	605a      	str	r2, [r3, #4]
   84116:	68a2      	ldr	r2, [r4, #8]
   84118:	609a      	str	r2, [r3, #8]
   8411a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8411e:	e75d      	b.n	83fdc <_realloc_r+0xdc>
   84120:	1b83      	subs	r3, r0, r6
   84122:	4437      	add	r7, r6
   84124:	f043 0301 	orr.w	r3, r3, #1
   84128:	f8cb 7008 	str.w	r7, [fp, #8]
   8412c:	607b      	str	r3, [r7, #4]
   8412e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84132:	4648      	mov	r0, r9
   84134:	f003 0301 	and.w	r3, r3, #1
   84138:	431e      	orrs	r6, r3
   8413a:	f844 6c04 	str.w	r6, [r4, #-4]
   8413e:	f7ff fedd 	bl	83efc <__malloc_unlock>
   84142:	4620      	mov	r0, r4
   84144:	e75a      	b.n	83ffc <_realloc_r+0xfc>
   84146:	4621      	mov	r1, r4
   84148:	f7ff fe70 	bl	83e2c <memmove>
   8414c:	e796      	b.n	8407c <_realloc_r+0x17c>
   8414e:	eb02 0c03 	add.w	ip, r2, r3
   84152:	f106 0210 	add.w	r2, r6, #16
   84156:	4594      	cmp	ip, r2
   84158:	f6ff af70 	blt.w	8403c <_realloc_r+0x13c>
   8415c:	4657      	mov	r7, sl
   8415e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84162:	f8da 300c 	ldr.w	r3, [sl, #12]
   84166:	1f2a      	subs	r2, r5, #4
   84168:	2a24      	cmp	r2, #36	; 0x24
   8416a:	60cb      	str	r3, [r1, #12]
   8416c:	6099      	str	r1, [r3, #8]
   8416e:	f200 8086 	bhi.w	8427e <_realloc_r+0x37e>
   84172:	2a13      	cmp	r2, #19
   84174:	d977      	bls.n	84266 <_realloc_r+0x366>
   84176:	6823      	ldr	r3, [r4, #0]
   84178:	2a1b      	cmp	r2, #27
   8417a:	f8ca 3008 	str.w	r3, [sl, #8]
   8417e:	6863      	ldr	r3, [r4, #4]
   84180:	f8ca 300c 	str.w	r3, [sl, #12]
   84184:	f200 8084 	bhi.w	84290 <_realloc_r+0x390>
   84188:	3408      	adds	r4, #8
   8418a:	f10a 0310 	add.w	r3, sl, #16
   8418e:	6822      	ldr	r2, [r4, #0]
   84190:	601a      	str	r2, [r3, #0]
   84192:	6862      	ldr	r2, [r4, #4]
   84194:	605a      	str	r2, [r3, #4]
   84196:	68a2      	ldr	r2, [r4, #8]
   84198:	609a      	str	r2, [r3, #8]
   8419a:	ebc6 020c 	rsb	r2, r6, ip
   8419e:	eb0a 0306 	add.w	r3, sl, r6
   841a2:	f042 0201 	orr.w	r2, r2, #1
   841a6:	f8cb 3008 	str.w	r3, [fp, #8]
   841aa:	605a      	str	r2, [r3, #4]
   841ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   841b0:	4648      	mov	r0, r9
   841b2:	f003 0301 	and.w	r3, r3, #1
   841b6:	431e      	orrs	r6, r3
   841b8:	f8ca 6004 	str.w	r6, [sl, #4]
   841bc:	f7ff fe9e 	bl	83efc <__malloc_unlock>
   841c0:	4638      	mov	r0, r7
   841c2:	e71b      	b.n	83ffc <_realloc_r+0xfc>
   841c4:	68a3      	ldr	r3, [r4, #8]
   841c6:	2a24      	cmp	r2, #36	; 0x24
   841c8:	6083      	str	r3, [r0, #8]
   841ca:	68e3      	ldr	r3, [r4, #12]
   841cc:	60c3      	str	r3, [r0, #12]
   841ce:	d02b      	beq.n	84228 <_realloc_r+0x328>
   841d0:	f100 0310 	add.w	r3, r0, #16
   841d4:	f104 0210 	add.w	r2, r4, #16
   841d8:	e74a      	b.n	84070 <_realloc_r+0x170>
   841da:	f850 2c04 	ldr.w	r2, [r0, #-4]
   841de:	46a0      	mov	r8, r4
   841e0:	f022 0203 	bic.w	r2, r2, #3
   841e4:	4415      	add	r5, r2
   841e6:	e6f9      	b.n	83fdc <_realloc_r+0xdc>
   841e8:	4621      	mov	r1, r4
   841ea:	4640      	mov	r0, r8
   841ec:	4675      	mov	r5, lr
   841ee:	4657      	mov	r7, sl
   841f0:	f7ff fe1c 	bl	83e2c <memmove>
   841f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   841f8:	e6f0      	b.n	83fdc <_realloc_r+0xdc>
   841fa:	4642      	mov	r2, r8
   841fc:	e76e      	b.n	840dc <_realloc_r+0x1dc>
   841fe:	4621      	mov	r1, r4
   84200:	4640      	mov	r0, r8
   84202:	461d      	mov	r5, r3
   84204:	4657      	mov	r7, sl
   84206:	f7ff fe11 	bl	83e2c <memmove>
   8420a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8420e:	e6e5      	b.n	83fdc <_realloc_r+0xdc>
   84210:	68a3      	ldr	r3, [r4, #8]
   84212:	2a24      	cmp	r2, #36	; 0x24
   84214:	f8ca 3010 	str.w	r3, [sl, #16]
   84218:	68e3      	ldr	r3, [r4, #12]
   8421a:	f8ca 3014 	str.w	r3, [sl, #20]
   8421e:	d018      	beq.n	84252 <_realloc_r+0x352>
   84220:	3410      	adds	r4, #16
   84222:	f10a 0318 	add.w	r3, sl, #24
   84226:	e770      	b.n	8410a <_realloc_r+0x20a>
   84228:	6922      	ldr	r2, [r4, #16]
   8422a:	f100 0318 	add.w	r3, r0, #24
   8422e:	6102      	str	r2, [r0, #16]
   84230:	6961      	ldr	r1, [r4, #20]
   84232:	f104 0218 	add.w	r2, r4, #24
   84236:	6141      	str	r1, [r0, #20]
   84238:	e71a      	b.n	84070 <_realloc_r+0x170>
   8423a:	68a1      	ldr	r1, [r4, #8]
   8423c:	2a24      	cmp	r2, #36	; 0x24
   8423e:	f8ca 1010 	str.w	r1, [sl, #16]
   84242:	68e1      	ldr	r1, [r4, #12]
   84244:	f8ca 1014 	str.w	r1, [sl, #20]
   84248:	d00f      	beq.n	8426a <_realloc_r+0x36a>
   8424a:	3410      	adds	r4, #16
   8424c:	f10a 0218 	add.w	r2, sl, #24
   84250:	e744      	b.n	840dc <_realloc_r+0x1dc>
   84252:	6922      	ldr	r2, [r4, #16]
   84254:	f10a 0320 	add.w	r3, sl, #32
   84258:	f8ca 2018 	str.w	r2, [sl, #24]
   8425c:	6962      	ldr	r2, [r4, #20]
   8425e:	3418      	adds	r4, #24
   84260:	f8ca 201c 	str.w	r2, [sl, #28]
   84264:	e751      	b.n	8410a <_realloc_r+0x20a>
   84266:	463b      	mov	r3, r7
   84268:	e791      	b.n	8418e <_realloc_r+0x28e>
   8426a:	6921      	ldr	r1, [r4, #16]
   8426c:	f10a 0220 	add.w	r2, sl, #32
   84270:	f8ca 1018 	str.w	r1, [sl, #24]
   84274:	6961      	ldr	r1, [r4, #20]
   84276:	3418      	adds	r4, #24
   84278:	f8ca 101c 	str.w	r1, [sl, #28]
   8427c:	e72e      	b.n	840dc <_realloc_r+0x1dc>
   8427e:	4621      	mov	r1, r4
   84280:	4638      	mov	r0, r7
   84282:	f8cd c004 	str.w	ip, [sp, #4]
   84286:	f7ff fdd1 	bl	83e2c <memmove>
   8428a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8428e:	e784      	b.n	8419a <_realloc_r+0x29a>
   84290:	68a3      	ldr	r3, [r4, #8]
   84292:	2a24      	cmp	r2, #36	; 0x24
   84294:	f8ca 3010 	str.w	r3, [sl, #16]
   84298:	68e3      	ldr	r3, [r4, #12]
   8429a:	f8ca 3014 	str.w	r3, [sl, #20]
   8429e:	d003      	beq.n	842a8 <_realloc_r+0x3a8>
   842a0:	3410      	adds	r4, #16
   842a2:	f10a 0318 	add.w	r3, sl, #24
   842a6:	e772      	b.n	8418e <_realloc_r+0x28e>
   842a8:	6922      	ldr	r2, [r4, #16]
   842aa:	f10a 0320 	add.w	r3, sl, #32
   842ae:	f8ca 2018 	str.w	r2, [sl, #24]
   842b2:	6962      	ldr	r2, [r4, #20]
   842b4:	3418      	adds	r4, #24
   842b6:	f8ca 201c 	str.w	r2, [sl, #28]
   842ba:	e768      	b.n	8418e <_realloc_r+0x28e>
   842bc:	20070588 	.word	0x20070588

000842c0 <_sbrk_r>:
   842c0:	b538      	push	{r3, r4, r5, lr}
   842c2:	4c07      	ldr	r4, [pc, #28]	; (842e0 <_sbrk_r+0x20>)
   842c4:	2300      	movs	r3, #0
   842c6:	4605      	mov	r5, r0
   842c8:	4608      	mov	r0, r1
   842ca:	6023      	str	r3, [r4, #0]
   842cc:	f7fd fca2 	bl	81c14 <_sbrk>
   842d0:	1c43      	adds	r3, r0, #1
   842d2:	d000      	beq.n	842d6 <_sbrk_r+0x16>
   842d4:	bd38      	pop	{r3, r4, r5, pc}
   842d6:	6823      	ldr	r3, [r4, #0]
   842d8:	2b00      	cmp	r3, #0
   842da:	d0fb      	beq.n	842d4 <_sbrk_r+0x14>
   842dc:	602b      	str	r3, [r5, #0]
   842de:	bd38      	pop	{r3, r4, r5, pc}
   842e0:	20070b88 	.word	0x20070b88

000842e4 <__sread>:
   842e4:	b510      	push	{r4, lr}
   842e6:	460c      	mov	r4, r1
   842e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   842ec:	f000 f99e 	bl	8462c <_read_r>
   842f0:	2800      	cmp	r0, #0
   842f2:	db03      	blt.n	842fc <__sread+0x18>
   842f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   842f6:	4403      	add	r3, r0
   842f8:	6523      	str	r3, [r4, #80]	; 0x50
   842fa:	bd10      	pop	{r4, pc}
   842fc:	89a3      	ldrh	r3, [r4, #12]
   842fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84302:	81a3      	strh	r3, [r4, #12]
   84304:	bd10      	pop	{r4, pc}
   84306:	bf00      	nop

00084308 <__swrite>:
   84308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8430c:	460c      	mov	r4, r1
   8430e:	8989      	ldrh	r1, [r1, #12]
   84310:	461d      	mov	r5, r3
   84312:	05cb      	lsls	r3, r1, #23
   84314:	4616      	mov	r6, r2
   84316:	4607      	mov	r7, r0
   84318:	d506      	bpl.n	84328 <__swrite+0x20>
   8431a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8431e:	2200      	movs	r2, #0
   84320:	2302      	movs	r3, #2
   84322:	f000 f96f 	bl	84604 <_lseek_r>
   84326:	89a1      	ldrh	r1, [r4, #12]
   84328:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8432c:	81a1      	strh	r1, [r4, #12]
   8432e:	4638      	mov	r0, r7
   84330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84334:	4632      	mov	r2, r6
   84336:	462b      	mov	r3, r5
   84338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8433c:	f000 b87a 	b.w	84434 <_write_r>

00084340 <__sseek>:
   84340:	b510      	push	{r4, lr}
   84342:	460c      	mov	r4, r1
   84344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84348:	f000 f95c 	bl	84604 <_lseek_r>
   8434c:	89a3      	ldrh	r3, [r4, #12]
   8434e:	1c42      	adds	r2, r0, #1
   84350:	bf0e      	itee	eq
   84352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8435a:	6520      	strne	r0, [r4, #80]	; 0x50
   8435c:	81a3      	strh	r3, [r4, #12]
   8435e:	bd10      	pop	{r4, pc}

00084360 <__sclose>:
   84360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84364:	f000 b8ce 	b.w	84504 <_close_r>

00084368 <strlen>:
   84368:	f020 0103 	bic.w	r1, r0, #3
   8436c:	f010 0003 	ands.w	r0, r0, #3
   84370:	f1c0 0000 	rsb	r0, r0, #0
   84374:	f851 3b04 	ldr.w	r3, [r1], #4
   84378:	f100 0c04 	add.w	ip, r0, #4
   8437c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84380:	f06f 0200 	mvn.w	r2, #0
   84384:	bf1c      	itt	ne
   84386:	fa22 f20c 	lsrne.w	r2, r2, ip
   8438a:	4313      	orrne	r3, r2
   8438c:	f04f 0c01 	mov.w	ip, #1
   84390:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84394:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84398:	eba3 020c 	sub.w	r2, r3, ip
   8439c:	ea22 0203 	bic.w	r2, r2, r3
   843a0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   843a4:	bf04      	itt	eq
   843a6:	f851 3b04 	ldreq.w	r3, [r1], #4
   843aa:	3004      	addeq	r0, #4
   843ac:	d0f4      	beq.n	84398 <strlen+0x30>
   843ae:	f013 0fff 	tst.w	r3, #255	; 0xff
   843b2:	bf1f      	itttt	ne
   843b4:	3001      	addne	r0, #1
   843b6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   843ba:	3001      	addne	r0, #1
   843bc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   843c0:	bf18      	it	ne
   843c2:	3001      	addne	r0, #1
   843c4:	4770      	bx	lr
   843c6:	bf00      	nop

000843c8 <_wcrtomb_r>:
   843c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   843cc:	461e      	mov	r6, r3
   843ce:	b086      	sub	sp, #24
   843d0:	460c      	mov	r4, r1
   843d2:	4605      	mov	r5, r0
   843d4:	4617      	mov	r7, r2
   843d6:	4b0f      	ldr	r3, [pc, #60]	; (84414 <_wcrtomb_r+0x4c>)
   843d8:	b191      	cbz	r1, 84400 <_wcrtomb_r+0x38>
   843da:	f8d3 8000 	ldr.w	r8, [r3]
   843de:	f7ff f947 	bl	83670 <__locale_charset>
   843e2:	9600      	str	r6, [sp, #0]
   843e4:	4603      	mov	r3, r0
   843e6:	4621      	mov	r1, r4
   843e8:	463a      	mov	r2, r7
   843ea:	4628      	mov	r0, r5
   843ec:	47c0      	blx	r8
   843ee:	1c43      	adds	r3, r0, #1
   843f0:	d103      	bne.n	843fa <_wcrtomb_r+0x32>
   843f2:	2200      	movs	r2, #0
   843f4:	238a      	movs	r3, #138	; 0x8a
   843f6:	6032      	str	r2, [r6, #0]
   843f8:	602b      	str	r3, [r5, #0]
   843fa:	b006      	add	sp, #24
   843fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84400:	681f      	ldr	r7, [r3, #0]
   84402:	f7ff f935 	bl	83670 <__locale_charset>
   84406:	9600      	str	r6, [sp, #0]
   84408:	4603      	mov	r3, r0
   8440a:	4622      	mov	r2, r4
   8440c:	4628      	mov	r0, r5
   8440e:	a903      	add	r1, sp, #12
   84410:	47b8      	blx	r7
   84412:	e7ec      	b.n	843ee <_wcrtomb_r+0x26>
   84414:	20070998 	.word	0x20070998

00084418 <__ascii_wctomb>:
   84418:	b121      	cbz	r1, 84424 <__ascii_wctomb+0xc>
   8441a:	2aff      	cmp	r2, #255	; 0xff
   8441c:	d804      	bhi.n	84428 <__ascii_wctomb+0x10>
   8441e:	700a      	strb	r2, [r1, #0]
   84420:	2001      	movs	r0, #1
   84422:	4770      	bx	lr
   84424:	4608      	mov	r0, r1
   84426:	4770      	bx	lr
   84428:	238a      	movs	r3, #138	; 0x8a
   8442a:	6003      	str	r3, [r0, #0]
   8442c:	f04f 30ff 	mov.w	r0, #4294967295
   84430:	4770      	bx	lr
   84432:	bf00      	nop

00084434 <_write_r>:
   84434:	b570      	push	{r4, r5, r6, lr}
   84436:	4c08      	ldr	r4, [pc, #32]	; (84458 <_write_r+0x24>)
   84438:	4606      	mov	r6, r0
   8443a:	2500      	movs	r5, #0
   8443c:	4608      	mov	r0, r1
   8443e:	4611      	mov	r1, r2
   84440:	461a      	mov	r2, r3
   84442:	6025      	str	r5, [r4, #0]
   84444:	f7fc fd06 	bl	80e54 <_write>
   84448:	1c43      	adds	r3, r0, #1
   8444a:	d000      	beq.n	8444e <_write_r+0x1a>
   8444c:	bd70      	pop	{r4, r5, r6, pc}
   8444e:	6823      	ldr	r3, [r4, #0]
   84450:	2b00      	cmp	r3, #0
   84452:	d0fb      	beq.n	8444c <_write_r+0x18>
   84454:	6033      	str	r3, [r6, #0]
   84456:	bd70      	pop	{r4, r5, r6, pc}
   84458:	20070b88 	.word	0x20070b88

0008445c <__register_exitproc>:
   8445c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8445e:	4c27      	ldr	r4, [pc, #156]	; (844fc <__register_exitproc+0xa0>)
   84460:	b085      	sub	sp, #20
   84462:	6826      	ldr	r6, [r4, #0]
   84464:	4607      	mov	r7, r0
   84466:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8446a:	2c00      	cmp	r4, #0
   8446c:	d040      	beq.n	844f0 <__register_exitproc+0x94>
   8446e:	6865      	ldr	r5, [r4, #4]
   84470:	2d1f      	cmp	r5, #31
   84472:	dd1e      	ble.n	844b2 <__register_exitproc+0x56>
   84474:	4822      	ldr	r0, [pc, #136]	; (84500 <__register_exitproc+0xa4>)
   84476:	b918      	cbnz	r0, 84480 <__register_exitproc+0x24>
   84478:	f04f 30ff 	mov.w	r0, #4294967295
   8447c:	b005      	add	sp, #20
   8447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84480:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84484:	9103      	str	r1, [sp, #12]
   84486:	9202      	str	r2, [sp, #8]
   84488:	9301      	str	r3, [sp, #4]
   8448a:	f7ff f96b 	bl	83764 <malloc>
   8448e:	9903      	ldr	r1, [sp, #12]
   84490:	4604      	mov	r4, r0
   84492:	9a02      	ldr	r2, [sp, #8]
   84494:	9b01      	ldr	r3, [sp, #4]
   84496:	2800      	cmp	r0, #0
   84498:	d0ee      	beq.n	84478 <__register_exitproc+0x1c>
   8449a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8449e:	2000      	movs	r0, #0
   844a0:	6025      	str	r5, [r4, #0]
   844a2:	6060      	str	r0, [r4, #4]
   844a4:	4605      	mov	r5, r0
   844a6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   844aa:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   844ae:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   844b2:	b93f      	cbnz	r7, 844c4 <__register_exitproc+0x68>
   844b4:	1c6b      	adds	r3, r5, #1
   844b6:	2000      	movs	r0, #0
   844b8:	3502      	adds	r5, #2
   844ba:	6063      	str	r3, [r4, #4]
   844bc:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   844c0:	b005      	add	sp, #20
   844c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   844c4:	2601      	movs	r6, #1
   844c6:	40ae      	lsls	r6, r5
   844c8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   844cc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   844d0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   844d4:	2f02      	cmp	r7, #2
   844d6:	ea42 0206 	orr.w	r2, r2, r6
   844da:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   844de:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   844e2:	d1e7      	bne.n	844b4 <__register_exitproc+0x58>
   844e4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   844e8:	431e      	orrs	r6, r3
   844ea:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   844ee:	e7e1      	b.n	844b4 <__register_exitproc+0x58>
   844f0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   844f4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   844f8:	e7b9      	b.n	8446e <__register_exitproc+0x12>
   844fa:	bf00      	nop
   844fc:	00084e70 	.word	0x00084e70
   84500:	00083765 	.word	0x00083765

00084504 <_close_r>:
   84504:	b538      	push	{r3, r4, r5, lr}
   84506:	4c07      	ldr	r4, [pc, #28]	; (84524 <_close_r+0x20>)
   84508:	2300      	movs	r3, #0
   8450a:	4605      	mov	r5, r0
   8450c:	4608      	mov	r0, r1
   8450e:	6023      	str	r3, [r4, #0]
   84510:	f7fd fb9a 	bl	81c48 <_close>
   84514:	1c43      	adds	r3, r0, #1
   84516:	d000      	beq.n	8451a <_close_r+0x16>
   84518:	bd38      	pop	{r3, r4, r5, pc}
   8451a:	6823      	ldr	r3, [r4, #0]
   8451c:	2b00      	cmp	r3, #0
   8451e:	d0fb      	beq.n	84518 <_close_r+0x14>
   84520:	602b      	str	r3, [r5, #0]
   84522:	bd38      	pop	{r3, r4, r5, pc}
   84524:	20070b88 	.word	0x20070b88

00084528 <_fclose_r>:
   84528:	b570      	push	{r4, r5, r6, lr}
   8452a:	460c      	mov	r4, r1
   8452c:	4605      	mov	r5, r0
   8452e:	b131      	cbz	r1, 8453e <_fclose_r+0x16>
   84530:	b110      	cbz	r0, 84538 <_fclose_r+0x10>
   84532:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84534:	2b00      	cmp	r3, #0
   84536:	d02f      	beq.n	84598 <_fclose_r+0x70>
   84538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8453c:	b90b      	cbnz	r3, 84542 <_fclose_r+0x1a>
   8453e:	2000      	movs	r0, #0
   84540:	bd70      	pop	{r4, r5, r6, pc}
   84542:	4628      	mov	r0, r5
   84544:	4621      	mov	r1, r4
   84546:	f7fe fcb7 	bl	82eb8 <_fflush_r>
   8454a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8454c:	4606      	mov	r6, r0
   8454e:	b133      	cbz	r3, 8455e <_fclose_r+0x36>
   84550:	4628      	mov	r0, r5
   84552:	69e1      	ldr	r1, [r4, #28]
   84554:	4798      	blx	r3
   84556:	2800      	cmp	r0, #0
   84558:	bfb8      	it	lt
   8455a:	f04f 36ff 	movlt.w	r6, #4294967295
   8455e:	89a3      	ldrh	r3, [r4, #12]
   84560:	061b      	lsls	r3, r3, #24
   84562:	d41c      	bmi.n	8459e <_fclose_r+0x76>
   84564:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84566:	b141      	cbz	r1, 8457a <_fclose_r+0x52>
   84568:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8456c:	4299      	cmp	r1, r3
   8456e:	d002      	beq.n	84576 <_fclose_r+0x4e>
   84570:	4628      	mov	r0, r5
   84572:	f7fe fe01 	bl	83178 <_free_r>
   84576:	2300      	movs	r3, #0
   84578:	6323      	str	r3, [r4, #48]	; 0x30
   8457a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8457c:	b121      	cbz	r1, 84588 <_fclose_r+0x60>
   8457e:	4628      	mov	r0, r5
   84580:	f7fe fdfa 	bl	83178 <_free_r>
   84584:	2300      	movs	r3, #0
   84586:	6463      	str	r3, [r4, #68]	; 0x44
   84588:	f7fe fd2c 	bl	82fe4 <__sfp_lock_acquire>
   8458c:	2300      	movs	r3, #0
   8458e:	81a3      	strh	r3, [r4, #12]
   84590:	f7fe fd2a 	bl	82fe8 <__sfp_lock_release>
   84594:	4630      	mov	r0, r6
   84596:	bd70      	pop	{r4, r5, r6, pc}
   84598:	f7fe fcaa 	bl	82ef0 <__sinit>
   8459c:	e7cc      	b.n	84538 <_fclose_r+0x10>
   8459e:	4628      	mov	r0, r5
   845a0:	6921      	ldr	r1, [r4, #16]
   845a2:	f7fe fde9 	bl	83178 <_free_r>
   845a6:	e7dd      	b.n	84564 <_fclose_r+0x3c>

000845a8 <fclose>:
   845a8:	4b02      	ldr	r3, [pc, #8]	; (845b4 <fclose+0xc>)
   845aa:	4601      	mov	r1, r0
   845ac:	6818      	ldr	r0, [r3, #0]
   845ae:	f7ff bfbb 	b.w	84528 <_fclose_r>
   845b2:	bf00      	nop
   845b4:	20070560 	.word	0x20070560

000845b8 <_fstat_r>:
   845b8:	b538      	push	{r3, r4, r5, lr}
   845ba:	4c08      	ldr	r4, [pc, #32]	; (845dc <_fstat_r+0x24>)
   845bc:	2300      	movs	r3, #0
   845be:	4605      	mov	r5, r0
   845c0:	4608      	mov	r0, r1
   845c2:	4611      	mov	r1, r2
   845c4:	6023      	str	r3, [r4, #0]
   845c6:	f7fd fb43 	bl	81c50 <_fstat>
   845ca:	1c43      	adds	r3, r0, #1
   845cc:	d000      	beq.n	845d0 <_fstat_r+0x18>
   845ce:	bd38      	pop	{r3, r4, r5, pc}
   845d0:	6823      	ldr	r3, [r4, #0]
   845d2:	2b00      	cmp	r3, #0
   845d4:	d0fb      	beq.n	845ce <_fstat_r+0x16>
   845d6:	602b      	str	r3, [r5, #0]
   845d8:	bd38      	pop	{r3, r4, r5, pc}
   845da:	bf00      	nop
   845dc:	20070b88 	.word	0x20070b88

000845e0 <_isatty_r>:
   845e0:	b538      	push	{r3, r4, r5, lr}
   845e2:	4c07      	ldr	r4, [pc, #28]	; (84600 <_isatty_r+0x20>)
   845e4:	2300      	movs	r3, #0
   845e6:	4605      	mov	r5, r0
   845e8:	4608      	mov	r0, r1
   845ea:	6023      	str	r3, [r4, #0]
   845ec:	f7fd fb36 	bl	81c5c <_isatty>
   845f0:	1c43      	adds	r3, r0, #1
   845f2:	d000      	beq.n	845f6 <_isatty_r+0x16>
   845f4:	bd38      	pop	{r3, r4, r5, pc}
   845f6:	6823      	ldr	r3, [r4, #0]
   845f8:	2b00      	cmp	r3, #0
   845fa:	d0fb      	beq.n	845f4 <_isatty_r+0x14>
   845fc:	602b      	str	r3, [r5, #0]
   845fe:	bd38      	pop	{r3, r4, r5, pc}
   84600:	20070b88 	.word	0x20070b88

00084604 <_lseek_r>:
   84604:	b570      	push	{r4, r5, r6, lr}
   84606:	4c08      	ldr	r4, [pc, #32]	; (84628 <_lseek_r+0x24>)
   84608:	4606      	mov	r6, r0
   8460a:	2500      	movs	r5, #0
   8460c:	4608      	mov	r0, r1
   8460e:	4611      	mov	r1, r2
   84610:	461a      	mov	r2, r3
   84612:	6025      	str	r5, [r4, #0]
   84614:	f7fd fb24 	bl	81c60 <_lseek>
   84618:	1c43      	adds	r3, r0, #1
   8461a:	d000      	beq.n	8461e <_lseek_r+0x1a>
   8461c:	bd70      	pop	{r4, r5, r6, pc}
   8461e:	6823      	ldr	r3, [r4, #0]
   84620:	2b00      	cmp	r3, #0
   84622:	d0fb      	beq.n	8461c <_lseek_r+0x18>
   84624:	6033      	str	r3, [r6, #0]
   84626:	bd70      	pop	{r4, r5, r6, pc}
   84628:	20070b88 	.word	0x20070b88

0008462c <_read_r>:
   8462c:	b570      	push	{r4, r5, r6, lr}
   8462e:	4c08      	ldr	r4, [pc, #32]	; (84650 <_read_r+0x24>)
   84630:	4606      	mov	r6, r0
   84632:	2500      	movs	r5, #0
   84634:	4608      	mov	r0, r1
   84636:	4611      	mov	r1, r2
   84638:	461a      	mov	r2, r3
   8463a:	6025      	str	r5, [r4, #0]
   8463c:	f7fb fd84 	bl	80148 <_read>
   84640:	1c43      	adds	r3, r0, #1
   84642:	d000      	beq.n	84646 <_read_r+0x1a>
   84644:	bd70      	pop	{r4, r5, r6, pc}
   84646:	6823      	ldr	r3, [r4, #0]
   84648:	2b00      	cmp	r3, #0
   8464a:	d0fb      	beq.n	84644 <_read_r+0x18>
   8464c:	6033      	str	r3, [r6, #0]
   8464e:	bd70      	pop	{r4, r5, r6, pc}
   84650:	20070b88 	.word	0x20070b88

00084654 <__aeabi_uldivmod>:
   84654:	b94b      	cbnz	r3, 8466a <__aeabi_uldivmod+0x16>
   84656:	b942      	cbnz	r2, 8466a <__aeabi_uldivmod+0x16>
   84658:	2900      	cmp	r1, #0
   8465a:	bf08      	it	eq
   8465c:	2800      	cmpeq	r0, #0
   8465e:	d002      	beq.n	84666 <__aeabi_uldivmod+0x12>
   84660:	f04f 31ff 	mov.w	r1, #4294967295
   84664:	4608      	mov	r0, r1
   84666:	f000 b83b 	b.w	846e0 <__aeabi_idiv0>
   8466a:	b082      	sub	sp, #8
   8466c:	46ec      	mov	ip, sp
   8466e:	e92d 5000 	stmdb	sp!, {ip, lr}
   84672:	f000 f81d 	bl	846b0 <__gnu_uldivmod_helper>
   84676:	f8dd e004 	ldr.w	lr, [sp, #4]
   8467a:	b002      	add	sp, #8
   8467c:	bc0c      	pop	{r2, r3}
   8467e:	4770      	bx	lr

00084680 <__gnu_ldivmod_helper>:
   84680:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84684:	9e08      	ldr	r6, [sp, #32]
   84686:	4614      	mov	r4, r2
   84688:	461d      	mov	r5, r3
   8468a:	4680      	mov	r8, r0
   8468c:	4689      	mov	r9, r1
   8468e:	f000 f829 	bl	846e4 <__divdi3>
   84692:	fb04 f301 	mul.w	r3, r4, r1
   84696:	fba4 ab00 	umull	sl, fp, r4, r0
   8469a:	fb00 3205 	mla	r2, r0, r5, r3
   8469e:	4493      	add	fp, r2
   846a0:	ebb8 080a 	subs.w	r8, r8, sl
   846a4:	eb69 090b 	sbc.w	r9, r9, fp
   846a8:	e9c6 8900 	strd	r8, r9, [r6]
   846ac:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000846b0 <__gnu_uldivmod_helper>:
   846b0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   846b4:	9e08      	ldr	r6, [sp, #32]
   846b6:	4614      	mov	r4, r2
   846b8:	461d      	mov	r5, r3
   846ba:	4680      	mov	r8, r0
   846bc:	4689      	mov	r9, r1
   846be:	f000 f961 	bl	84984 <__udivdi3>
   846c2:	fb00 f505 	mul.w	r5, r0, r5
   846c6:	fba0 ab04 	umull	sl, fp, r0, r4
   846ca:	fb04 5401 	mla	r4, r4, r1, r5
   846ce:	44a3      	add	fp, r4
   846d0:	ebb8 080a 	subs.w	r8, r8, sl
   846d4:	eb69 090b 	sbc.w	r9, r9, fp
   846d8:	e9c6 8900 	strd	r8, r9, [r6]
   846dc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000846e0 <__aeabi_idiv0>:
   846e0:	4770      	bx	lr
   846e2:	bf00      	nop

000846e4 <__divdi3>:
   846e4:	2900      	cmp	r1, #0
   846e6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   846ea:	f2c0 80a1 	blt.w	84830 <__divdi3+0x14c>
   846ee:	2400      	movs	r4, #0
   846f0:	2b00      	cmp	r3, #0
   846f2:	f2c0 8098 	blt.w	84826 <__divdi3+0x142>
   846f6:	4615      	mov	r5, r2
   846f8:	4606      	mov	r6, r0
   846fa:	460f      	mov	r7, r1
   846fc:	2b00      	cmp	r3, #0
   846fe:	d13f      	bne.n	84780 <__divdi3+0x9c>
   84700:	428a      	cmp	r2, r1
   84702:	d958      	bls.n	847b6 <__divdi3+0xd2>
   84704:	fab2 f382 	clz	r3, r2
   84708:	b14b      	cbz	r3, 8471e <__divdi3+0x3a>
   8470a:	f1c3 0220 	rsb	r2, r3, #32
   8470e:	fa01 f703 	lsl.w	r7, r1, r3
   84712:	fa20 f202 	lsr.w	r2, r0, r2
   84716:	409d      	lsls	r5, r3
   84718:	fa00 f603 	lsl.w	r6, r0, r3
   8471c:	4317      	orrs	r7, r2
   8471e:	0c29      	lsrs	r1, r5, #16
   84720:	fbb7 f2f1 	udiv	r2, r7, r1
   84724:	fb01 7712 	mls	r7, r1, r2, r7
   84728:	b2a8      	uxth	r0, r5
   8472a:	fb00 f302 	mul.w	r3, r0, r2
   8472e:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   84732:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   84736:	42bb      	cmp	r3, r7
   84738:	d909      	bls.n	8474e <__divdi3+0x6a>
   8473a:	197f      	adds	r7, r7, r5
   8473c:	f102 3cff 	add.w	ip, r2, #4294967295
   84740:	f080 8105 	bcs.w	8494e <__divdi3+0x26a>
   84744:	42bb      	cmp	r3, r7
   84746:	f240 8102 	bls.w	8494e <__divdi3+0x26a>
   8474a:	3a02      	subs	r2, #2
   8474c:	442f      	add	r7, r5
   8474e:	1aff      	subs	r7, r7, r3
   84750:	fbb7 f3f1 	udiv	r3, r7, r1
   84754:	fb01 7113 	mls	r1, r1, r3, r7
   84758:	fb00 f003 	mul.w	r0, r0, r3
   8475c:	b2b6      	uxth	r6, r6
   8475e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   84762:	4288      	cmp	r0, r1
   84764:	d908      	bls.n	84778 <__divdi3+0x94>
   84766:	1949      	adds	r1, r1, r5
   84768:	f103 37ff 	add.w	r7, r3, #4294967295
   8476c:	f080 80f1 	bcs.w	84952 <__divdi3+0x26e>
   84770:	4288      	cmp	r0, r1
   84772:	f240 80ee 	bls.w	84952 <__divdi3+0x26e>
   84776:	3b02      	subs	r3, #2
   84778:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8477c:	2300      	movs	r3, #0
   8477e:	e003      	b.n	84788 <__divdi3+0xa4>
   84780:	428b      	cmp	r3, r1
   84782:	d90a      	bls.n	8479a <__divdi3+0xb6>
   84784:	2300      	movs	r3, #0
   84786:	461a      	mov	r2, r3
   84788:	4610      	mov	r0, r2
   8478a:	4619      	mov	r1, r3
   8478c:	b114      	cbz	r4, 84794 <__divdi3+0xb0>
   8478e:	4240      	negs	r0, r0
   84790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84794:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84798:	4770      	bx	lr
   8479a:	fab3 f883 	clz	r8, r3
   8479e:	f1b8 0f00 	cmp.w	r8, #0
   847a2:	f040 8088 	bne.w	848b6 <__divdi3+0x1d2>
   847a6:	428b      	cmp	r3, r1
   847a8:	d302      	bcc.n	847b0 <__divdi3+0xcc>
   847aa:	4282      	cmp	r2, r0
   847ac:	f200 80e2 	bhi.w	84974 <__divdi3+0x290>
   847b0:	2300      	movs	r3, #0
   847b2:	2201      	movs	r2, #1
   847b4:	e7e8      	b.n	84788 <__divdi3+0xa4>
   847b6:	b912      	cbnz	r2, 847be <__divdi3+0xda>
   847b8:	2301      	movs	r3, #1
   847ba:	fbb3 f5f2 	udiv	r5, r3, r2
   847be:	fab5 f285 	clz	r2, r5
   847c2:	2a00      	cmp	r2, #0
   847c4:	d13a      	bne.n	8483c <__divdi3+0x158>
   847c6:	1b7f      	subs	r7, r7, r5
   847c8:	0c28      	lsrs	r0, r5, #16
   847ca:	fa1f fc85 	uxth.w	ip, r5
   847ce:	2301      	movs	r3, #1
   847d0:	fbb7 f1f0 	udiv	r1, r7, r0
   847d4:	fb00 7711 	mls	r7, r0, r1, r7
   847d8:	fb0c f201 	mul.w	r2, ip, r1
   847dc:	ea4f 4816 	mov.w	r8, r6, lsr #16
   847e0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   847e4:	42ba      	cmp	r2, r7
   847e6:	d907      	bls.n	847f8 <__divdi3+0x114>
   847e8:	197f      	adds	r7, r7, r5
   847ea:	f101 38ff 	add.w	r8, r1, #4294967295
   847ee:	d202      	bcs.n	847f6 <__divdi3+0x112>
   847f0:	42ba      	cmp	r2, r7
   847f2:	f200 80c4 	bhi.w	8497e <__divdi3+0x29a>
   847f6:	4641      	mov	r1, r8
   847f8:	1abf      	subs	r7, r7, r2
   847fa:	fbb7 f2f0 	udiv	r2, r7, r0
   847fe:	fb00 7012 	mls	r0, r0, r2, r7
   84802:	fb0c fc02 	mul.w	ip, ip, r2
   84806:	b2b6      	uxth	r6, r6
   84808:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   8480c:	4584      	cmp	ip, r0
   8480e:	d907      	bls.n	84820 <__divdi3+0x13c>
   84810:	1940      	adds	r0, r0, r5
   84812:	f102 37ff 	add.w	r7, r2, #4294967295
   84816:	d202      	bcs.n	8481e <__divdi3+0x13a>
   84818:	4584      	cmp	ip, r0
   8481a:	f200 80ae 	bhi.w	8497a <__divdi3+0x296>
   8481e:	463a      	mov	r2, r7
   84820:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   84824:	e7b0      	b.n	84788 <__divdi3+0xa4>
   84826:	43e4      	mvns	r4, r4
   84828:	4252      	negs	r2, r2
   8482a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8482e:	e762      	b.n	846f6 <__divdi3+0x12>
   84830:	4240      	negs	r0, r0
   84832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84836:	f04f 34ff 	mov.w	r4, #4294967295
   8483a:	e759      	b.n	846f0 <__divdi3+0xc>
   8483c:	4095      	lsls	r5, r2
   8483e:	f1c2 0920 	rsb	r9, r2, #32
   84842:	fa27 f109 	lsr.w	r1, r7, r9
   84846:	fa26 f909 	lsr.w	r9, r6, r9
   8484a:	4097      	lsls	r7, r2
   8484c:	0c28      	lsrs	r0, r5, #16
   8484e:	fbb1 f8f0 	udiv	r8, r1, r0
   84852:	fb00 1118 	mls	r1, r0, r8, r1
   84856:	fa1f fc85 	uxth.w	ip, r5
   8485a:	fb0c f308 	mul.w	r3, ip, r8
   8485e:	ea49 0907 	orr.w	r9, r9, r7
   84862:	ea4f 4719 	mov.w	r7, r9, lsr #16
   84866:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8486a:	428b      	cmp	r3, r1
   8486c:	fa06 f602 	lsl.w	r6, r6, r2
   84870:	d908      	bls.n	84884 <__divdi3+0x1a0>
   84872:	1949      	adds	r1, r1, r5
   84874:	f108 32ff 	add.w	r2, r8, #4294967295
   84878:	d27a      	bcs.n	84970 <__divdi3+0x28c>
   8487a:	428b      	cmp	r3, r1
   8487c:	d978      	bls.n	84970 <__divdi3+0x28c>
   8487e:	f1a8 0802 	sub.w	r8, r8, #2
   84882:	4429      	add	r1, r5
   84884:	1ac9      	subs	r1, r1, r3
   84886:	fbb1 f3f0 	udiv	r3, r1, r0
   8488a:	fb00 1713 	mls	r7, r0, r3, r1
   8488e:	fb0c f203 	mul.w	r2, ip, r3
   84892:	fa1f f989 	uxth.w	r9, r9
   84896:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8489a:	42ba      	cmp	r2, r7
   8489c:	d907      	bls.n	848ae <__divdi3+0x1ca>
   8489e:	197f      	adds	r7, r7, r5
   848a0:	f103 31ff 	add.w	r1, r3, #4294967295
   848a4:	d260      	bcs.n	84968 <__divdi3+0x284>
   848a6:	42ba      	cmp	r2, r7
   848a8:	d95e      	bls.n	84968 <__divdi3+0x284>
   848aa:	3b02      	subs	r3, #2
   848ac:	442f      	add	r7, r5
   848ae:	1abf      	subs	r7, r7, r2
   848b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   848b4:	e78c      	b.n	847d0 <__divdi3+0xec>
   848b6:	f1c8 0220 	rsb	r2, r8, #32
   848ba:	fa25 f102 	lsr.w	r1, r5, r2
   848be:	fa03 fc08 	lsl.w	ip, r3, r8
   848c2:	fa27 f302 	lsr.w	r3, r7, r2
   848c6:	fa20 f202 	lsr.w	r2, r0, r2
   848ca:	fa07 f708 	lsl.w	r7, r7, r8
   848ce:	ea41 0c0c 	orr.w	ip, r1, ip
   848d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   848d6:	fbb3 f1f9 	udiv	r1, r3, r9
   848da:	fb09 3311 	mls	r3, r9, r1, r3
   848de:	fa1f fa8c 	uxth.w	sl, ip
   848e2:	fb0a fb01 	mul.w	fp, sl, r1
   848e6:	4317      	orrs	r7, r2
   848e8:	0c3a      	lsrs	r2, r7, #16
   848ea:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   848ee:	459b      	cmp	fp, r3
   848f0:	fa05 f008 	lsl.w	r0, r5, r8
   848f4:	d908      	bls.n	84908 <__divdi3+0x224>
   848f6:	eb13 030c 	adds.w	r3, r3, ip
   848fa:	f101 32ff 	add.w	r2, r1, #4294967295
   848fe:	d235      	bcs.n	8496c <__divdi3+0x288>
   84900:	459b      	cmp	fp, r3
   84902:	d933      	bls.n	8496c <__divdi3+0x288>
   84904:	3902      	subs	r1, #2
   84906:	4463      	add	r3, ip
   84908:	ebcb 0303 	rsb	r3, fp, r3
   8490c:	fbb3 f2f9 	udiv	r2, r3, r9
   84910:	fb09 3312 	mls	r3, r9, r2, r3
   84914:	fb0a fa02 	mul.w	sl, sl, r2
   84918:	b2bf      	uxth	r7, r7
   8491a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8491e:	45ba      	cmp	sl, r7
   84920:	d908      	bls.n	84934 <__divdi3+0x250>
   84922:	eb17 070c 	adds.w	r7, r7, ip
   84926:	f102 33ff 	add.w	r3, r2, #4294967295
   8492a:	d21b      	bcs.n	84964 <__divdi3+0x280>
   8492c:	45ba      	cmp	sl, r7
   8492e:	d919      	bls.n	84964 <__divdi3+0x280>
   84930:	3a02      	subs	r2, #2
   84932:	4467      	add	r7, ip
   84934:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84938:	fba5 0100 	umull	r0, r1, r5, r0
   8493c:	ebca 0707 	rsb	r7, sl, r7
   84940:	428f      	cmp	r7, r1
   84942:	f04f 0300 	mov.w	r3, #0
   84946:	d30a      	bcc.n	8495e <__divdi3+0x27a>
   84948:	d005      	beq.n	84956 <__divdi3+0x272>
   8494a:	462a      	mov	r2, r5
   8494c:	e71c      	b.n	84788 <__divdi3+0xa4>
   8494e:	4662      	mov	r2, ip
   84950:	e6fd      	b.n	8474e <__divdi3+0x6a>
   84952:	463b      	mov	r3, r7
   84954:	e710      	b.n	84778 <__divdi3+0x94>
   84956:	fa06 f608 	lsl.w	r6, r6, r8
   8495a:	4286      	cmp	r6, r0
   8495c:	d2f5      	bcs.n	8494a <__divdi3+0x266>
   8495e:	1e6a      	subs	r2, r5, #1
   84960:	2300      	movs	r3, #0
   84962:	e711      	b.n	84788 <__divdi3+0xa4>
   84964:	461a      	mov	r2, r3
   84966:	e7e5      	b.n	84934 <__divdi3+0x250>
   84968:	460b      	mov	r3, r1
   8496a:	e7a0      	b.n	848ae <__divdi3+0x1ca>
   8496c:	4611      	mov	r1, r2
   8496e:	e7cb      	b.n	84908 <__divdi3+0x224>
   84970:	4690      	mov	r8, r2
   84972:	e787      	b.n	84884 <__divdi3+0x1a0>
   84974:	4643      	mov	r3, r8
   84976:	4642      	mov	r2, r8
   84978:	e706      	b.n	84788 <__divdi3+0xa4>
   8497a:	3a02      	subs	r2, #2
   8497c:	e750      	b.n	84820 <__divdi3+0x13c>
   8497e:	3902      	subs	r1, #2
   84980:	442f      	add	r7, r5
   84982:	e739      	b.n	847f8 <__divdi3+0x114>

00084984 <__udivdi3>:
   84984:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84988:	4614      	mov	r4, r2
   8498a:	4605      	mov	r5, r0
   8498c:	460e      	mov	r6, r1
   8498e:	2b00      	cmp	r3, #0
   84990:	d143      	bne.n	84a1a <__udivdi3+0x96>
   84992:	428a      	cmp	r2, r1
   84994:	d953      	bls.n	84a3e <__udivdi3+0xba>
   84996:	fab2 f782 	clz	r7, r2
   8499a:	b157      	cbz	r7, 849b2 <__udivdi3+0x2e>
   8499c:	f1c7 0620 	rsb	r6, r7, #32
   849a0:	fa20 f606 	lsr.w	r6, r0, r6
   849a4:	fa01 f307 	lsl.w	r3, r1, r7
   849a8:	fa02 f407 	lsl.w	r4, r2, r7
   849ac:	fa00 f507 	lsl.w	r5, r0, r7
   849b0:	431e      	orrs	r6, r3
   849b2:	0c21      	lsrs	r1, r4, #16
   849b4:	fbb6 f2f1 	udiv	r2, r6, r1
   849b8:	fb01 6612 	mls	r6, r1, r2, r6
   849bc:	b2a0      	uxth	r0, r4
   849be:	fb00 f302 	mul.w	r3, r0, r2
   849c2:	0c2f      	lsrs	r7, r5, #16
   849c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   849c8:	42b3      	cmp	r3, r6
   849ca:	d909      	bls.n	849e0 <__udivdi3+0x5c>
   849cc:	1936      	adds	r6, r6, r4
   849ce:	f102 37ff 	add.w	r7, r2, #4294967295
   849d2:	f080 80fd 	bcs.w	84bd0 <__udivdi3+0x24c>
   849d6:	42b3      	cmp	r3, r6
   849d8:	f240 80fa 	bls.w	84bd0 <__udivdi3+0x24c>
   849dc:	3a02      	subs	r2, #2
   849de:	4426      	add	r6, r4
   849e0:	1af6      	subs	r6, r6, r3
   849e2:	fbb6 f3f1 	udiv	r3, r6, r1
   849e6:	fb01 6113 	mls	r1, r1, r3, r6
   849ea:	fb00 f003 	mul.w	r0, r0, r3
   849ee:	b2ad      	uxth	r5, r5
   849f0:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   849f4:	4288      	cmp	r0, r1
   849f6:	d908      	bls.n	84a0a <__udivdi3+0x86>
   849f8:	1909      	adds	r1, r1, r4
   849fa:	f103 36ff 	add.w	r6, r3, #4294967295
   849fe:	f080 80e9 	bcs.w	84bd4 <__udivdi3+0x250>
   84a02:	4288      	cmp	r0, r1
   84a04:	f240 80e6 	bls.w	84bd4 <__udivdi3+0x250>
   84a08:	3b02      	subs	r3, #2
   84a0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84a0e:	2300      	movs	r3, #0
   84a10:	4610      	mov	r0, r2
   84a12:	4619      	mov	r1, r3
   84a14:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84a18:	4770      	bx	lr
   84a1a:	428b      	cmp	r3, r1
   84a1c:	d84c      	bhi.n	84ab8 <__udivdi3+0x134>
   84a1e:	fab3 f683 	clz	r6, r3
   84a22:	2e00      	cmp	r6, #0
   84a24:	d14f      	bne.n	84ac6 <__udivdi3+0x142>
   84a26:	428b      	cmp	r3, r1
   84a28:	d302      	bcc.n	84a30 <__udivdi3+0xac>
   84a2a:	4282      	cmp	r2, r0
   84a2c:	f200 80dd 	bhi.w	84bea <__udivdi3+0x266>
   84a30:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84a34:	2300      	movs	r3, #0
   84a36:	2201      	movs	r2, #1
   84a38:	4610      	mov	r0, r2
   84a3a:	4619      	mov	r1, r3
   84a3c:	4770      	bx	lr
   84a3e:	b912      	cbnz	r2, 84a46 <__udivdi3+0xc2>
   84a40:	2401      	movs	r4, #1
   84a42:	fbb4 f4f2 	udiv	r4, r4, r2
   84a46:	fab4 f284 	clz	r2, r4
   84a4a:	2a00      	cmp	r2, #0
   84a4c:	f040 8082 	bne.w	84b54 <__udivdi3+0x1d0>
   84a50:	1b09      	subs	r1, r1, r4
   84a52:	0c26      	lsrs	r6, r4, #16
   84a54:	b2a7      	uxth	r7, r4
   84a56:	2301      	movs	r3, #1
   84a58:	fbb1 f0f6 	udiv	r0, r1, r6
   84a5c:	fb06 1110 	mls	r1, r6, r0, r1
   84a60:	fb07 f200 	mul.w	r2, r7, r0
   84a64:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84a68:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84a6c:	428a      	cmp	r2, r1
   84a6e:	d907      	bls.n	84a80 <__udivdi3+0xfc>
   84a70:	1909      	adds	r1, r1, r4
   84a72:	f100 3cff 	add.w	ip, r0, #4294967295
   84a76:	d202      	bcs.n	84a7e <__udivdi3+0xfa>
   84a78:	428a      	cmp	r2, r1
   84a7a:	f200 80c8 	bhi.w	84c0e <__udivdi3+0x28a>
   84a7e:	4660      	mov	r0, ip
   84a80:	1a89      	subs	r1, r1, r2
   84a82:	fbb1 f2f6 	udiv	r2, r1, r6
   84a86:	fb06 1112 	mls	r1, r6, r2, r1
   84a8a:	fb07 f702 	mul.w	r7, r7, r2
   84a8e:	b2ad      	uxth	r5, r5
   84a90:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84a94:	42af      	cmp	r7, r5
   84a96:	d908      	bls.n	84aaa <__udivdi3+0x126>
   84a98:	192c      	adds	r4, r5, r4
   84a9a:	f102 31ff 	add.w	r1, r2, #4294967295
   84a9e:	f080 809b 	bcs.w	84bd8 <__udivdi3+0x254>
   84aa2:	42a7      	cmp	r7, r4
   84aa4:	f240 8098 	bls.w	84bd8 <__udivdi3+0x254>
   84aa8:	3a02      	subs	r2, #2
   84aaa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84aae:	4610      	mov	r0, r2
   84ab0:	4619      	mov	r1, r3
   84ab2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84ab6:	4770      	bx	lr
   84ab8:	2300      	movs	r3, #0
   84aba:	461a      	mov	r2, r3
   84abc:	4610      	mov	r0, r2
   84abe:	4619      	mov	r1, r3
   84ac0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84ac4:	4770      	bx	lr
   84ac6:	f1c6 0520 	rsb	r5, r6, #32
   84aca:	fa22 f705 	lsr.w	r7, r2, r5
   84ace:	fa03 f406 	lsl.w	r4, r3, r6
   84ad2:	fa21 f305 	lsr.w	r3, r1, r5
   84ad6:	fa01 fb06 	lsl.w	fp, r1, r6
   84ada:	fa20 f505 	lsr.w	r5, r0, r5
   84ade:	433c      	orrs	r4, r7
   84ae0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84ae4:	fbb3 fcf8 	udiv	ip, r3, r8
   84ae8:	fb08 331c 	mls	r3, r8, ip, r3
   84aec:	fa1f f984 	uxth.w	r9, r4
   84af0:	fb09 fa0c 	mul.w	sl, r9, ip
   84af4:	ea45 0b0b 	orr.w	fp, r5, fp
   84af8:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84afc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84b00:	459a      	cmp	sl, r3
   84b02:	fa02 f206 	lsl.w	r2, r2, r6
   84b06:	d904      	bls.n	84b12 <__udivdi3+0x18e>
   84b08:	191b      	adds	r3, r3, r4
   84b0a:	f10c 35ff 	add.w	r5, ip, #4294967295
   84b0e:	d36f      	bcc.n	84bf0 <__udivdi3+0x26c>
   84b10:	46ac      	mov	ip, r5
   84b12:	ebca 0303 	rsb	r3, sl, r3
   84b16:	fbb3 f5f8 	udiv	r5, r3, r8
   84b1a:	fb08 3315 	mls	r3, r8, r5, r3
   84b1e:	fb09 f905 	mul.w	r9, r9, r5
   84b22:	fa1f fb8b 	uxth.w	fp, fp
   84b26:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84b2a:	45b9      	cmp	r9, r7
   84b2c:	d904      	bls.n	84b38 <__udivdi3+0x1b4>
   84b2e:	193f      	adds	r7, r7, r4
   84b30:	f105 33ff 	add.w	r3, r5, #4294967295
   84b34:	d362      	bcc.n	84bfc <__udivdi3+0x278>
   84b36:	461d      	mov	r5, r3
   84b38:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84b3c:	fbac 2302 	umull	r2, r3, ip, r2
   84b40:	ebc9 0707 	rsb	r7, r9, r7
   84b44:	429f      	cmp	r7, r3
   84b46:	f04f 0500 	mov.w	r5, #0
   84b4a:	d34a      	bcc.n	84be2 <__udivdi3+0x25e>
   84b4c:	d046      	beq.n	84bdc <__udivdi3+0x258>
   84b4e:	4662      	mov	r2, ip
   84b50:	462b      	mov	r3, r5
   84b52:	e75d      	b.n	84a10 <__udivdi3+0x8c>
   84b54:	4094      	lsls	r4, r2
   84b56:	f1c2 0920 	rsb	r9, r2, #32
   84b5a:	fa21 fc09 	lsr.w	ip, r1, r9
   84b5e:	4091      	lsls	r1, r2
   84b60:	fa20 f909 	lsr.w	r9, r0, r9
   84b64:	0c26      	lsrs	r6, r4, #16
   84b66:	fbbc f8f6 	udiv	r8, ip, r6
   84b6a:	fb06 cc18 	mls	ip, r6, r8, ip
   84b6e:	b2a7      	uxth	r7, r4
   84b70:	fb07 f308 	mul.w	r3, r7, r8
   84b74:	ea49 0901 	orr.w	r9, r9, r1
   84b78:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84b7c:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84b80:	4563      	cmp	r3, ip
   84b82:	fa00 f502 	lsl.w	r5, r0, r2
   84b86:	d909      	bls.n	84b9c <__udivdi3+0x218>
   84b88:	eb1c 0c04 	adds.w	ip, ip, r4
   84b8c:	f108 32ff 	add.w	r2, r8, #4294967295
   84b90:	d23b      	bcs.n	84c0a <__udivdi3+0x286>
   84b92:	4563      	cmp	r3, ip
   84b94:	d939      	bls.n	84c0a <__udivdi3+0x286>
   84b96:	f1a8 0802 	sub.w	r8, r8, #2
   84b9a:	44a4      	add	ip, r4
   84b9c:	ebc3 0c0c 	rsb	ip, r3, ip
   84ba0:	fbbc f3f6 	udiv	r3, ip, r6
   84ba4:	fb06 c113 	mls	r1, r6, r3, ip
   84ba8:	fb07 f203 	mul.w	r2, r7, r3
   84bac:	fa1f f989 	uxth.w	r9, r9
   84bb0:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84bb4:	428a      	cmp	r2, r1
   84bb6:	d907      	bls.n	84bc8 <__udivdi3+0x244>
   84bb8:	1909      	adds	r1, r1, r4
   84bba:	f103 30ff 	add.w	r0, r3, #4294967295
   84bbe:	d222      	bcs.n	84c06 <__udivdi3+0x282>
   84bc0:	428a      	cmp	r2, r1
   84bc2:	d920      	bls.n	84c06 <__udivdi3+0x282>
   84bc4:	3b02      	subs	r3, #2
   84bc6:	4421      	add	r1, r4
   84bc8:	1a89      	subs	r1, r1, r2
   84bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84bce:	e743      	b.n	84a58 <__udivdi3+0xd4>
   84bd0:	463a      	mov	r2, r7
   84bd2:	e705      	b.n	849e0 <__udivdi3+0x5c>
   84bd4:	4633      	mov	r3, r6
   84bd6:	e718      	b.n	84a0a <__udivdi3+0x86>
   84bd8:	460a      	mov	r2, r1
   84bda:	e766      	b.n	84aaa <__udivdi3+0x126>
   84bdc:	40b0      	lsls	r0, r6
   84bde:	4290      	cmp	r0, r2
   84be0:	d2b5      	bcs.n	84b4e <__udivdi3+0x1ca>
   84be2:	f10c 32ff 	add.w	r2, ip, #4294967295
   84be6:	2300      	movs	r3, #0
   84be8:	e712      	b.n	84a10 <__udivdi3+0x8c>
   84bea:	4633      	mov	r3, r6
   84bec:	4632      	mov	r2, r6
   84bee:	e70f      	b.n	84a10 <__udivdi3+0x8c>
   84bf0:	459a      	cmp	sl, r3
   84bf2:	d98d      	bls.n	84b10 <__udivdi3+0x18c>
   84bf4:	f1ac 0c02 	sub.w	ip, ip, #2
   84bf8:	4423      	add	r3, r4
   84bfa:	e78a      	b.n	84b12 <__udivdi3+0x18e>
   84bfc:	45b9      	cmp	r9, r7
   84bfe:	d99a      	bls.n	84b36 <__udivdi3+0x1b2>
   84c00:	3d02      	subs	r5, #2
   84c02:	4427      	add	r7, r4
   84c04:	e798      	b.n	84b38 <__udivdi3+0x1b4>
   84c06:	4603      	mov	r3, r0
   84c08:	e7de      	b.n	84bc8 <__udivdi3+0x244>
   84c0a:	4690      	mov	r8, r2
   84c0c:	e7c6      	b.n	84b9c <__udivdi3+0x218>
   84c0e:	3802      	subs	r0, #2
   84c10:	4421      	add	r1, r4
   84c12:	e735      	b.n	84a80 <__udivdi3+0xfc>

00084c14 <UnityStrOk>:
   84c14:	4b4f 0000                                   OK..

00084c18 <UnityStrSpacer>:
   84c18:	202e 0000                                   . ..

00084c1c <UnityStrWas>:
   84c1c:	5720 7361 0020 0000                          Was ...

00084c24 <UnityStrFail>:
   84c24:	4146 4c49 0000 0000                         FAIL....

00084c2c <UnityStrExpected>:
   84c2c:	4520 7078 6365 6574 2064 0000                Expected ..

00084c38 <UnityStrBreaker>:
   84c38:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   84c48:	2d2d 2d2d 2d2d 002d                         -------.

00084c50 <UnityStrResultsFailures>:
   84c50:	4620 6961 756c 6572 2073 0000                Failures ..

00084c5c <UnityStrResultsIgnored>:
   84c5c:	4920 6e67 726f 6465 0020 0000                Ignored ...

00084c68 <UnityStrResultsTests>:
   84c68:	5420 7365 7374 0020                          Tests .

00084c70 <UnityStrPass>:
   84c70:	4150 5353 0000 0000 4250 3732 6920 2073     PASS....PB27 is 
   84c80:	6f6e 2074 6e69 7469 6169 696c 6573 0064     not initialised.
   84c90:	4250 3732 6920 2073 6f6e 2074 6e61 6f20     PB27 is not an o
   84ca0:	7475 7570 0074 0000 4250 3632 6920 2073     utput...PB26 is 
   84cb0:	6f6e 2074 6e61 6f20 7475 7570 0074 0000     not an output...
   84cc0:	4250 3632 6920 2073 6f6e 2074 6968 6867     PB26 is not high
   84cd0:	0000 0000 4250 3732 6920 2073 6f6e 2074     ....PB27 is not 
   84ce0:	6968 6867 0000 0000 4250 3732 6920 2073     high....PB27 is 
   84cf0:	6f6e 2074 6f6c 0077 6f43 736e 6c6f 2065     not low.Console 
   84d00:	6572 6461 0a79 0000 3d3d 3d3d 3d3d 3d3d     ready...========
   84d10:	3d3d 3d3d 0a3d 0000 2e2e 742f 7365 2f74     =====...../test/
   84d20:	6574 7473 6944 6967 6174 496c 2e4f 0063     testDigitalIO.c.
   84d30:	6574 7473 645f 6769 7469 6c61 7544 5065     test_digitalDueP
   84d40:	6e69 3331 6e49 7469 6169 696c 6573 7250     in13InitialisePr
   84d50:	706f 7265 796c 0000 6574 7473 645f 6769     operly..test_dig
   84d60:	7469 6c61 7544 5065 6e69 3331 7349 6553     italDuePin13IsSe
   84d70:	0074 0000 6574 7473 645f 6769 7469 6c61     t...test_digital
   84d80:	7544 5065 6e69 3331 7349 6c43 6165 6572     DuePin13IsCleare
   84d90:	0064 0000 6574 7473 645f 6769 7469 6c61     d...test_digital
   84da0:	7544 5065 6e69 3232 6e49 7469 6169 696c     DuePin22Initiali
   84db0:	6573 7250 706f 7265 796c 0000 6574 7473     seProperly..test
   84dc0:	645f 6769 7469 6c61 7544 5065 6e69 3232     _digitalDuePin22
   84dd0:	7349 6553 0074 0000 6574 7473 645f 6769     IsSet...test_dig
   84de0:	7469 6c61 7544 5065 6e69 3232 7349 6c43     italDuePin22IsCl
   84df0:	6165 6572 0064 0000 6574 7473 645f 6769     eared...test_dig
   84e00:	7469 6c61 7544 5065 6e69 3331 6e41 3264     italDuePin13And2
   84e10:	4932 696e 6974 6c61 7369 5065 6f72 6570     2InitialisePrope
   84e20:	6c72 0079 6574 7473 645f 6769 7469 6c61     rly.test_digital
   84e30:	7544 5065 6e69 3331 6e41 3264 4932 5373     DuePin13And22IsS
   84e40:	7465 0000 6574 7473 645f 6769 7469 6c61     et..test_digital
   84e50:	7544 5065 6e69 3331 7369 6c43 6165 6572     DuePin13isCleare
   84e60:	4164 646e 3232 7349 6553 0074 0043 0000     dAnd22IsSet.C...

00084e70 <_global_impure_ptr>:
   84e70:	0138 2007 3130 3332 3534 3736 3938 4241     8.. 0123456789AB
   84e80:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   84e90:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   84ea0:	296c 0000                                   l)..

00084ea4 <zeroes.6721>:
   84ea4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00084eb4 <blanks.6720>:
   84eb4:	2020 2020 2020 2020 2020 2020 2020 2020                     

00084ec4 <_init>:
   84ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84ec6:	bf00      	nop
   84ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84eca:	bc08      	pop	{r3}
   84ecc:	469e      	mov	lr, r3
   84ece:	4770      	bx	lr

00084ed0 <__init_array_start>:
   84ed0:	00082d51 	.word	0x00082d51

00084ed4 <__frame_dummy_init_array_entry>:
   84ed4:	00080119                                ....

00084ed8 <_fini>:
   84ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84eda:	bf00      	nop
   84edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84ede:	bc08      	pop	{r3}
   84ee0:	469e      	mov	lr, r3
   84ee2:	4770      	bx	lr

00084ee4 <__fini_array_start>:
   84ee4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00084e6c 00000000 00000000 00000000     lN..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00084419                                .D..
