
ProjectShield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b5c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085b5c  00085b5c  0000db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c4  20070000  00085b64  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f0  200709c4  00086528  000109c4  2**2
                  ALLOC
  4 .stack        00002004  20070bb4  00086718  000109c4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109c4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109ed  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019317  00000000  00000000  00010a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003dda  00000000  00000000  00029d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000074b7  00000000  00000000  0002db39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000eb0  00000000  00000000  00034ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cd8  00000000  00000000  00035ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001dc47  00000000  00000000  00036b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a323  00000000  00000000  000547bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006de20  00000000  00000000  0006eae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a34  00000000  00000000  000dc904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072bb8 	.word	0x20072bb8
   80004:	0008259d 	.word	0x0008259d
   80008:	00082599 	.word	0x00082599
   8000c:	00082599 	.word	0x00082599
   80010:	00082599 	.word	0x00082599
   80014:	00082599 	.word	0x00082599
   80018:	00082599 	.word	0x00082599
	...
   8002c:	00082599 	.word	0x00082599
   80030:	00082599 	.word	0x00082599
   80034:	00000000 	.word	0x00000000
   80038:	00082599 	.word	0x00082599
   8003c:	00082599 	.word	0x00082599
   80040:	00082599 	.word	0x00082599
   80044:	00082599 	.word	0x00082599
   80048:	00082599 	.word	0x00082599
   8004c:	00082599 	.word	0x00082599
   80050:	00082599 	.word	0x00082599
   80054:	00082599 	.word	0x00082599
   80058:	00082599 	.word	0x00082599
   8005c:	00082599 	.word	0x00082599
   80060:	00082599 	.word	0x00082599
   80064:	00082599 	.word	0x00082599
   80068:	00000000 	.word	0x00000000
   8006c:	00082409 	.word	0x00082409
   80070:	0008241d 	.word	0x0008241d
   80074:	00082431 	.word	0x00082431
   80078:	00082445 	.word	0x00082445
	...
   80084:	000804a1 	.word	0x000804a1
   80088:	00082599 	.word	0x00082599
   8008c:	00082599 	.word	0x00082599
   80090:	00082599 	.word	0x00082599
   80094:	00082599 	.word	0x00082599
   80098:	00082599 	.word	0x00082599
   8009c:	00082599 	.word	0x00082599
   800a0:	00082599 	.word	0x00082599
   800a4:	00000000 	.word	0x00000000
   800a8:	00082599 	.word	0x00082599
   800ac:	00082599 	.word	0x00082599
   800b0:	00082599 	.word	0x00082599
   800b4:	00082599 	.word	0x00082599
   800b8:	00082599 	.word	0x00082599
   800bc:	00082599 	.word	0x00082599
   800c0:	00082599 	.word	0x00082599
   800c4:	00082599 	.word	0x00082599
   800c8:	00082599 	.word	0x00082599
   800cc:	00082599 	.word	0x00082599
   800d0:	00082599 	.word	0x00082599
   800d4:	00082599 	.word	0x00082599
   800d8:	00082599 	.word	0x00082599
   800dc:	00082599 	.word	0x00082599
   800e0:	00082599 	.word	0x00082599
   800e4:	00082599 	.word	0x00082599
   800e8:	00082599 	.word	0x00082599
   800ec:	00082599 	.word	0x00082599
   800f0:	00082599 	.word	0x00082599

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709c4 	.word	0x200709c4
   80110:	00000000 	.word	0x00000000
   80114:	00085b64 	.word	0x00085b64

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085b64 	.word	0x00085b64
   8013c:	200709c8 	.word	0x200709c8
   80140:	00085b64 	.word	0x00085b64
   80144:	00000000 	.word	0x00000000

00080148 <analogInit>:

int adc_Channels[] = {ADC_CHANNEL_7, ADC_CHANNEL_6, ADC_CHANNEL_5, ADC_CHANNEL_3, ADC_CHANNEL_2, ADC_CHANNEL_1, ADC_CHANNEL_0, 
					  ADC_CHANNEL_10, ADC_CHANNEL_11, ADC_CHANNEL_12, ADC_CHANNEL_13};

int analogInit(int pinNumber)
{
   80148:	b570      	push	{r4, r5, r6, lr}
   8014a:	4605      	mov	r5, r0
	 * so you need to figure out which AD channel this corresponds to
	 *
	 * See code example http://asf.atmel.com/docs/latest/sam.drivers.adc.adc_example.arduino_due_x/html/sam_adc_quickstart.html
	 * It is assumed that the AD-converter is using 12 bits
	 */
	pmc_enable_periph_clk(ID_ADC);	/* power the clock for the ADC with pmc_enable_periph_clk(ID_ADC) */
   8014c:	2025      	movs	r0, #37	; 0x25
   8014e:	4b10      	ldr	r3, [pc, #64]	; (80190 <analogInit+0x48>)
   80150:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   80152:	4c10      	ldr	r4, [pc, #64]	; (80194 <analogInit+0x4c>)
   80154:	4620      	mov	r0, r4
   80156:	4910      	ldr	r1, [pc, #64]	; (80198 <analogInit+0x50>)
   80158:	4a10      	ldr	r2, [pc, #64]	; (8019c <analogInit+0x54>)
   8015a:	2308      	movs	r3, #8
   8015c:	4e10      	ldr	r6, [pc, #64]	; (801a0 <analogInit+0x58>)
   8015e:	47b0      	blx	r6
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   80160:	4620      	mov	r0, r4
   80162:	2100      	movs	r1, #0
   80164:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80168:	2301      	movs	r3, #1
   8016a:	4e0e      	ldr	r6, [pc, #56]	; (801a4 <analogInit+0x5c>)
   8016c:	47b0      	blx	r6
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   8016e:	4620      	mov	r0, r4
   80170:	2100      	movs	r1, #0
   80172:	4b0d      	ldr	r3, [pc, #52]	; (801a8 <analogInit+0x60>)
   80174:	4798      	blx	r3
	adc_enable_channel(ADC, adc_Channels[pinNumber]);
   80176:	4620      	mov	r0, r4
   80178:	4b0c      	ldr	r3, [pc, #48]	; (801ac <analogInit+0x64>)
   8017a:	f813 1025 	ldrb.w	r1, [r3, r5, lsl #2]
   8017e:	4b0c      	ldr	r3, [pc, #48]	; (801b0 <analogInit+0x68>)
   80180:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80182:	4620      	mov	r0, r4
   80184:	2100      	movs	r1, #0
   80186:	460a      	mov	r2, r1
   80188:	4b0a      	ldr	r3, [pc, #40]	; (801b4 <analogInit+0x6c>)
   8018a:	4798      	blx	r3
	return 0;	/* if everything is ok */
}
   8018c:	2000      	movs	r0, #0
   8018e:	bd70      	pop	{r4, r5, r6, pc}
   80190:	00082541 	.word	0x00082541
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	000f4240 	.word	0x000f4240
   801a0:	00080345 	.word	0x00080345
   801a4:	00080399 	.word	0x00080399
   801a8:	00080379 	.word	0x00080379
   801ac:	2007012c 	.word	0x2007012c
   801b0:	000803c1 	.word	0x000803c1
   801b4:	00080389 	.word	0x00080389

000801b8 <analogRead>:

uint32_t analogRead(int pinNumber)
{
   801b8:	b538      	push	{r3, r4, r5, lr}
   801ba:	4605      	mov	r5, r0
	adc_start(ADC); /* Starts the conversion */
   801bc:	4c06      	ldr	r4, [pc, #24]	; (801d8 <analogRead+0x20>)
   801be:	4620      	mov	r0, r4
   801c0:	4b06      	ldr	r3, [pc, #24]	; (801dc <analogRead+0x24>)
   801c2:	4798      	blx	r3
	delayMicroseconds(100);
   801c4:	2064      	movs	r0, #100	; 0x64
   801c6:	4b06      	ldr	r3, [pc, #24]	; (801e0 <analogRead+0x28>)
   801c8:	4798      	blx	r3
	return adc_get_channel_value(ADC, adc_Channels[pinNumber]);	/* Replace with actual value read from A/D input*/
   801ca:	4620      	mov	r0, r4
   801cc:	4b05      	ldr	r3, [pc, #20]	; (801e4 <analogRead+0x2c>)
   801ce:	f813 1025 	ldrb.w	r1, [r3, r5, lsl #2]
   801d2:	4b05      	ldr	r3, [pc, #20]	; (801e8 <analogRead+0x30>)
   801d4:	4798      	blx	r3
   801d6:	bd38      	pop	{r3, r4, r5, pc}
   801d8:	400c0000 	.word	0x400c0000
   801dc:	000803b9 	.word	0x000803b9
   801e0:	0008077d 	.word	0x0008077d
   801e4:	2007012c 	.word	0x2007012c
   801e8:	000803cd 	.word	0x000803cd

000801ec <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801f0:	b083      	sub	sp, #12
   801f2:	4605      	mov	r5, r0
	while (len) {
   801f4:	4690      	mov	r8, r2
   801f6:	2a00      	cmp	r2, #0
   801f8:	d047      	beq.n	8028a <usart_serial_read_packet+0x9e>
   801fa:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801fc:	4f25      	ldr	r7, [pc, #148]	; (80294 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801fe:	4c26      	ldr	r4, [pc, #152]	; (80298 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80200:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 802ac <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80204:	f8df b094 	ldr.w	fp, [pc, #148]	; 8029c <usart_serial_read_packet+0xb0>
   80208:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   8020c:	2300      	movs	r3, #0
   8020e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80210:	4b22      	ldr	r3, [pc, #136]	; (8029c <usart_serial_read_packet+0xb0>)
   80212:	429d      	cmp	r5, r3
   80214:	d106      	bne.n	80224 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80216:	4658      	mov	r0, fp
   80218:	4649      	mov	r1, r9
   8021a:	4b21      	ldr	r3, [pc, #132]	; (802a0 <usart_serial_read_packet+0xb4>)
   8021c:	4798      	blx	r3
   8021e:	2800      	cmp	r0, #0
   80220:	d1f9      	bne.n	80216 <usart_serial_read_packet+0x2a>
   80222:	e019      	b.n	80258 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80224:	4b1f      	ldr	r3, [pc, #124]	; (802a4 <usart_serial_read_packet+0xb8>)
   80226:	429d      	cmp	r5, r3
   80228:	d109      	bne.n	8023e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8022a:	4699      	mov	r9, r3
   8022c:	4648      	mov	r0, r9
   8022e:	a901      	add	r1, sp, #4
   80230:	47a0      	blx	r4
   80232:	2800      	cmp	r0, #0
   80234:	d1fa      	bne.n	8022c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80236:	9b01      	ldr	r3, [sp, #4]
   80238:	f806 3c01 	strb.w	r3, [r6, #-1]
   8023c:	e017      	b.n	8026e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8023e:	4b1a      	ldr	r3, [pc, #104]	; (802a8 <usart_serial_read_packet+0xbc>)
   80240:	429d      	cmp	r5, r3
   80242:	d109      	bne.n	80258 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80244:	4699      	mov	r9, r3
   80246:	4648      	mov	r0, r9
   80248:	a901      	add	r1, sp, #4
   8024a:	47a0      	blx	r4
   8024c:	2800      	cmp	r0, #0
   8024e:	d1fa      	bne.n	80246 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80250:	9b01      	ldr	r3, [sp, #4]
   80252:	f806 3c01 	strb.w	r3, [r6, #-1]
   80256:	e014      	b.n	80282 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80258:	4555      	cmp	r5, sl
   8025a:	d108      	bne.n	8026e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8025c:	4650      	mov	r0, sl
   8025e:	a901      	add	r1, sp, #4
   80260:	47a0      	blx	r4
   80262:	2800      	cmp	r0, #0
   80264:	d1fa      	bne.n	8025c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80266:	9b01      	ldr	r3, [sp, #4]
   80268:	f806 3c01 	strb.w	r3, [r6, #-1]
   8026c:	e009      	b.n	80282 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8026e:	42bd      	cmp	r5, r7
   80270:	d107      	bne.n	80282 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80272:	4638      	mov	r0, r7
   80274:	a901      	add	r1, sp, #4
   80276:	47a0      	blx	r4
   80278:	2800      	cmp	r0, #0
   8027a:	d1fa      	bne.n	80272 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8027c:	9b01      	ldr	r3, [sp, #4]
   8027e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80282:	3601      	adds	r6, #1
   80284:	f1b8 0801 	subs.w	r8, r8, #1
   80288:	d1be      	bne.n	80208 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8028a:	2000      	movs	r0, #0
   8028c:	b003      	add	sp, #12
   8028e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80292:	bf00      	nop
   80294:	400a4000 	.word	0x400a4000
   80298:	00080489 	.word	0x00080489
   8029c:	400e0800 	.word	0x400e0800
   802a0:	00080461 	.word	0x00080461
   802a4:	40098000 	.word	0x40098000
   802a8:	4009c000 	.word	0x4009c000
   802ac:	400a0000 	.word	0x400a0000

000802b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b4:	460c      	mov	r4, r1
   802b6:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   802b8:	b960      	cbnz	r0, 802d4 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   802ba:	2a00      	cmp	r2, #0
   802bc:	dd0e      	ble.n	802dc <_read+0x2c>
   802be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802c0:	4e09      	ldr	r6, [pc, #36]	; (802e8 <_read+0x38>)
   802c2:	4d0a      	ldr	r5, [pc, #40]	; (802ec <_read+0x3c>)
   802c4:	6830      	ldr	r0, [r6, #0]
   802c6:	4621      	mov	r1, r4
   802c8:	682b      	ldr	r3, [r5, #0]
   802ca:	4798      	blx	r3
		ptr++;
   802cc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802ce:	42bc      	cmp	r4, r7
   802d0:	d1f8      	bne.n	802c4 <_read+0x14>
   802d2:	e006      	b.n	802e2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802d4:	f04f 30ff 	mov.w	r0, #4294967295
   802d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802dc:	2000      	movs	r0, #0
   802de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802e2:	4640      	mov	r0, r8
	}
	return nChars;
}
   802e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802e8:	20070b30 	.word	0x20070b30
   802ec:	20070b28 	.word	0x20070b28

000802f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802f4:	460e      	mov	r6, r1
   802f6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802f8:	3801      	subs	r0, #1
   802fa:	2802      	cmp	r0, #2
   802fc:	d80f      	bhi.n	8031e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802fe:	b192      	cbz	r2, 80326 <_write+0x36>
   80300:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80302:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80340 <_write+0x50>
   80306:	4f0d      	ldr	r7, [pc, #52]	; (8033c <_write+0x4c>)
   80308:	f8d8 0000 	ldr.w	r0, [r8]
   8030c:	5d31      	ldrb	r1, [r6, r4]
   8030e:	683b      	ldr	r3, [r7, #0]
   80310:	4798      	blx	r3
   80312:	2800      	cmp	r0, #0
   80314:	db0a      	blt.n	8032c <_write+0x3c>
			return -1;
		}
		++nChars;
   80316:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80318:	42a5      	cmp	r5, r4
   8031a:	d1f5      	bne.n	80308 <_write+0x18>
   8031c:	e00a      	b.n	80334 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8031e:	f04f 30ff 	mov.w	r0, #4294967295
   80322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80326:	2000      	movs	r0, #0
   80328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8032c:	f04f 30ff 	mov.w	r0, #4294967295
   80330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80334:	4620      	mov	r0, r4
	}
	return nChars;
}
   80336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8033a:	bf00      	nop
   8033c:	20070b2c 	.word	0x20070b2c
   80340:	20070b30 	.word	0x20070b30

00080344 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80344:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80346:	2401      	movs	r4, #1
   80348:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8034a:	2400      	movs	r4, #0
   8034c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8034e:	f240 2502 	movw	r5, #514	; 0x202
   80352:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80356:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8035a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8035e:	6845      	ldr	r5, [r0, #4]
   80360:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80362:	0052      	lsls	r2, r2, #1
   80364:	fbb1 f1f2 	udiv	r1, r1, r2
   80368:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8036a:	022d      	lsls	r5, r5, #8
   8036c:	b2ad      	uxth	r5, r5
   8036e:	432b      	orrs	r3, r5
   80370:	6043      	str	r3, [r0, #4]
	return 0;
}
   80372:	4620      	mov	r0, r4
   80374:	bc30      	pop	{r4, r5}
   80376:	4770      	bx	lr

00080378 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80378:	6843      	ldr	r3, [r0, #4]
   8037a:	f023 0310 	bic.w	r3, r3, #16
   8037e:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80380:	6843      	ldr	r3, [r0, #4]
   80382:	4319      	orrs	r1, r3
   80384:	6041      	str	r1, [r0, #4]
   80386:	4770      	bx	lr

00080388 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80388:	6843      	ldr	r3, [r0, #4]
   8038a:	4319      	orrs	r1, r3
   8038c:	01d2      	lsls	r2, r2, #7
   8038e:	b2d3      	uxtb	r3, r2
   80390:	4319      	orrs	r1, r3
   80392:	6041      	str	r1, [r0, #4]
   80394:	4770      	bx	lr
   80396:	bf00      	nop

00080398 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80398:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8039a:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8039c:	4322      	orrs	r2, r4
   8039e:	0609      	lsls	r1, r1, #24
   803a0:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   803a4:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803a6:	071b      	lsls	r3, r3, #28
   803a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   803ac:	431a      	orrs	r2, r3
   803ae:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   803b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   803b4:	4770      	bx	lr
   803b6:	bf00      	nop

000803b8 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   803b8:	2302      	movs	r3, #2
   803ba:	6003      	str	r3, [r0, #0]
   803bc:	4770      	bx	lr
   803be:	bf00      	nop

000803c0 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   803c0:	2301      	movs	r3, #1
   803c2:	fa03 f101 	lsl.w	r1, r3, r1
   803c6:	6101      	str	r1, [r0, #16]
   803c8:	4770      	bx	lr
   803ca:	bf00      	nop

000803cc <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   803cc:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   803ce:	bf9a      	itte	ls
   803d0:	3114      	addls	r1, #20
   803d2:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   803d6:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   803d8:	4770      	bx	lr
   803da:	bf00      	nop

000803dc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   803dc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803de:	0189      	lsls	r1, r1, #6
   803e0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   803e2:	2402      	movs	r4, #2
   803e4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   803e6:	f04f 31ff 	mov.w	r1, #4294967295
   803ea:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   803ec:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   803ee:	605a      	str	r2, [r3, #4]
}
   803f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   803f4:	4770      	bx	lr
   803f6:	bf00      	nop

000803f8 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   803f8:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   803fc:	4770      	bx	lr
   803fe:	bf00      	nop

00080400 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80400:	0189      	lsls	r1, r1, #6
   80402:	2305      	movs	r3, #5
   80404:	5043      	str	r3, [r0, r1]
   80406:	4770      	bx	lr

00080408 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80408:	0189      	lsls	r1, r1, #6
   8040a:	2302      	movs	r3, #2
   8040c:	5043      	str	r3, [r0, r1]
   8040e:	4770      	bx	lr

00080410 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80410:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80414:	6908      	ldr	r0, [r1, #16]
}
   80416:	4770      	bx	lr

00080418 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80418:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8041a:	23ac      	movs	r3, #172	; 0xac
   8041c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8041e:	680a      	ldr	r2, [r1, #0]
   80420:	684b      	ldr	r3, [r1, #4]
   80422:	fbb2 f3f3 	udiv	r3, r2, r3
   80426:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80428:	1e5c      	subs	r4, r3, #1
   8042a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8042e:	4294      	cmp	r4, r2
   80430:	d80a      	bhi.n	80448 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80432:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80434:	688b      	ldr	r3, [r1, #8]
   80436:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80438:	f240 2302 	movw	r3, #514	; 0x202
   8043c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80440:	2350      	movs	r3, #80	; 0x50
   80442:	6003      	str	r3, [r0, #0]

	return 0;
   80444:	2000      	movs	r0, #0
   80446:	e000      	b.n	8044a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80448:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8044a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8044e:	4770      	bx	lr

00080450 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80450:	6943      	ldr	r3, [r0, #20]
   80452:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80456:	bf1a      	itte	ne
   80458:	61c1      	strne	r1, [r0, #28]
	return 0;
   8045a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8045c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8045e:	4770      	bx	lr

00080460 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80460:	6943      	ldr	r3, [r0, #20]
   80462:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80466:	bf1d      	ittte	ne
   80468:	6983      	ldrne	r3, [r0, #24]
   8046a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8046c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8046e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80470:	4770      	bx	lr
   80472:	bf00      	nop

00080474 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80474:	6943      	ldr	r3, [r0, #20]
   80476:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8047a:	bf1d      	ittte	ne
   8047c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80480:	61c1      	strne	r1, [r0, #28]
	return 0;
   80482:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80484:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80486:	4770      	bx	lr

00080488 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80488:	6943      	ldr	r3, [r0, #20]
   8048a:	f013 0f01 	tst.w	r3, #1
   8048e:	d005      	beq.n	8049c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80490:	6983      	ldr	r3, [r0, #24]
   80492:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80496:	600b      	str	r3, [r1, #0]

	return 0;
   80498:	2000      	movs	r0, #0
   8049a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8049c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8049e:	4770      	bx	lr

000804a0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   804a0:	b500      	push	{lr}
   804a2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   804a4:	4811      	ldr	r0, [pc, #68]	; (804ec <USART0_Handler+0x4c>)
   804a6:	f10d 0107 	add.w	r1, sp, #7
   804aa:	2201      	movs	r2, #1
   804ac:	4b10      	ldr	r3, [pc, #64]	; (804f0 <USART0_Handler+0x50>)
   804ae:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   804b0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804b2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   804b6:	2200      	movs	r2, #0
   804b8:	4b0e      	ldr	r3, [pc, #56]	; (804f4 <USART0_Handler+0x54>)
   804ba:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   804bc:	4b0e      	ldr	r3, [pc, #56]	; (804f8 <USART0_Handler+0x58>)
   804be:	781b      	ldrb	r3, [r3, #0]
   804c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   804c4:	4a0d      	ldr	r2, [pc, #52]	; (804fc <USART0_Handler+0x5c>)
   804c6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   804c8:	2b9b      	cmp	r3, #155	; 0x9b
   804ca:	d103      	bne.n	804d4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   804cc:	2200      	movs	r2, #0
   804ce:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <USART0_Handler+0x58>)
   804d0:	701a      	strb	r2, [r3, #0]
   804d2:	e002      	b.n	804da <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   804d4:	3301      	adds	r3, #1
   804d6:	4a08      	ldr	r2, [pc, #32]	; (804f8 <USART0_Handler+0x58>)
   804d8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   804da:	2201      	movs	r2, #1
   804dc:	4b05      	ldr	r3, [pc, #20]	; (804f4 <USART0_Handler+0x54>)
   804de:	701a      	strb	r2, [r3, #0]
   804e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   804e4:	b662      	cpsie	i
}
   804e6:	b003      	add	sp, #12
   804e8:	f85d fb04 	ldr.w	pc, [sp], #4
   804ec:	40098000 	.word	0x40098000
   804f0:	000801ed 	.word	0x000801ed
   804f4:	20070158 	.word	0x20070158
   804f8:	20070a7c 	.word	0x20070a7c
   804fc:	200709e0 	.word	0x200709e0

00080500 <readLCDbutton>:
#include "adcFunctions.h"	/* Must use the value from the ADC to figure out which button */
#include "LCDFunctions.h"
#include "lcdApplication.h"

buttonType readLCDbutton(void)
{
   80500:	b508      	push	{r3, lr}
	if (analogRead(0) < 50)
   80502:	2000      	movs	r0, #0
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <readLCDbutton+0x58>)
   80506:	4798      	blx	r3
   80508:	2831      	cmp	r0, #49	; 0x31
   8050a:	d91d      	bls.n	80548 <readLCDbutton+0x48>
	{
		return btnRIGHT;
	}
	else if (analogRead(0) < 600)
   8050c:	2000      	movs	r0, #0
   8050e:	4b12      	ldr	r3, [pc, #72]	; (80558 <readLCDbutton+0x58>)
   80510:	4798      	blx	r3
   80512:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   80516:	d319      	bcc.n	8054c <readLCDbutton+0x4c>
	{
		return btnUP;
	}
	else if (analogRead(0) < 1300)
   80518:	2000      	movs	r0, #0
   8051a:	4b0f      	ldr	r3, [pc, #60]	; (80558 <readLCDbutton+0x58>)
   8051c:	4798      	blx	r3
   8051e:	f240 5313 	movw	r3, #1299	; 0x513
   80522:	4298      	cmp	r0, r3
   80524:	d914      	bls.n	80550 <readLCDbutton+0x50>
	{
		return btnDOWN;
	}
	else if (analogRead(0) < 1900)
   80526:	2000      	movs	r0, #0
   80528:	4b0b      	ldr	r3, [pc, #44]	; (80558 <readLCDbutton+0x58>)
   8052a:	4798      	blx	r3
   8052c:	f240 736b 	movw	r3, #1899	; 0x76b
   80530:	4298      	cmp	r0, r3
   80532:	d90f      	bls.n	80554 <readLCDbutton+0x54>
	{
		return btnLEFT;
	}
	else if (analogRead(0) < 2500)
   80534:	2000      	movs	r0, #0
   80536:	4b08      	ldr	r3, [pc, #32]	; (80558 <readLCDbutton+0x58>)
   80538:	4798      	blx	r3
	{
		return btnSELECT;
   8053a:	f640 13c3 	movw	r3, #2499	; 0x9c3
   8053e:	4298      	cmp	r0, r3
   80540:	bf8c      	ite	hi
   80542:	2005      	movhi	r0, #5
   80544:	2004      	movls	r0, #4
   80546:	bd08      	pop	{r3, pc}

buttonType readLCDbutton(void)
{
	if (analogRead(0) < 50)
	{
		return btnRIGHT;
   80548:	2000      	movs	r0, #0
   8054a:	bd08      	pop	{r3, pc}
	}
	else if (analogRead(0) < 600)
	{
		return btnUP;
   8054c:	2001      	movs	r0, #1
   8054e:	bd08      	pop	{r3, pc}
	}
	else if (analogRead(0) < 1300)
	{
		return btnDOWN;
   80550:	2002      	movs	r0, #2
   80552:	bd08      	pop	{r3, pc}
	}
	else if (analogRead(0) < 1900)
	{
		return btnLEFT;
   80554:	2003      	movs	r0, #3
	}
	else 
	{
		return btnNONE;
	}
   80556:	bd08      	pop	{r3, pc}
   80558:	000801b9 	.word	0x000801b9

0008055c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8055c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8055e:	b083      	sub	sp, #12
   80560:	4604      	mov	r4, r0
   80562:	460d      	mov	r5, r1
	uint32_t val = 0;
   80564:	2300      	movs	r3, #0
   80566:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80568:	4b1f      	ldr	r3, [pc, #124]	; (805e8 <usart_serial_getchar+0x8c>)
   8056a:	4298      	cmp	r0, r3
   8056c:	d107      	bne.n	8057e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8056e:	461f      	mov	r7, r3
   80570:	4e1e      	ldr	r6, [pc, #120]	; (805ec <usart_serial_getchar+0x90>)
   80572:	4638      	mov	r0, r7
   80574:	4629      	mov	r1, r5
   80576:	47b0      	blx	r6
   80578:	2800      	cmp	r0, #0
   8057a:	d1fa      	bne.n	80572 <usart_serial_getchar+0x16>
   8057c:	e019      	b.n	805b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8057e:	4b1c      	ldr	r3, [pc, #112]	; (805f0 <usart_serial_getchar+0x94>)
   80580:	4298      	cmp	r0, r3
   80582:	d109      	bne.n	80598 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80584:	461f      	mov	r7, r3
   80586:	4e1b      	ldr	r6, [pc, #108]	; (805f4 <usart_serial_getchar+0x98>)
   80588:	4638      	mov	r0, r7
   8058a:	a901      	add	r1, sp, #4
   8058c:	47b0      	blx	r6
   8058e:	2800      	cmp	r0, #0
   80590:	d1fa      	bne.n	80588 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80592:	9b01      	ldr	r3, [sp, #4]
   80594:	702b      	strb	r3, [r5, #0]
   80596:	e019      	b.n	805cc <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80598:	4b17      	ldr	r3, [pc, #92]	; (805f8 <usart_serial_getchar+0x9c>)
   8059a:	4298      	cmp	r0, r3
   8059c:	d109      	bne.n	805b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8059e:	461e      	mov	r6, r3
   805a0:	4c14      	ldr	r4, [pc, #80]	; (805f4 <usart_serial_getchar+0x98>)
   805a2:	4630      	mov	r0, r6
   805a4:	a901      	add	r1, sp, #4
   805a6:	47a0      	blx	r4
   805a8:	2800      	cmp	r0, #0
   805aa:	d1fa      	bne.n	805a2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   805ac:	9b01      	ldr	r3, [sp, #4]
   805ae:	702b      	strb	r3, [r5, #0]
   805b0:	e018      	b.n	805e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805b2:	4b12      	ldr	r3, [pc, #72]	; (805fc <usart_serial_getchar+0xa0>)
   805b4:	429c      	cmp	r4, r3
   805b6:	d109      	bne.n	805cc <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   805b8:	461e      	mov	r6, r3
   805ba:	4c0e      	ldr	r4, [pc, #56]	; (805f4 <usart_serial_getchar+0x98>)
   805bc:	4630      	mov	r0, r6
   805be:	a901      	add	r1, sp, #4
   805c0:	47a0      	blx	r4
   805c2:	2800      	cmp	r0, #0
   805c4:	d1fa      	bne.n	805bc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   805c6:	9b01      	ldr	r3, [sp, #4]
   805c8:	702b      	strb	r3, [r5, #0]
   805ca:	e00b      	b.n	805e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805cc:	4b0c      	ldr	r3, [pc, #48]	; (80600 <usart_serial_getchar+0xa4>)
   805ce:	429c      	cmp	r4, r3
   805d0:	d108      	bne.n	805e4 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   805d2:	461e      	mov	r6, r3
   805d4:	4c07      	ldr	r4, [pc, #28]	; (805f4 <usart_serial_getchar+0x98>)
   805d6:	4630      	mov	r0, r6
   805d8:	a901      	add	r1, sp, #4
   805da:	47a0      	blx	r4
   805dc:	2800      	cmp	r0, #0
   805de:	d1fa      	bne.n	805d6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   805e0:	9b01      	ldr	r3, [sp, #4]
   805e2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   805e4:	b003      	add	sp, #12
   805e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   805e8:	400e0800 	.word	0x400e0800
   805ec:	00080461 	.word	0x00080461
   805f0:	40098000 	.word	0x40098000
   805f4:	00080489 	.word	0x00080489
   805f8:	4009c000 	.word	0x4009c000
   805fc:	400a0000 	.word	0x400a0000
   80600:	400a4000 	.word	0x400a4000

00080604 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80604:	b570      	push	{r4, r5, r6, lr}
   80606:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80608:	4b21      	ldr	r3, [pc, #132]	; (80690 <usart_serial_putchar+0x8c>)
   8060a:	4298      	cmp	r0, r3
   8060c:	d107      	bne.n	8061e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8060e:	461e      	mov	r6, r3
   80610:	4d20      	ldr	r5, [pc, #128]	; (80694 <usart_serial_putchar+0x90>)
   80612:	4630      	mov	r0, r6
   80614:	4621      	mov	r1, r4
   80616:	47a8      	blx	r5
   80618:	2800      	cmp	r0, #0
   8061a:	d1fa      	bne.n	80612 <usart_serial_putchar+0xe>
   8061c:	e02b      	b.n	80676 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8061e:	4b1e      	ldr	r3, [pc, #120]	; (80698 <usart_serial_putchar+0x94>)
   80620:	4298      	cmp	r0, r3
   80622:	d107      	bne.n	80634 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80624:	461e      	mov	r6, r3
   80626:	4d1d      	ldr	r5, [pc, #116]	; (8069c <usart_serial_putchar+0x98>)
   80628:	4630      	mov	r0, r6
   8062a:	4621      	mov	r1, r4
   8062c:	47a8      	blx	r5
   8062e:	2800      	cmp	r0, #0
   80630:	d1fa      	bne.n	80628 <usart_serial_putchar+0x24>
   80632:	e022      	b.n	8067a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80634:	4b1a      	ldr	r3, [pc, #104]	; (806a0 <usart_serial_putchar+0x9c>)
   80636:	4298      	cmp	r0, r3
   80638:	d107      	bne.n	8064a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8063a:	461e      	mov	r6, r3
   8063c:	4d17      	ldr	r5, [pc, #92]	; (8069c <usart_serial_putchar+0x98>)
   8063e:	4630      	mov	r0, r6
   80640:	4621      	mov	r1, r4
   80642:	47a8      	blx	r5
   80644:	2800      	cmp	r0, #0
   80646:	d1fa      	bne.n	8063e <usart_serial_putchar+0x3a>
   80648:	e019      	b.n	8067e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8064a:	4b16      	ldr	r3, [pc, #88]	; (806a4 <usart_serial_putchar+0xa0>)
   8064c:	4298      	cmp	r0, r3
   8064e:	d107      	bne.n	80660 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80650:	461e      	mov	r6, r3
   80652:	4d12      	ldr	r5, [pc, #72]	; (8069c <usart_serial_putchar+0x98>)
   80654:	4630      	mov	r0, r6
   80656:	4621      	mov	r1, r4
   80658:	47a8      	blx	r5
   8065a:	2800      	cmp	r0, #0
   8065c:	d1fa      	bne.n	80654 <usart_serial_putchar+0x50>
   8065e:	e010      	b.n	80682 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80660:	4b11      	ldr	r3, [pc, #68]	; (806a8 <usart_serial_putchar+0xa4>)
   80662:	4298      	cmp	r0, r3
   80664:	d10f      	bne.n	80686 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80666:	461e      	mov	r6, r3
   80668:	4d0c      	ldr	r5, [pc, #48]	; (8069c <usart_serial_putchar+0x98>)
   8066a:	4630      	mov	r0, r6
   8066c:	4621      	mov	r1, r4
   8066e:	47a8      	blx	r5
   80670:	2800      	cmp	r0, #0
   80672:	d1fa      	bne.n	8066a <usart_serial_putchar+0x66>
   80674:	e009      	b.n	8068a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80676:	2001      	movs	r0, #1
   80678:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8067a:	2001      	movs	r0, #1
   8067c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8067e:	2001      	movs	r0, #1
   80680:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80682:	2001      	movs	r0, #1
   80684:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80686:	2000      	movs	r0, #0
   80688:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8068a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8068c:	bd70      	pop	{r4, r5, r6, pc}
   8068e:	bf00      	nop
   80690:	400e0800 	.word	0x400e0800
   80694:	00080451 	.word	0x00080451
   80698:	40098000 	.word	0x40098000
   8069c:	00080475 	.word	0x00080475
   806a0:	4009c000 	.word	0x4009c000
   806a4:	400a0000 	.word	0x400a0000
   806a8:	400a4000 	.word	0x400a4000

000806ac <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   806ac:	b530      	push	{r4, r5, lr}
   806ae:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806b0:	2008      	movs	r0, #8
   806b2:	4d15      	ldr	r5, [pc, #84]	; (80708 <configureConsole+0x5c>)
   806b4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   806b6:	4c15      	ldr	r4, [pc, #84]	; (8070c <configureConsole+0x60>)
   806b8:	4b15      	ldr	r3, [pc, #84]	; (80710 <configureConsole+0x64>)
   806ba:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   806bc:	4a15      	ldr	r2, [pc, #84]	; (80714 <configureConsole+0x68>)
   806be:	4b16      	ldr	r3, [pc, #88]	; (80718 <configureConsole+0x6c>)
   806c0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   806c2:	4a16      	ldr	r2, [pc, #88]	; (8071c <configureConsole+0x70>)
   806c4:	4b16      	ldr	r3, [pc, #88]	; (80720 <configureConsole+0x74>)
   806c6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806c8:	4b16      	ldr	r3, [pc, #88]	; (80724 <configureConsole+0x78>)
   806ca:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   806cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   806d0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   806d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806d6:	9303      	str	r3, [sp, #12]
   806d8:	2008      	movs	r0, #8
   806da:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   806dc:	4620      	mov	r0, r4
   806de:	a901      	add	r1, sp, #4
   806e0:	4b11      	ldr	r3, [pc, #68]	; (80728 <configureConsole+0x7c>)
   806e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   806e4:	4d11      	ldr	r5, [pc, #68]	; (8072c <configureConsole+0x80>)
   806e6:	682b      	ldr	r3, [r5, #0]
   806e8:	6898      	ldr	r0, [r3, #8]
   806ea:	2100      	movs	r1, #0
   806ec:	4c10      	ldr	r4, [pc, #64]	; (80730 <configureConsole+0x84>)
   806ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806f0:	682b      	ldr	r3, [r5, #0]
   806f2:	6858      	ldr	r0, [r3, #4]
   806f4:	2100      	movs	r1, #0
   806f6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   806f8:	480e      	ldr	r0, [pc, #56]	; (80734 <configureConsole+0x88>)
   806fa:	4c0f      	ldr	r4, [pc, #60]	; (80738 <configureConsole+0x8c>)
   806fc:	47a0      	blx	r4
	printf("=============\n");
   806fe:	480f      	ldr	r0, [pc, #60]	; (8073c <configureConsole+0x90>)
   80700:	47a0      	blx	r4
   80702:	b005      	add	sp, #20
   80704:	bd30      	pop	{r4, r5, pc}
   80706:	bf00      	nop
   80708:	00082541 	.word	0x00082541
   8070c:	400e0800 	.word	0x400e0800
   80710:	20070b30 	.word	0x20070b30
   80714:	00080605 	.word	0x00080605
   80718:	20070b2c 	.word	0x20070b2c
   8071c:	0008055d 	.word	0x0008055d
   80720:	20070b28 	.word	0x20070b28
   80724:	0501bd00 	.word	0x0501bd00
   80728:	00080419 	.word	0x00080419
   8072c:	20070588 	.word	0x20070588
   80730:	000828c5 	.word	0x000828c5
   80734:	00085768 	.word	0x00085768
   80738:	00082809 	.word	0x00082809
   8073c:	00085778 	.word	0x00085778

00080740 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   80740:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   80742:	201b      	movs	r0, #27
   80744:	4b08      	ldr	r3, [pc, #32]	; (80768 <delayInit+0x28>)
   80746:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   80748:	4c08      	ldr	r4, [pc, #32]	; (8076c <delayInit+0x2c>)
   8074a:	4620      	mov	r0, r4
   8074c:	2100      	movs	r1, #0
   8074e:	460a      	mov	r2, r1
   80750:	4b07      	ldr	r3, [pc, #28]	; (80770 <delayInit+0x30>)
   80752:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80754:	4620      	mov	r0, r4
   80756:	2100      	movs	r1, #0
   80758:	4b06      	ldr	r3, [pc, #24]	; (80774 <delayInit+0x34>)
   8075a:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   8075c:	4620      	mov	r0, r4
   8075e:	2100      	movs	r1, #0
   80760:	4b05      	ldr	r3, [pc, #20]	; (80778 <delayInit+0x38>)
   80762:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80764:	2000      	movs	r0, #0
   80766:	bd10      	pop	{r4, pc}
   80768:	00082541 	.word	0x00082541
   8076c:	40080000 	.word	0x40080000
   80770:	000803dd 	.word	0x000803dd
   80774:	000803f9 	.word	0x000803f9
   80778:	00080409 	.word	0x00080409

0008077c <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   8077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8077e:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80780:	4809      	ldr	r0, [pc, #36]	; (807a8 <delayMicroseconds+0x2c>)
   80782:	2100      	movs	r1, #0
   80784:	4b09      	ldr	r3, [pc, #36]	; (807ac <delayMicroseconds+0x30>)
   80786:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   80788:	272a      	movs	r7, #42	; 0x2a
   8078a:	fb07 f704 	mul.w	r7, r7, r4
   8078e:	4e06      	ldr	r6, [pc, #24]	; (807a8 <delayMicroseconds+0x2c>)
   80790:	2500      	movs	r5, #0
   80792:	4c07      	ldr	r4, [pc, #28]	; (807b0 <delayMicroseconds+0x34>)
   80794:	4630      	mov	r0, r6
   80796:	4629      	mov	r1, r5
   80798:	47a0      	blx	r4
   8079a:	42b8      	cmp	r0, r7
   8079c:	d3fa      	bcc.n	80794 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8079e:	4802      	ldr	r0, [pc, #8]	; (807a8 <delayMicroseconds+0x2c>)
   807a0:	2100      	movs	r1, #0
   807a2:	4b04      	ldr	r3, [pc, #16]	; (807b4 <delayMicroseconds+0x38>)
   807a4:	4798      	blx	r3
   807a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807a8:	40080000 	.word	0x40080000
   807ac:	00080401 	.word	0x00080401
   807b0:	00080411 	.word	0x00080411
   807b4:	00080409 	.word	0x00080409

000807b8 <lcdWrite4DigitNumber>:
#include "buttons.h"	/* to get the buttontype definiton */
#include "LCDFunctions.h"
#include "delayFunctions.h"

int lcdWrite4DigitNumber(int number)
{
   807b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   807ba:	b085      	sub	sp, #20
	int temp[4];
	int count = 0;
	while (number > 0)
   807bc:	2800      	cmp	r0, #0
   807be:	dd1d      	ble.n	807fc <lcdWrite4DigitNumber+0x44>
   807c0:	f1ad 0204 	sub.w	r2, sp, #4
	{
		int digit = number % 10;
   807c4:	4c14      	ldr	r4, [pc, #80]	; (80818 <lcdWrite4DigitNumber+0x60>)
   807c6:	fb84 3100 	smull	r3, r1, r4, r0
   807ca:	17c3      	asrs	r3, r0, #31
   807cc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   807d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   807d4:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
		temp[count] = digit;
   807d8:	f842 0f04 	str.w	r0, [r2, #4]!
		count++;
		number /= 10;
   807dc:	4618      	mov	r0, r3

int lcdWrite4DigitNumber(int number)
{
	int temp[4];
	int count = 0;
	while (number > 0)
   807de:	2b00      	cmp	r3, #0
   807e0:	dcf1      	bgt.n	807c6 <lcdWrite4DigitNumber+0xe>
   807e2:	e00b      	b.n	807fc <lcdWrite4DigitNumber+0x44>
		number /= 10;
	}
	
	for (int i = 3; i > -1; i--)
	{
		if (temp[i] >= 0 && temp[i] <= 9)
   807e4:	f854 3904 	ldr.w	r3, [r4], #-4
   807e8:	2b09      	cmp	r3, #9
   807ea:	d804      	bhi.n	807f6 <lcdWrite4DigitNumber+0x3e>
		{
			lcdWrite(temp[i] + 48, HIGH);
   807ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
   807f0:	b2c0      	uxtb	r0, r0
   807f2:	4639      	mov	r1, r7
   807f4:	47b0      	blx	r6
		temp[count] = digit;
		count++;
		number /= 10;
	}
	
	for (int i = 3; i > -1; i--)
   807f6:	42ac      	cmp	r4, r5
   807f8:	d1f4      	bne.n	807e4 <lcdWrite4DigitNumber+0x2c>
   807fa:	e005      	b.n	80808 <lcdWrite4DigitNumber+0x50>
   807fc:	ac03      	add	r4, sp, #12
   807fe:	f1ad 0504 	sub.w	r5, sp, #4
	{
		if (temp[i] >= 0 && temp[i] <= 9)
		{
			lcdWrite(temp[i] + 48, HIGH);
   80802:	2701      	movs	r7, #1
   80804:	4e05      	ldr	r6, [pc, #20]	; (8081c <lcdWrite4DigitNumber+0x64>)
   80806:	e7ed      	b.n	807e4 <lcdWrite4DigitNumber+0x2c>
		}
	}
	delayMicroseconds(500);
   80808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   8080c:	4b04      	ldr	r3, [pc, #16]	; (80820 <lcdWrite4DigitNumber+0x68>)
   8080e:	4798      	blx	r3
	return 0;	/* Assuming everything went ok */	
}
   80810:	2000      	movs	r0, #0
   80812:	b005      	add	sp, #20
   80814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80816:	bf00      	nop
   80818:	66666667 	.word	0x66666667
   8081c:	00080839 	.word	0x00080839
   80820:	0008077d 	.word	0x0008077d

00080824 <lcdWriteAsciiString>:
/* writes an ascii string up to 40 characters on the LCD display */
{
	/* Write code here */
	
	return 0;	/* Assuming everything went ok */
}
   80824:	2000      	movs	r0, #0
   80826:	4770      	bx	lr

00080828 <lcdWriteButtonValue>:

int lcdWriteButtonValue(buttonType inputButton)
/* Writes the text corresponding to one of the buttosn on the LCD dispaly using lcdWriteAsciiString() 
 * Output should be one of SELECT, LEFT, UP, DOWN, RIGHT on the LCD display
 * if no buttons is pushed you can chose on displaying nothing or NONE  */
{
   80828:	b508      	push	{r3, lr}
	lcdWrite(inputButton, HIGH);
   8082a:	2101      	movs	r1, #1
   8082c:	4b01      	ldr	r3, [pc, #4]	; (80834 <lcdWriteButtonValue+0xc>)
   8082e:	4798      	blx	r3
	return 0;	/* Assuming everything went ok */
   80830:	2000      	movs	r0, #0
   80832:	bd08      	pop	{r3, pc}
   80834:	00080839 	.word	0x00080839

00080838 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80838:	b5f0      	push	{r4, r5, r6, r7, lr}
   8083a:	b085      	sub	sp, #20
   8083c:	4607      	mov	r7, r0
   8083e:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   80840:	4b1e      	ldr	r3, [pc, #120]	; (808bc <lcdWrite+0x84>)
   80842:	466c      	mov	r4, sp
   80844:	6818      	ldr	r0, [r3, #0]
   80846:	6859      	ldr	r1, [r3, #4]
   80848:	689a      	ldr	r2, [r3, #8]
   8084a:	68db      	ldr	r3, [r3, #12]
   8084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   8084e:	eb04 1317 	add.w	r3, r4, r7, lsr #4
	byte32 = (uint32_t)byte << 23;
   80852:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   80856:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80858:	b125      	cbz	r5, 80864 <lcdWrite+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8085a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8085e:	4a18      	ldr	r2, [pc, #96]	; (808c0 <lcdWrite+0x88>)
   80860:	6311      	str	r1, [r2, #48]	; 0x30
   80862:	e003      	b.n	8086c <lcdWrite+0x34>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80864:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80868:	4a15      	ldr	r2, [pc, #84]	; (808c0 <lcdWrite+0x88>)
   8086a:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   8086c:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80870:	4c13      	ldr	r4, [pc, #76]	; (808c0 <lcdWrite+0x88>)
   80872:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80874:	43db      	mvns	r3, r3
   80876:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   8087a:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8087c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   80880:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80882:	2001      	movs	r0, #1
   80884:	4d0f      	ldr	r5, [pc, #60]	; (808c4 <lcdWrite+0x8c>)
   80886:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80888:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(100);
   8088a:	2064      	movs	r0, #100	; 0x64
   8088c:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   8088e:	f007 070f 	and.w	r7, r7, #15
   80892:	ab04      	add	r3, sp, #16
   80894:	441f      	add	r7, r3
	byte32 = (uint32_t)byte<<23;
   80896:	f817 3c10 	ldrb.w	r3, [r7, #-16]
   8089a:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   8089c:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   808a0:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   808a2:	43db      	mvns	r3, r3
   808a4:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   808a8:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808aa:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   808ac:	2001      	movs	r0, #1
   808ae:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808b0:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   808b2:	2064      	movs	r0, #100	; 0x64
   808b4:	47a8      	blx	r5
	
	return 0;
}
   808b6:	2000      	movs	r0, #0
   808b8:	b005      	add	sp, #20
   808ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808bc:	00085788 	.word	0x00085788
   808c0:	400e1200 	.word	0x400e1200
   808c4:	0008077d 	.word	0x0008077d

000808c8 <lcdInit>:
#include "lcdFunctions.h"
#include "delayFunctions.h"	/* The sam3x8e microcontroller can write faster than the LCD controller can handle its inputs */
#include "buttons.h"

int lcdInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   808c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   808cc:	4c34      	ldr	r4, [pc, #208]	; (809a0 <lcdInit+0xd8>)
   808ce:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   808d2:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   808d4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   808d8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   808dc:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   808de:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   808e2:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   808e6:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   808e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808ec:	6365      	str	r5, [r4, #52]	; 0x34
	/* At power on */
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(30000);		/* wait > 15 ms */
   808ee:	f247 5030 	movw	r0, #30000	; 0x7530
   808f2:	4e2c      	ldr	r6, [pc, #176]	; (809a4 <lcdInit+0xdc>)
   808f4:	47b0      	blx	r6
   808f6:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808f8:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   808fc:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80900:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80904:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80908:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   8090c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80910:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80914:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80916:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);		/* wait 1 us */
   80918:	2001      	movs	r0, #1
   8091a:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8091c:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(4100);	/* wait for more than 4,1 ms */
   8091e:	f241 0004 	movw	r0, #4100	; 0x1004
   80922:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80924:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80928:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8092c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80930:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80932:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* delay 1 us */
   80934:	2001      	movs	r0, #1
   80936:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80938:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);	/* wait 100 us */
   8093a:	2064      	movs	r0, #100	; 0x64
   8093c:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8093e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80942:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80946:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8094a:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8094c:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* wait 1 us */
   8094e:	2001      	movs	r0, #1
   80950:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80952:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);		
	delayMicroseconds(100);	/* wait 100 us */
   80954:	2064      	movs	r0, #100	; 0x64
   80956:	47b0      	blx	r6
   80958:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8095c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80960:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80964:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80966:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80968:	2001      	movs	r0, #1
   8096a:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8096c:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   8096e:	2064      	movs	r0, #100	; 0x64
   80970:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   80972:	2028      	movs	r0, #40	; 0x28
   80974:	2100      	movs	r1, #0
   80976:	4c0c      	ldr	r4, [pc, #48]	; (809a8 <lcdInit+0xe0>)
   80978:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   8097a:	2008      	movs	r0, #8
   8097c:	2100      	movs	r1, #0
   8097e:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   80980:	2001      	movs	r0, #1
   80982:	2100      	movs	r1, #0
   80984:	47a0      	blx	r4
	delayMicroseconds(3000);
   80986:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8098a:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   8098c:	2006      	movs	r0, #6
   8098e:	2100      	movs	r1, #0
   80990:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   80992:	200f      	movs	r0, #15
   80994:	2100      	movs	r1, #0
   80996:	47a0      	blx	r4

	all_ok = 0;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   80998:	2000      	movs	r0, #0
   8099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8099e:	bf00      	nop
   809a0:	400e1200 	.word	0x400e1200
   809a4:	0008077d 	.word	0x0008077d
   809a8:	00080839 	.word	0x00080839

000809ac <lcdClearDisplay>:
	
	return 0;
}

int lcdClearDisplay(void)
{
   809ac:	b508      	push	{r3, lr}
	lcdWrite(0b0000000001, LOW);
   809ae:	2001      	movs	r0, #1
   809b0:	2100      	movs	r1, #0
   809b2:	4b04      	ldr	r3, [pc, #16]	; (809c4 <lcdClearDisplay+0x18>)
   809b4:	4798      	blx	r3
	delayMicroseconds(3000);
   809b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   809ba:	4b03      	ldr	r3, [pc, #12]	; (809c8 <lcdClearDisplay+0x1c>)
   809bc:	4798      	blx	r3
	return 0;
   809be:	2000      	movs	r0, #0
   809c0:	bd08      	pop	{r3, pc}
   809c2:	bf00      	nop
   809c4:	00080839 	.word	0x00080839
   809c8:	0008077d 	.word	0x0008077d

000809cc <main>:
void setUp(void);
void tearDown(void);
void resetTest(void);

int main(void)
{
   809cc:	b508      	push	{r3, lr}
	sysclk_init();	/* Insert system clock initialization code here (sysclk_init()). */
   809ce:	4b28      	ldr	r3, [pc, #160]	; (80a70 <main+0xa4>)
   809d0:	4798      	blx	r3
	board_init();
   809d2:	4b28      	ldr	r3, [pc, #160]	; (80a74 <main+0xa8>)
   809d4:	4798      	blx	r3

	configureConsole();	/* Initialize the console UART used from within Atmel Studio*/
   809d6:	4b28      	ldr	r3, [pc, #160]	; (80a78 <main+0xac>)
   809d8:	4798      	blx	r3
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/test_delayFunctions.c");	/* Run the tests for the delay from the test-file */
   809da:	4828      	ldr	r0, [pc, #160]	; (80a7c <main+0xb0>)
   809dc:	4e28      	ldr	r6, [pc, #160]	; (80a80 <main+0xb4>)
   809de:	47b0      	blx	r6
	RUN_TEST(test_delayTimerIsInitialisedProperly, 12);
   809e0:	4828      	ldr	r0, [pc, #160]	; (80a84 <main+0xb8>)
   809e2:	4929      	ldr	r1, [pc, #164]	; (80a88 <main+0xbc>)
   809e4:	220c      	movs	r2, #12
   809e6:	4c29      	ldr	r4, [pc, #164]	; (80a8c <main+0xc0>)
   809e8:	47a0      	blx	r4
	RUN_TEST(test_delayCountsProperly, 14);
   809ea:	4829      	ldr	r0, [pc, #164]	; (80a90 <main+0xc4>)
   809ec:	4929      	ldr	r1, [pc, #164]	; (80a94 <main+0xc8>)
   809ee:	220e      	movs	r2, #14
   809f0:	47a0      	blx	r4
	UnityEnd();
   809f2:	4d29      	ldr	r5, [pc, #164]	; (80a98 <main+0xcc>)
   809f4:	47a8      	blx	r5
	
	UnityBegin("../test/test_lcdFunctions.c");	/* Run the tests for the LCD from the test-file */
   809f6:	4829      	ldr	r0, [pc, #164]	; (80a9c <main+0xd0>)
   809f8:	47b0      	blx	r6
	RUN_TEST(test_initialisatinOfTheLCD, 20);
   809fa:	4829      	ldr	r0, [pc, #164]	; (80aa0 <main+0xd4>)
   809fc:	4929      	ldr	r1, [pc, #164]	; (80aa4 <main+0xd8>)
   809fe:	2214      	movs	r2, #20
   80a00:	47a0      	blx	r4
	RUN_TEST(test_writingCharactersToTheLCD, 22);
   80a02:	4829      	ldr	r0, [pc, #164]	; (80aa8 <main+0xdc>)
   80a04:	4929      	ldr	r1, [pc, #164]	; (80aac <main+0xe0>)
   80a06:	2216      	movs	r2, #22
   80a08:	47a0      	blx	r4
	delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
   80a0a:	4829      	ldr	r0, [pc, #164]	; (80ab0 <main+0xe4>)
   80a0c:	4b29      	ldr	r3, [pc, #164]	; (80ab4 <main+0xe8>)
   80a0e:	4798      	blx	r3
	RUN_TEST(test_clearingTheLCDDisplay, 23);
   80a10:	4829      	ldr	r0, [pc, #164]	; (80ab8 <main+0xec>)
   80a12:	492a      	ldr	r1, [pc, #168]	; (80abc <main+0xf0>)
   80a14:	2217      	movs	r2, #23
   80a16:	47a0      	blx	r4
	UnityEnd();
   80a18:	47a8      	blx	r5
	
	UnityBegin("../test/test_adcFunctions.c");	/* Run the tests for the ADC from the test-file */
   80a1a:	4829      	ldr	r0, [pc, #164]	; (80ac0 <main+0xf4>)
   80a1c:	47b0      	blx	r6
	RUN_TEST(test_ADConverterInitialisesProperly, 30);
   80a1e:	4829      	ldr	r0, [pc, #164]	; (80ac4 <main+0xf8>)
   80a20:	4929      	ldr	r1, [pc, #164]	; (80ac8 <main+0xfc>)
   80a22:	221e      	movs	r2, #30
   80a24:	47a0      	blx	r4
	RUN_TEST(test_ADConverterReadsValueWithNoButtonPressed, 35);
   80a26:	4829      	ldr	r0, [pc, #164]	; (80acc <main+0x100>)
   80a28:	4929      	ldr	r1, [pc, #164]	; (80ad0 <main+0x104>)
   80a2a:	2223      	movs	r2, #35	; 0x23
   80a2c:	47a0      	blx	r4
	UnityEnd();
   80a2e:	47a8      	blx	r5

	UnityBegin("../test/test_buttons.c");	/* Run the tests for the buttons from the test-file */
   80a30:	4828      	ldr	r0, [pc, #160]	; (80ad4 <main+0x108>)
   80a32:	47b0      	blx	r6
	RUN_TEST(test_noButtonIsPressed, 40);
   80a34:	4828      	ldr	r0, [pc, #160]	; (80ad8 <main+0x10c>)
   80a36:	4929      	ldr	r1, [pc, #164]	; (80adc <main+0x110>)
   80a38:	2228      	movs	r2, #40	; 0x28
   80a3a:	47a0      	blx	r4
	UnityEnd();
   80a3c:	47a8      	blx	r5
		
	UnityBegin("../test/test_lcdApplication.c");	/* Run the tests for displaying a button on the LCD from the test-file */
   80a3e:	4828      	ldr	r0, [pc, #160]	; (80ae0 <main+0x114>)
   80a40:	47b0      	blx	r6
	RUN_TEST(test_writing4DigitNumberOnTheLCDDisplay, 50);
   80a42:	4828      	ldr	r0, [pc, #160]	; (80ae4 <main+0x118>)
   80a44:	4928      	ldr	r1, [pc, #160]	; (80ae8 <main+0x11c>)
   80a46:	2232      	movs	r2, #50	; 0x32
   80a48:	47a0      	blx	r4
	//delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
	RUN_TEST(test_writingAsciiStringOnTheLCDDisplay, 52);
   80a4a:	4828      	ldr	r0, [pc, #160]	; (80aec <main+0x120>)
   80a4c:	4928      	ldr	r1, [pc, #160]	; (80af0 <main+0x124>)
   80a4e:	2234      	movs	r2, #52	; 0x34
   80a50:	47a0      	blx	r4
	//delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
	RUN_TEST(test_writingButtonOnTheLCDDisplay, 54);
   80a52:	4828      	ldr	r0, [pc, #160]	; (80af4 <main+0x128>)
   80a54:	4928      	ldr	r1, [pc, #160]	; (80af8 <main+0x12c>)
   80a56:	2236      	movs	r2, #54	; 0x36
   80a58:	47a0      	blx	r4
	UnityEnd();
   80a5a:	47a8      	blx	r5
	}*/
	
	/*Infinite loop to display the current button pressed */
	while(1)
	{
		lcdClearDisplay();
   80a5c:	4e27      	ldr	r6, [pc, #156]	; (80afc <main+0x130>)
		lcdWriteButtonValue(readLCDbutton());
   80a5e:	4d28      	ldr	r5, [pc, #160]	; (80b00 <main+0x134>)
   80a60:	4c28      	ldr	r4, [pc, #160]	; (80b04 <main+0x138>)
	}*/
	
	/*Infinite loop to display the current button pressed */
	while(1)
	{
		lcdClearDisplay();
   80a62:	47b0      	blx	r6
		lcdWriteButtonValue(readLCDbutton());
   80a64:	47a8      	blx	r5
   80a66:	47a0      	blx	r4
		delayMicroseconds(500000);
   80a68:	4827      	ldr	r0, [pc, #156]	; (80b08 <main+0x13c>)
   80a6a:	4b12      	ldr	r3, [pc, #72]	; (80ab4 <main+0xe8>)
   80a6c:	4798      	blx	r3
   80a6e:	e7f8      	b.n	80a62 <main+0x96>
   80a70:	000820c5 	.word	0x000820c5
   80a74:	00082129 	.word	0x00082129
   80a78:	000806ad 	.word	0x000806ad
   80a7c:	00085798 	.word	0x00085798
   80a80:	00081ee1 	.word	0x00081ee1
   80a84:	00080bad 	.word	0x00080bad
   80a88:	000857b8 	.word	0x000857b8
   80a8c:	00081e89 	.word	0x00081e89
   80a90:	00080bd9 	.word	0x00080bd9
   80a94:	000857e0 	.word	0x000857e0
   80a98:	00081efd 	.word	0x00081efd
   80a9c:	000857fc 	.word	0x000857fc
   80aa0:	00080da9 	.word	0x00080da9
   80aa4:	00085818 	.word	0x00085818
   80aa8:	00080e09 	.word	0x00080e09
   80aac:	00085834 	.word	0x00085834
   80ab0:	000f4240 	.word	0x000f4240
   80ab4:	0008077d 	.word	0x0008077d
   80ab8:	0008119d 	.word	0x0008119d
   80abc:	00085854 	.word	0x00085854
   80ac0:	00085870 	.word	0x00085870
   80ac4:	00080b15 	.word	0x00080b15
   80ac8:	0008588c 	.word	0x0008588c
   80acc:	00080b61 	.word	0x00080b61
   80ad0:	000858b0 	.word	0x000858b0
   80ad4:	000858e0 	.word	0x000858e0
   80ad8:	00080b8d 	.word	0x00080b8d
   80adc:	000858f8 	.word	0x000858f8
   80ae0:	00085910 	.word	0x00085910
   80ae4:	00080c55 	.word	0x00080c55
   80ae8:	00085930 	.word	0x00085930
   80aec:	00080cc5 	.word	0x00080cc5
   80af0:	00085958 	.word	0x00085958
   80af4:	00080d39 	.word	0x00080d39
   80af8:	00085980 	.word	0x00085980
   80afc:	000809ad 	.word	0x000809ad
   80b00:	00080501 	.word	0x00080501
   80b04:	00080829 	.word	0x00080829
   80b08:	0007a120 	.word	0x0007a120

00080b0c <setUp>:
	}
	return 0;
}

void setUp(void)
{
   80b0c:	4770      	bx	lr
   80b0e:	bf00      	nop

00080b10 <tearDown>:
	/* Do nothing */
}

void tearDown(void)
{
   80b10:	4770      	bx	lr
   80b12:	bf00      	nop

00080b14 <test_ADConverterInitialisesProperly>:
uint32_t *const p_ADC_CHSR = (uint32_t *) (ADC_BASE_ADDRESS + 0x18U);
uint32_t *const p_PMC_PCSR1 = (uint32_t *) 0x400E0708U;


void test_ADConverterInitialisesProperly(void)
{
   80b14:	b510      	push	{r4, lr}
   80b16:	b082      	sub	sp, #8
	analogInit(0);	/* Analog In 0 */
   80b18:	2000      	movs	r0, #0
   80b1a:	4b0b      	ldr	r3, [pc, #44]	; (80b48 <test_ADConverterInitialisesProperly+0x34>)
   80b1c:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(5, *p_PMC_PCSR1, "PMC has not enabled the peripheral ADC clock");	/* Asserting the PMC manager has activated the ADC clock */
   80b1e:	4b0b      	ldr	r3, [pc, #44]	; (80b4c <test_ADConverterInitialisesProperly+0x38>)
   80b20:	681a      	ldr	r2, [r3, #0]
   80b22:	2315      	movs	r3, #21
   80b24:	9300      	str	r3, [sp, #0]
   80b26:	2020      	movs	r0, #32
   80b28:	f04f 31ff 	mov.w	r1, #4294967295
   80b2c:	4b08      	ldr	r3, [pc, #32]	; (80b50 <test_ADConverterInitialisesProperly+0x3c>)
   80b2e:	4c09      	ldr	r4, [pc, #36]	; (80b54 <test_ADConverterInitialisesProperly+0x40>)
   80b30:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(7, *p_ADC_CHSR, "ADC channel 7 is not enabled");	/* Asserting that ADC channel 7 is enabled */
   80b32:	4b09      	ldr	r3, [pc, #36]	; (80b58 <test_ADConverterInitialisesProperly+0x44>)
   80b34:	681a      	ldr	r2, [r3, #0]
   80b36:	2316      	movs	r3, #22
   80b38:	9300      	str	r3, [sp, #0]
   80b3a:	2080      	movs	r0, #128	; 0x80
   80b3c:	f04f 31ff 	mov.w	r1, #4294967295
   80b40:	4b06      	ldr	r3, [pc, #24]	; (80b5c <test_ADConverterInitialisesProperly+0x48>)
   80b42:	47a0      	blx	r4
}
   80b44:	b002      	add	sp, #8
   80b46:	bd10      	pop	{r4, pc}
   80b48:	00080149 	.word	0x00080149
   80b4c:	400e0708 	.word	0x400e0708
   80b50:	000859a4 	.word	0x000859a4
   80b54:	00081c39 	.word	0x00081c39
   80b58:	400c0018 	.word	0x400c0018
   80b5c:	000859d4 	.word	0x000859d4

00080b60 <test_ADConverterReadsValueWithNoButtonPressed>:

void test_ADConverterReadsValueWithNoButtonPressed(void)
{
   80b60:	b510      	push	{r4, lr}
   80b62:	b082      	sub	sp, #8
	TEST_ASSERT_UINT32_WITHIN(100, 3200, analogRead(0));
   80b64:	2000      	movs	r0, #0
   80b66:	4b07      	ldr	r3, [pc, #28]	; (80b84 <test_ADConverterReadsValueWithNoButtonPressed+0x24>)
   80b68:	4798      	blx	r3
   80b6a:	4602      	mov	r2, r0
   80b6c:	231b      	movs	r3, #27
   80b6e:	9300      	str	r3, [sp, #0]
   80b70:	2324      	movs	r3, #36	; 0x24
   80b72:	9301      	str	r3, [sp, #4]
   80b74:	2064      	movs	r0, #100	; 0x64
   80b76:	f44f 6148 	mov.w	r1, #3200	; 0xc80
   80b7a:	2300      	movs	r3, #0
   80b7c:	4c02      	ldr	r4, [pc, #8]	; (80b88 <test_ADConverterReadsValueWithNoButtonPressed+0x28>)
   80b7e:	47a0      	blx	r4
   80b80:	b002      	add	sp, #8
   80b82:	bd10      	pop	{r4, pc}
   80b84:	000801b9 	.word	0x000801b9
   80b88:	00081cb1 	.word	0x00081cb1

00080b8c <test_noButtonIsPressed>:
#include "../unity/unity.h"
#include "../src/buttons.h"
#include "test_buttons.h"

void test_noButtonIsPressed(void)
{
   80b8c:	b508      	push	{r3, lr}
	TEST_ASSERT_TRUE(readLCDbutton() == btnNONE);
   80b8e:	4b04      	ldr	r3, [pc, #16]	; (80ba0 <test_noButtonIsPressed+0x14>)
   80b90:	4798      	blx	r3
   80b92:	2805      	cmp	r0, #5
   80b94:	d003      	beq.n	80b9e <test_noButtonIsPressed+0x12>
   80b96:	4803      	ldr	r0, [pc, #12]	; (80ba4 <test_noButtonIsPressed+0x18>)
   80b98:	2110      	movs	r1, #16
   80b9a:	4b03      	ldr	r3, [pc, #12]	; (80ba8 <test_noButtonIsPressed+0x1c>)
   80b9c:	4798      	blx	r3
   80b9e:	bd08      	pop	{r3, pc}
   80ba0:	00080501 	.word	0x00080501
   80ba4:	000859f4 	.word	0x000859f4
   80ba8:	00081d7d 	.word	0x00081d7d

00080bac <test_delayTimerIsInitialisedProperly>:
uint32_t *const p_TC0_CMR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x04U);	/* defines the address for channel mode of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_CV0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x10U);	/* defines the address for runnning counter value of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_SR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x20U);	/* defines the address for status the TC0 status register for timer channel 0  */

void test_delayTimerIsInitialisedProperly(void)
{
   80bac:	b510      	push	{r4, lr}
   80bae:	b082      	sub	sp, #8
	delayInit();
   80bb0:	4b06      	ldr	r3, [pc, #24]	; (80bcc <test_delayTimerIsInitialisedProperly+0x20>)
   80bb2:	4798      	blx	r3
	TEST_ASSERT_BITS(0x0111, 0x00U, *p_TC0_CMR0);	/* Check that the proper timer and channel is enabled */
   80bb4:	4b06      	ldr	r3, [pc, #24]	; (80bd0 <test_delayTimerIsInitialisedProperly+0x24>)
   80bb6:	681a      	ldr	r2, [r3, #0]
   80bb8:	2318      	movs	r3, #24
   80bba:	9300      	str	r3, [sp, #0]
   80bbc:	f240 1011 	movw	r0, #273	; 0x111
   80bc0:	2100      	movs	r1, #0
   80bc2:	460b      	mov	r3, r1
   80bc4:	4c03      	ldr	r4, [pc, #12]	; (80bd4 <test_delayTimerIsInitialisedProperly+0x28>)
   80bc6:	47a0      	blx	r4
}
   80bc8:	b002      	add	sp, #8
   80bca:	bd10      	pop	{r4, pc}
   80bcc:	00080741 	.word	0x00080741
   80bd0:	40080004 	.word	0x40080004
   80bd4:	00081c39 	.word	0x00081c39

00080bd8 <test_delayCountsProperly>:

void test_delayCountsProperly(void)
{
   80bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80bdc:	b083      	sub	sp, #12
	/* Note that it is difficult to write good automated tests for the timer counter */
	//delayInit();	/* Checked in the previous test */
	
	delayMicroseconds(1);
   80bde:	2001      	movs	r0, #1
   80be0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80c4c <test_delayCountsProperly+0x74>
   80be4:	47c8      	blx	r9
	/* when the timer has stopped check that the counter has the right value 
	 * the timer resets when it starts, not when it stops */
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped, unfortuantely we can't test that it is running */
   80be6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80c50 <test_delayCountsProperly+0x78>
   80bea:	f8d8 2000 	ldr.w	r2, [r8]
   80bee:	2323      	movs	r3, #35	; 0x23
   80bf0:	9300      	str	r3, [sp, #0]
   80bf2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   80bf6:	2100      	movs	r1, #0
   80bf8:	460b      	mov	r3, r1
   80bfa:	4f11      	ldr	r7, [pc, #68]	; (80c40 <test_delayCountsProperly+0x68>)
   80bfc:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 42U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   80bfe:	4e11      	ldr	r6, [pc, #68]	; (80c44 <test_delayCountsProperly+0x6c>)
   80c00:	6832      	ldr	r2, [r6, #0]
   80c02:	2424      	movs	r4, #36	; 0x24
   80c04:	9400      	str	r4, [sp, #0]
   80c06:	9401      	str	r4, [sp, #4]
   80c08:	2028      	movs	r0, #40	; 0x28
   80c0a:	212a      	movs	r1, #42	; 0x2a
   80c0c:	2300      	movs	r3, #0
   80c0e:	4d0e      	ldr	r5, [pc, #56]	; (80c48 <test_delayCountsProperly+0x70>)
   80c10:	47a8      	blx	r5
		
	delayMicroseconds(200);
   80c12:	20c8      	movs	r0, #200	; 0xc8
   80c14:	47c8      	blx	r9
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped */
   80c16:	f8d8 2000 	ldr.w	r2, [r8]
   80c1a:	2327      	movs	r3, #39	; 0x27
   80c1c:	9300      	str	r3, [sp, #0]
   80c1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   80c22:	2100      	movs	r1, #0
   80c24:	460b      	mov	r3, r1
   80c26:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 8420U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   80c28:	6832      	ldr	r2, [r6, #0]
   80c2a:	2028      	movs	r0, #40	; 0x28
   80c2c:	9000      	str	r0, [sp, #0]
   80c2e:	9401      	str	r4, [sp, #4]
   80c30:	f242 01e4 	movw	r1, #8420	; 0x20e4
   80c34:	2300      	movs	r3, #0
   80c36:	47a8      	blx	r5
   80c38:	b003      	add	sp, #12
   80c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80c3e:	bf00      	nop
   80c40:	00081c39 	.word	0x00081c39
   80c44:	40080010 	.word	0x40080010
   80c48:	00081cb1 	.word	0x00081cb1
   80c4c:	0008077d 	.word	0x0008077d
   80c50:	40080020 	.word	0x40080020

00080c54 <test_writing4DigitNumberOnTheLCDDisplay>:
#include "test_lcdApplication.h"

extern uint32_t *const p_PIOC_ODSR;	/* The pointer to the status (values) of the output pins of the B register, address is defined in test_lcdfunctions.c  */

void test_writing4DigitNumberOnTheLCDDisplay(void)
{
   80c54:	b530      	push	{r4, r5, lr}
   80c56:	b083      	sub	sp, #12
	lcdClearDisplay();	/* Can be used since lcdClearDisplay() is already developed and tested */
   80c58:	4b14      	ldr	r3, [pc, #80]	; (80cac <test_writing4DigitNumberOnTheLCDDisplay+0x58>)
   80c5a:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWrite4DigitNumber(1357));
   80c5c:	f240 504d 	movw	r0, #1357	; 0x54d
   80c60:	4b13      	ldr	r3, [pc, #76]	; (80cb0 <test_writing4DigitNumberOnTheLCDDisplay+0x5c>)
   80c62:	4798      	blx	r3
   80c64:	b118      	cbz	r0, 80c6e <test_writing4DigitNumberOnTheLCDDisplay+0x1a>
   80c66:	4813      	ldr	r0, [pc, #76]	; (80cb4 <test_writing4DigitNumberOnTheLCDDisplay+0x60>)
   80c68:	2115      	movs	r1, #21
   80c6a:	4b13      	ldr	r3, [pc, #76]	; (80cb8 <test_writing4DigitNumberOnTheLCDDisplay+0x64>)
   80c6c:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80c6e:	4b13      	ldr	r3, [pc, #76]	; (80cbc <test_writing4DigitNumberOnTheLCDDisplay+0x68>)
   80c70:	681d      	ldr	r5, [r3, #0]
   80c72:	682a      	ldr	r2, [r5, #0]
   80c74:	2316      	movs	r3, #22
   80c76:	9300      	str	r3, [sp, #0]
   80c78:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80c7c:	f04f 31ff 	mov.w	r1, #4294967295
   80c80:	2300      	movs	r3, #0
   80c82:	4c0f      	ldr	r4, [pc, #60]	; (80cc0 <test_writing4DigitNumberOnTheLCDDisplay+0x6c>)
   80c84:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80c86:	682a      	ldr	r2, [r5, #0]
   80c88:	2317      	movs	r3, #23
   80c8a:	9300      	str	r3, [sp, #0]
   80c8c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80c90:	2100      	movs	r1, #0
   80c92:	460b      	mov	r3, r1
   80c94:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   80c96:	682a      	ldr	r2, [r5, #0]
   80c98:	231a      	movs	r3, #26
   80c9a:	9300      	str	r3, [sp, #0]
   80c9c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80ca0:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   80ca4:	2300      	movs	r3, #0
   80ca6:	47a0      	blx	r4
}
   80ca8:	b003      	add	sp, #12
   80caa:	bd30      	pop	{r4, r5, pc}
   80cac:	000809ad 	.word	0x000809ad
   80cb0:	000807b9 	.word	0x000807b9
   80cb4:	00085a10 	.word	0x00085a10
   80cb8:	00081d7d 	.word	0x00081d7d
   80cbc:	00085a40 	.word	0x00085a40
   80cc0:	00081c39 	.word	0x00081c39

00080cc4 <test_writingAsciiStringOnTheLCDDisplay>:

void test_writingAsciiStringOnTheLCDDisplay(void)
{
   80cc4:	b530      	push	{r4, r5, lr}
   80cc6:	b083      	sub	sp, #12
	lcdClearDisplay();
   80cc8:	4b14      	ldr	r3, [pc, #80]	; (80d1c <test_writingAsciiStringOnTheLCDDisplay+0x58>)
   80cca:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteAsciiString("Test everything!"));
   80ccc:	4814      	ldr	r0, [pc, #80]	; (80d20 <test_writingAsciiStringOnTheLCDDisplay+0x5c>)
   80cce:	4b15      	ldr	r3, [pc, #84]	; (80d24 <test_writingAsciiStringOnTheLCDDisplay+0x60>)
   80cd0:	4798      	blx	r3
   80cd2:	b118      	cbz	r0, 80cdc <test_writingAsciiStringOnTheLCDDisplay+0x18>
   80cd4:	4814      	ldr	r0, [pc, #80]	; (80d28 <test_writingAsciiStringOnTheLCDDisplay+0x64>)
   80cd6:	2120      	movs	r1, #32
   80cd8:	4b14      	ldr	r3, [pc, #80]	; (80d2c <test_writingAsciiStringOnTheLCDDisplay+0x68>)
   80cda:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80cdc:	4b14      	ldr	r3, [pc, #80]	; (80d30 <test_writingAsciiStringOnTheLCDDisplay+0x6c>)
   80cde:	681d      	ldr	r5, [r3, #0]
   80ce0:	682a      	ldr	r2, [r5, #0]
   80ce2:	2321      	movs	r3, #33	; 0x21
   80ce4:	9300      	str	r3, [sp, #0]
   80ce6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80cea:	f04f 31ff 	mov.w	r1, #4294967295
   80cee:	2300      	movs	r3, #0
   80cf0:	4c10      	ldr	r4, [pc, #64]	; (80d34 <test_writingAsciiStringOnTheLCDDisplay+0x70>)
   80cf2:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80cf4:	682a      	ldr	r2, [r5, #0]
   80cf6:	2322      	movs	r3, #34	; 0x22
   80cf8:	9300      	str	r3, [sp, #0]
   80cfa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80cfe:	2100      	movs	r1, #0
   80d00:	460b      	mov	r3, r1
   80d02:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR); /* last character shown should be a "!" */
   80d04:	682a      	ldr	r2, [r5, #0]
   80d06:	2325      	movs	r3, #37	; 0x25
   80d08:	9300      	str	r3, [sp, #0]
   80d0a:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80d0e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80d12:	2300      	movs	r3, #0
   80d14:	47a0      	blx	r4
}
   80d16:	b003      	add	sp, #12
   80d18:	bd30      	pop	{r4, r5, pc}
   80d1a:	bf00      	nop
   80d1c:	000809ad 	.word	0x000809ad
   80d20:	00085a2c 	.word	0x00085a2c
   80d24:	00080825 	.word	0x00080825
   80d28:	00085a10 	.word	0x00085a10
   80d2c:	00081d7d 	.word	0x00081d7d
   80d30:	00085a40 	.word	0x00085a40
   80d34:	00081c39 	.word	0x00081c39

00080d38 <test_writingButtonOnTheLCDDisplay>:

void test_writingButtonOnTheLCDDisplay(void)
{
   80d38:	b530      	push	{r4, r5, lr}
   80d3a:	b083      	sub	sp, #12
	lcdClearDisplay();
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <test_writingButtonOnTheLCDDisplay+0x58>)
   80d3e:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteButtonValue(btnSELECT));
   80d40:	2004      	movs	r0, #4
   80d42:	4b14      	ldr	r3, [pc, #80]	; (80d94 <test_writingButtonOnTheLCDDisplay+0x5c>)
   80d44:	4798      	blx	r3
   80d46:	b118      	cbz	r0, 80d50 <test_writingButtonOnTheLCDDisplay+0x18>
   80d48:	4813      	ldr	r0, [pc, #76]	; (80d98 <test_writingButtonOnTheLCDDisplay+0x60>)
   80d4a:	212b      	movs	r1, #43	; 0x2b
   80d4c:	4b13      	ldr	r3, [pc, #76]	; (80d9c <test_writingButtonOnTheLCDDisplay+0x64>)
   80d4e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80d50:	4b13      	ldr	r3, [pc, #76]	; (80da0 <test_writingButtonOnTheLCDDisplay+0x68>)
   80d52:	681d      	ldr	r5, [r3, #0]
   80d54:	682a      	ldr	r2, [r5, #0]
   80d56:	232c      	movs	r3, #44	; 0x2c
   80d58:	9300      	str	r3, [sp, #0]
   80d5a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80d5e:	f04f 31ff 	mov.w	r1, #4294967295
   80d62:	2300      	movs	r3, #0
   80d64:	4c0f      	ldr	r4, [pc, #60]	; (80da4 <test_writingButtonOnTheLCDDisplay+0x6c>)
   80d66:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80d68:	682a      	ldr	r2, [r5, #0]
   80d6a:	232d      	movs	r3, #45	; 0x2d
   80d6c:	9300      	str	r3, [sp, #0]
   80d6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80d72:	2100      	movs	r1, #0
   80d74:	460b      	mov	r3, r1
   80d76:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);	/* last character shown should be a "T" as in SELECT */
   80d78:	682a      	ldr	r2, [r5, #0]
   80d7a:	2330      	movs	r3, #48	; 0x30
   80d7c:	9300      	str	r3, [sp, #0]
   80d7e:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80d82:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80d86:	2300      	movs	r3, #0
   80d88:	47a0      	blx	r4
   80d8a:	b003      	add	sp, #12
   80d8c:	bd30      	pop	{r4, r5, pc}
   80d8e:	bf00      	nop
   80d90:	000809ad 	.word	0x000809ad
   80d94:	00080829 	.word	0x00080829
   80d98:	00085a10 	.word	0x00085a10
   80d9c:	00081d7d 	.word	0x00081d7d
   80da0:	00085a40 	.word	0x00085a40
   80da4:	00081c39 	.word	0x00081c39

00080da8 <test_initialisatinOfTheLCD>:
#include "test_lcdFunctions.h"

uint32_t *const p_PIOC_ODSR = (uint32_t *) (PIOC_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */

void test_initialisatinOfTheLCD(void)
{
   80da8:	b530      	push	{r4, r5, lr}
   80daa:	b083      	sub	sp, #12
	TEST_ASSERT_FALSE(lcdInit());
   80dac:	4b11      	ldr	r3, [pc, #68]	; (80df4 <test_initialisatinOfTheLCD+0x4c>)
   80dae:	4798      	blx	r3
   80db0:	b118      	cbz	r0, 80dba <test_initialisatinOfTheLCD+0x12>
   80db2:	4811      	ldr	r0, [pc, #68]	; (80df8 <test_initialisatinOfTheLCD+0x50>)
   80db4:	2113      	movs	r1, #19
   80db6:	4b11      	ldr	r3, [pc, #68]	; (80dfc <test_initialisatinOfTheLCD+0x54>)
   80db8:	4798      	blx	r3
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   80dba:	4d11      	ldr	r5, [pc, #68]	; (80e00 <test_initialisatinOfTheLCD+0x58>)
   80dbc:	682a      	ldr	r2, [r5, #0]
   80dbe:	2314      	movs	r3, #20
   80dc0:	9300      	str	r3, [sp, #0]
   80dc2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80dc6:	2100      	movs	r1, #0
   80dc8:	460b      	mov	r3, r1
   80dca:	4c0e      	ldr	r4, [pc, #56]	; (80e04 <test_initialisatinOfTheLCD+0x5c>)
   80dcc:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80dce:	682a      	ldr	r2, [r5, #0]
   80dd0:	2315      	movs	r3, #21
   80dd2:	9300      	str	r3, [sp, #0]
   80dd4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80dd8:	2100      	movs	r1, #0
   80dda:	460b      	mov	r3, r1
   80ddc:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000111100000000000000000000000, *p_PIOC_ODSR);	/* Display on, cursor on, blinking on */
   80dde:	682a      	ldr	r2, [r5, #0]
   80de0:	2318      	movs	r3, #24
   80de2:	9300      	str	r3, [sp, #0]
   80de4:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80de8:	4601      	mov	r1, r0
   80dea:	2300      	movs	r3, #0
   80dec:	47a0      	blx	r4
}
   80dee:	b003      	add	sp, #12
   80df0:	bd30      	pop	{r4, r5, pc}
   80df2:	bf00      	nop
   80df4:	000808c9 	.word	0x000808c9
   80df8:	00085a10 	.word	0x00085a10
   80dfc:	00081d7d 	.word	0x00081d7d
   80e00:	400e1238 	.word	0x400e1238
   80e04:	00081c39 	.word	0x00081c39

00080e08 <test_writingCharactersToTheLCD>:

void test_writingCharactersToTheLCD(void)
{
   80e08:	b570      	push	{r4, r5, r6, lr}
   80e0a:	b082      	sub	sp, #8
	/* Write a number of consecutive characters on the LCD display to show that the program works */
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect for each character */

	TEST_ASSERT_FALSE(lcdWrite(0x68, HIGH));	/* 0x68 is hex for ASCII symbol 'h' */
   80e0c:	2068      	movs	r0, #104	; 0x68
   80e0e:	2101      	movs	r1, #1
   80e10:	4ba3      	ldr	r3, [pc, #652]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80e12:	4798      	blx	r3
   80e14:	b118      	cbz	r0, 80e1e <test_writingCharactersToTheLCD+0x16>
   80e16:	48a3      	ldr	r0, [pc, #652]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80e18:	2121      	movs	r1, #33	; 0x21
   80e1a:	4ba3      	ldr	r3, [pc, #652]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80e1c:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);		/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80e1e:	4da3      	ldr	r5, [pc, #652]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80e20:	682a      	ldr	r2, [r5, #0]
   80e22:	2322      	movs	r3, #34	; 0x22
   80e24:	9300      	str	r3, [sp, #0]
   80e26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e2a:	f04f 31ff 	mov.w	r1, #4294967295
   80e2e:	2300      	movs	r3, #0
   80e30:	4c9f      	ldr	r4, [pc, #636]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80e32:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);		/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80e34:	682a      	ldr	r2, [r5, #0]
   80e36:	2323      	movs	r3, #35	; 0x23
   80e38:	9300      	str	r3, [sp, #0]
   80e3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80e3e:	2100      	movs	r1, #0
   80e40:	460b      	mov	r3, r1
   80e42:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0001<<23), *p_PIOC_ODSR);	/* Last 4 bits in reverse order */
   80e44:	682a      	ldr	r2, [r5, #0]
   80e46:	2324      	movs	r3, #36	; 0x24
   80e48:	9300      	str	r3, [sp, #0]
   80e4a:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80e4e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80e52:	2300      	movs	r3, #0
   80e54:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite((uint8_t) 101, HIGH));	/* 101 is decimal and needs to have an explicit cast to a single byte */
   80e56:	2065      	movs	r0, #101	; 0x65
   80e58:	2101      	movs	r1, #1
   80e5a:	4b91      	ldr	r3, [pc, #580]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80e5c:	4798      	blx	r3
   80e5e:	b118      	cbz	r0, 80e68 <test_writingCharactersToTheLCD+0x60>
   80e60:	4890      	ldr	r0, [pc, #576]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80e62:	2126      	movs	r1, #38	; 0x26
   80e64:	4b90      	ldr	r3, [pc, #576]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80e66:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80e68:	4d90      	ldr	r5, [pc, #576]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80e6a:	682a      	ldr	r2, [r5, #0]
   80e6c:	2327      	movs	r3, #39	; 0x27
   80e6e:	9300      	str	r3, [sp, #0]
   80e70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e74:	f04f 31ff 	mov.w	r1, #4294967295
   80e78:	2300      	movs	r3, #0
   80e7a:	4c8d      	ldr	r4, [pc, #564]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80e7c:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80e7e:	682a      	ldr	r2, [r5, #0]
   80e80:	2328      	movs	r3, #40	; 0x28
   80e82:	9300      	str	r3, [sp, #0]
   80e84:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80e88:	2100      	movs	r1, #0
   80e8a:	460b      	mov	r3, r1
   80e8c:	47a0      	blx	r4
	//TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000101000000000000000000000000, *p_PIOC_ODSR);
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1010<<23), *p_PIOC_ODSR);
   80e8e:	682a      	ldr	r2, [r5, #0]
   80e90:	232a      	movs	r3, #42	; 0x2a
   80e92:	9300      	str	r3, [sp, #0]
   80e94:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80e98:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
   80e9c:	2300      	movs	r3, #0
   80e9e:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80ea0:	206c      	movs	r0, #108	; 0x6c
   80ea2:	2101      	movs	r1, #1
   80ea4:	4b7e      	ldr	r3, [pc, #504]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80ea6:	4798      	blx	r3
   80ea8:	b118      	cbz	r0, 80eb2 <test_writingCharactersToTheLCD+0xaa>
   80eaa:	487e      	ldr	r0, [pc, #504]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80eac:	212c      	movs	r1, #44	; 0x2c
   80eae:	4b7e      	ldr	r3, [pc, #504]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80eb0:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80eb2:	4d7e      	ldr	r5, [pc, #504]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80eb4:	682a      	ldr	r2, [r5, #0]
   80eb6:	232d      	movs	r3, #45	; 0x2d
   80eb8:	9300      	str	r3, [sp, #0]
   80eba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80ebe:	f04f 31ff 	mov.w	r1, #4294967295
   80ec2:	2300      	movs	r3, #0
   80ec4:	4c7a      	ldr	r4, [pc, #488]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80ec6:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80ec8:	682a      	ldr	r2, [r5, #0]
   80eca:	232e      	movs	r3, #46	; 0x2e
   80ecc:	9300      	str	r3, [sp, #0]
   80ece:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ed2:	2100      	movs	r1, #0
   80ed4:	460b      	mov	r3, r1
   80ed6:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80ed8:	682a      	ldr	r2, [r5, #0]
   80eda:	232f      	movs	r3, #47	; 0x2f
   80edc:	9300      	str	r3, [sp, #0]
   80ede:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80ee2:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80ee6:	2300      	movs	r3, #0
   80ee8:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80eea:	206c      	movs	r0, #108	; 0x6c
   80eec:	2101      	movs	r1, #1
   80eee:	4b6c      	ldr	r3, [pc, #432]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80ef0:	4798      	blx	r3
   80ef2:	b118      	cbz	r0, 80efc <test_writingCharactersToTheLCD+0xf4>
   80ef4:	486b      	ldr	r0, [pc, #428]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80ef6:	2131      	movs	r1, #49	; 0x31
   80ef8:	4b6b      	ldr	r3, [pc, #428]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80efa:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80efc:	4d6b      	ldr	r5, [pc, #428]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80efe:	682a      	ldr	r2, [r5, #0]
   80f00:	2332      	movs	r3, #50	; 0x32
   80f02:	9300      	str	r3, [sp, #0]
   80f04:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f08:	f04f 31ff 	mov.w	r1, #4294967295
   80f0c:	2300      	movs	r3, #0
   80f0e:	4c68      	ldr	r4, [pc, #416]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80f10:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80f12:	682a      	ldr	r2, [r5, #0]
   80f14:	2333      	movs	r3, #51	; 0x33
   80f16:	9300      	str	r3, [sp, #0]
   80f18:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f1c:	2100      	movs	r1, #0
   80f1e:	460b      	mov	r3, r1
   80f20:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80f22:	682a      	ldr	r2, [r5, #0]
   80f24:	2334      	movs	r3, #52	; 0x34
   80f26:	9300      	str	r3, [sp, #0]
   80f28:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80f2c:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80f30:	2300      	movs	r3, #0
   80f32:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6F, HIGH));
   80f34:	206f      	movs	r0, #111	; 0x6f
   80f36:	2101      	movs	r1, #1
   80f38:	4b59      	ldr	r3, [pc, #356]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80f3a:	4798      	blx	r3
   80f3c:	b118      	cbz	r0, 80f46 <test_writingCharactersToTheLCD+0x13e>
   80f3e:	4859      	ldr	r0, [pc, #356]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80f40:	2136      	movs	r1, #54	; 0x36
   80f42:	4b59      	ldr	r3, [pc, #356]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80f44:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f46:	4d59      	ldr	r5, [pc, #356]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80f48:	682a      	ldr	r2, [r5, #0]
   80f4a:	2337      	movs	r3, #55	; 0x37
   80f4c:	9300      	str	r3, [sp, #0]
   80f4e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f52:	f04f 31ff 	mov.w	r1, #4294967295
   80f56:	2300      	movs	r3, #0
   80f58:	4c55      	ldr	r4, [pc, #340]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80f5a:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	
   80f5c:	682a      	ldr	r2, [r5, #0]
   80f5e:	2338      	movs	r3, #56	; 0x38
   80f60:	9300      	str	r3, [sp, #0]
   80f62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f66:	2100      	movs	r1, #0
   80f68:	460b      	mov	r3, r1
   80f6a:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   80f6c:	682a      	ldr	r2, [r5, #0]
   80f6e:	2339      	movs	r3, #57	; 0x39
   80f70:	9300      	str	r3, [sp, #0]
   80f72:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80f76:	4601      	mov	r1, r0
   80f78:	2300      	movs	r3, #0
   80f7a:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x2C, HIGH));
   80f7c:	202c      	movs	r0, #44	; 0x2c
   80f7e:	2101      	movs	r1, #1
   80f80:	4b47      	ldr	r3, [pc, #284]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80f82:	4798      	blx	r3
   80f84:	b118      	cbz	r0, 80f8e <test_writingCharactersToTheLCD+0x186>
   80f86:	4847      	ldr	r0, [pc, #284]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80f88:	213b      	movs	r1, #59	; 0x3b
   80f8a:	4b47      	ldr	r3, [pc, #284]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80f8c:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f8e:	4d47      	ldr	r5, [pc, #284]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80f90:	682a      	ldr	r2, [r5, #0]
   80f92:	233c      	movs	r3, #60	; 0x3c
   80f94:	9300      	str	r3, [sp, #0]
   80f96:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f9a:	f04f 31ff 	mov.w	r1, #4294967295
   80f9e:	2300      	movs	r3, #0
   80fa0:	4c43      	ldr	r4, [pc, #268]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80fa2:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80fa4:	682a      	ldr	r2, [r5, #0]
   80fa6:	233d      	movs	r3, #61	; 0x3d
   80fa8:	9300      	str	r3, [sp, #0]
   80faa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80fae:	2100      	movs	r1, #0
   80fb0:	460b      	mov	r3, r1
   80fb2:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80fb4:	682a      	ldr	r2, [r5, #0]
   80fb6:	233e      	movs	r3, #62	; 0x3e
   80fb8:	9300      	str	r3, [sp, #0]
   80fba:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80fbe:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80fc2:	2300      	movs	r3, #0
   80fc4:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x20, HIGH));
   80fc6:	2020      	movs	r0, #32
   80fc8:	2101      	movs	r1, #1
   80fca:	4b35      	ldr	r3, [pc, #212]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   80fcc:	4798      	blx	r3
   80fce:	b118      	cbz	r0, 80fd8 <test_writingCharactersToTheLCD+0x1d0>
   80fd0:	4834      	ldr	r0, [pc, #208]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   80fd2:	2140      	movs	r1, #64	; 0x40
   80fd4:	4b34      	ldr	r3, [pc, #208]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   80fd6:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80fd8:	4d34      	ldr	r5, [pc, #208]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   80fda:	682a      	ldr	r2, [r5, #0]
   80fdc:	2341      	movs	r3, #65	; 0x41
   80fde:	9300      	str	r3, [sp, #0]
   80fe0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80fe4:	f04f 31ff 	mov.w	r1, #4294967295
   80fe8:	2300      	movs	r3, #0
   80fea:	4c31      	ldr	r4, [pc, #196]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   80fec:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80fee:	682a      	ldr	r2, [r5, #0]
   80ff0:	2342      	movs	r3, #66	; 0x42
   80ff2:	9300      	str	r3, [sp, #0]
   80ff4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ff8:	2100      	movs	r1, #0
   80ffa:	460b      	mov	r3, r1
   80ffc:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0000<<23), *p_PIOC_ODSR);
   80ffe:	682a      	ldr	r2, [r5, #0]
   81000:	2343      	movs	r3, #67	; 0x43
   81002:	9300      	str	r3, [sp, #0]
   81004:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81008:	2100      	movs	r1, #0
   8100a:	460b      	mov	r3, r1
   8100c:	47a0      	blx	r4

	lcdWrite('w', HIGH);
   8100e:	2077      	movs	r0, #119	; 0x77
   81010:	2101      	movs	r1, #1
   81012:	4e23      	ldr	r6, [pc, #140]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   81014:	47b0      	blx	r6
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   81016:	682a      	ldr	r2, [r5, #0]
   81018:	2346      	movs	r3, #70	; 0x46
   8101a:	9300      	str	r3, [sp, #0]
   8101c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81020:	f04f 31ff 	mov.w	r1, #4294967295
   81024:	2300      	movs	r3, #0
   81026:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81028:	682a      	ldr	r2, [r5, #0]
   8102a:	2347      	movs	r3, #71	; 0x47
   8102c:	9300      	str	r3, [sp, #0]
   8102e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81032:	2100      	movs	r1, #0
   81034:	460b      	mov	r3, r1
   81036:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   81038:	682a      	ldr	r2, [r5, #0]
   8103a:	2348      	movs	r3, #72	; 0x48
   8103c:	9300      	str	r3, [sp, #0]
   8103e:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81042:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   81046:	2300      	movs	r3, #0
   81048:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('o', HIGH));
   8104a:	206f      	movs	r0, #111	; 0x6f
   8104c:	2101      	movs	r1, #1
   8104e:	47b0      	blx	r6
   81050:	b118      	cbz	r0, 8105a <test_writingCharactersToTheLCD+0x252>
   81052:	4814      	ldr	r0, [pc, #80]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   81054:	214a      	movs	r1, #74	; 0x4a
   81056:	4b14      	ldr	r3, [pc, #80]	; (810a8 <test_writingCharactersToTheLCD+0x2a0>)
   81058:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   8105a:	4d14      	ldr	r5, [pc, #80]	; (810ac <test_writingCharactersToTheLCD+0x2a4>)
   8105c:	682a      	ldr	r2, [r5, #0]
   8105e:	234b      	movs	r3, #75	; 0x4b
   81060:	9300      	str	r3, [sp, #0]
   81062:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81066:	f04f 31ff 	mov.w	r1, #4294967295
   8106a:	2300      	movs	r3, #0
   8106c:	4c10      	ldr	r4, [pc, #64]	; (810b0 <test_writingCharactersToTheLCD+0x2a8>)
   8106e:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81070:	682a      	ldr	r2, [r5, #0]
   81072:	234c      	movs	r3, #76	; 0x4c
   81074:	9300      	str	r3, [sp, #0]
   81076:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   8107a:	2100      	movs	r1, #0
   8107c:	460b      	mov	r3, r1
   8107e:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   81080:	682a      	ldr	r2, [r5, #0]
   81082:	234d      	movs	r3, #77	; 0x4d
   81084:	9300      	str	r3, [sp, #0]
   81086:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   8108a:	4601      	mov	r1, r0
   8108c:	2300      	movs	r3, #0
   8108e:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('r', HIGH));
   81090:	2072      	movs	r0, #114	; 0x72
   81092:	2101      	movs	r1, #1
   81094:	4b02      	ldr	r3, [pc, #8]	; (810a0 <test_writingCharactersToTheLCD+0x298>)
   81096:	4798      	blx	r3
   81098:	b170      	cbz	r0, 810b8 <test_writingCharactersToTheLCD+0x2b0>
   8109a:	4802      	ldr	r0, [pc, #8]	; (810a4 <test_writingCharactersToTheLCD+0x29c>)
   8109c:	214f      	movs	r1, #79	; 0x4f
   8109e:	e009      	b.n	810b4 <test_writingCharactersToTheLCD+0x2ac>
   810a0:	00080839 	.word	0x00080839
   810a4:	00085a10 	.word	0x00085a10
   810a8:	00081d7d 	.word	0x00081d7d
   810ac:	400e1238 	.word	0x400e1238
   810b0:	00081c39 	.word	0x00081c39
   810b4:	4b34      	ldr	r3, [pc, #208]	; (81188 <test_writingCharactersToTheLCD+0x380>)
   810b6:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   810b8:	4d34      	ldr	r5, [pc, #208]	; (8118c <test_writingCharactersToTheLCD+0x384>)
   810ba:	682a      	ldr	r2, [r5, #0]
   810bc:	2350      	movs	r3, #80	; 0x50
   810be:	9300      	str	r3, [sp, #0]
   810c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   810c4:	f04f 31ff 	mov.w	r1, #4294967295
   810c8:	2300      	movs	r3, #0
   810ca:	4c31      	ldr	r4, [pc, #196]	; (81190 <test_writingCharactersToTheLCD+0x388>)
   810cc:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   810ce:	682a      	ldr	r2, [r5, #0]
   810d0:	2351      	movs	r3, #81	; 0x51
   810d2:	9300      	str	r3, [sp, #0]
   810d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   810d8:	2100      	movs	r1, #0
   810da:	460b      	mov	r3, r1
   810dc:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0100<<23), *p_PIOC_ODSR);
   810de:	682a      	ldr	r2, [r5, #0]
   810e0:	2352      	movs	r3, #82	; 0x52
   810e2:	9300      	str	r3, [sp, #0]
   810e4:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   810e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   810ec:	2300      	movs	r3, #0
   810ee:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('l', HIGH));
   810f0:	206c      	movs	r0, #108	; 0x6c
   810f2:	2101      	movs	r1, #1
   810f4:	4b27      	ldr	r3, [pc, #156]	; (81194 <test_writingCharactersToTheLCD+0x38c>)
   810f6:	4798      	blx	r3
   810f8:	b118      	cbz	r0, 81102 <test_writingCharactersToTheLCD+0x2fa>
   810fa:	4827      	ldr	r0, [pc, #156]	; (81198 <test_writingCharactersToTheLCD+0x390>)
   810fc:	2154      	movs	r1, #84	; 0x54
   810fe:	4b22      	ldr	r3, [pc, #136]	; (81188 <test_writingCharactersToTheLCD+0x380>)
   81100:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   81102:	4d22      	ldr	r5, [pc, #136]	; (8118c <test_writingCharactersToTheLCD+0x384>)
   81104:	682a      	ldr	r2, [r5, #0]
   81106:	2355      	movs	r3, #85	; 0x55
   81108:	9300      	str	r3, [sp, #0]
   8110a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   8110e:	f04f 31ff 	mov.w	r1, #4294967295
   81112:	2300      	movs	r3, #0
   81114:	4c1e      	ldr	r4, [pc, #120]	; (81190 <test_writingCharactersToTheLCD+0x388>)
   81116:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81118:	682a      	ldr	r2, [r5, #0]
   8111a:	2356      	movs	r3, #86	; 0x56
   8111c:	9300      	str	r3, [sp, #0]
   8111e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81122:	2100      	movs	r1, #0
   81124:	460b      	mov	r3, r1
   81126:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   81128:	682a      	ldr	r2, [r5, #0]
   8112a:	2357      	movs	r3, #87	; 0x57
   8112c:	9300      	str	r3, [sp, #0]
   8112e:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81132:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   81136:	2300      	movs	r3, #0
   81138:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('d', HIGH));
   8113a:	2064      	movs	r0, #100	; 0x64
   8113c:	2101      	movs	r1, #1
   8113e:	4b15      	ldr	r3, [pc, #84]	; (81194 <test_writingCharactersToTheLCD+0x38c>)
   81140:	4798      	blx	r3
   81142:	b118      	cbz	r0, 8114c <test_writingCharactersToTheLCD+0x344>
   81144:	4814      	ldr	r0, [pc, #80]	; (81198 <test_writingCharactersToTheLCD+0x390>)
   81146:	2159      	movs	r1, #89	; 0x59
   81148:	4b0f      	ldr	r3, [pc, #60]	; (81188 <test_writingCharactersToTheLCD+0x380>)
   8114a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   8114c:	4d0f      	ldr	r5, [pc, #60]	; (8118c <test_writingCharactersToTheLCD+0x384>)
   8114e:	682a      	ldr	r2, [r5, #0]
   81150:	235a      	movs	r3, #90	; 0x5a
   81152:	9300      	str	r3, [sp, #0]
   81154:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81158:	f04f 31ff 	mov.w	r1, #4294967295
   8115c:	2300      	movs	r3, #0
   8115e:	4c0c      	ldr	r4, [pc, #48]	; (81190 <test_writingCharactersToTheLCD+0x388>)
   81160:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81162:	682a      	ldr	r2, [r5, #0]
   81164:	235b      	movs	r3, #91	; 0x5b
   81166:	9300      	str	r3, [sp, #0]
   81168:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   8116c:	2100      	movs	r1, #0
   8116e:	460b      	mov	r3, r1
   81170:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);
   81172:	682a      	ldr	r2, [r5, #0]
   81174:	235c      	movs	r3, #92	; 0x5c
   81176:	9300      	str	r3, [sp, #0]
   81178:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   8117c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   81180:	2300      	movs	r3, #0
   81182:	47a0      	blx	r4
	
}
   81184:	b002      	add	sp, #8
   81186:	bd70      	pop	{r4, r5, r6, pc}
   81188:	00081d7d 	.word	0x00081d7d
   8118c:	400e1238 	.word	0x400e1238
   81190:	00081c39 	.word	0x00081c39
   81194:	00080839 	.word	0x00080839
   81198:	00085a10 	.word	0x00085a10

0008119c <test_clearingTheLCDDisplay>:

void test_clearingTheLCDDisplay(void)
{
   8119c:	b530      	push	{r4, r5, lr}
   8119e:	b083      	sub	sp, #12
	delayMicroseconds(1000000);	/* Just to make sure that the previous message on the LCD can be read */
   811a0:	4813      	ldr	r0, [pc, #76]	; (811f0 <test_clearingTheLCDDisplay+0x54>)
   811a2:	4b14      	ldr	r3, [pc, #80]	; (811f4 <test_clearingTheLCDDisplay+0x58>)
   811a4:	4798      	blx	r3
	
	/* Assert that the last bits written are correct */
	TEST_ASSERT_FALSE(lcdClearDisplay());
   811a6:	4b14      	ldr	r3, [pc, #80]	; (811f8 <test_clearingTheLCDDisplay+0x5c>)
   811a8:	4798      	blx	r3
   811aa:	b118      	cbz	r0, 811b4 <test_clearingTheLCDDisplay+0x18>
   811ac:	4813      	ldr	r0, [pc, #76]	; (811fc <test_clearingTheLCDDisplay+0x60>)
   811ae:	2165      	movs	r1, #101	; 0x65
   811b0:	4b13      	ldr	r3, [pc, #76]	; (81200 <test_clearingTheLCDDisplay+0x64>)
   811b2:	4798      	blx	r3
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   811b4:	4d13      	ldr	r5, [pc, #76]	; (81204 <test_clearingTheLCDDisplay+0x68>)
   811b6:	682a      	ldr	r2, [r5, #0]
   811b8:	2366      	movs	r3, #102	; 0x66
   811ba:	9300      	str	r3, [sp, #0]
   811bc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   811c0:	2100      	movs	r1, #0
   811c2:	460b      	mov	r3, r1
   811c4:	4c10      	ldr	r4, [pc, #64]	; (81208 <test_clearingTheLCDDisplay+0x6c>)
   811c6:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   811c8:	682a      	ldr	r2, [r5, #0]
   811ca:	2367      	movs	r3, #103	; 0x67
   811cc:	9300      	str	r3, [sp, #0]
   811ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   811d2:	2100      	movs	r1, #0
   811d4:	460b      	mov	r3, r1
   811d6:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR);
   811d8:	682a      	ldr	r2, [r5, #0]
   811da:	236a      	movs	r3, #106	; 0x6a
   811dc:	9300      	str	r3, [sp, #0]
   811de:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   811e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   811e6:	2300      	movs	r3, #0
   811e8:	47a0      	blx	r4
}
   811ea:	b003      	add	sp, #12
   811ec:	bd30      	pop	{r4, r5, pc}
   811ee:	bf00      	nop
   811f0:	000f4240 	.word	0x000f4240
   811f4:	0008077d 	.word	0x0008077d
   811f8:	000809ad 	.word	0x000809ad
   811fc:	00085a10 	.word	0x00085a10
   81200:	00081d7d 	.word	0x00081d7d
   81204:	400e1238 	.word	0x400e1238
   81208:	00081c39 	.word	0x00081c39

0008120c <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   8120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81210:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   81212:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   81216:	d132      	bne.n	8127e <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   81218:	4b5f      	ldr	r3, [pc, #380]	; (81398 <UnityPrintNumber+0x18c>)
   8121a:	6818      	ldr	r0, [r3, #0]
   8121c:	6882      	ldr	r2, [r0, #8]
   8121e:	6893      	ldr	r3, [r2, #8]
   81220:	3b01      	subs	r3, #1
   81222:	6093      	str	r3, [r2, #8]
   81224:	2b00      	cmp	r3, #0
   81226:	da1d      	bge.n	81264 <UnityPrintNumber+0x58>
   81228:	6882      	ldr	r2, [r0, #8]
   8122a:	6891      	ldr	r1, [r2, #8]
   8122c:	6993      	ldr	r3, [r2, #24]
   8122e:	4299      	cmp	r1, r3
   81230:	db12      	blt.n	81258 <UnityPrintNumber+0x4c>
   81232:	6813      	ldr	r3, [r2, #0]
   81234:	222d      	movs	r2, #45	; 0x2d
   81236:	701a      	strb	r2, [r3, #0]
   81238:	4b57      	ldr	r3, [pc, #348]	; (81398 <UnityPrintNumber+0x18c>)
   8123a:	6818      	ldr	r0, [r3, #0]
   8123c:	6882      	ldr	r2, [r0, #8]
   8123e:	6813      	ldr	r3, [r2, #0]
   81240:	7819      	ldrb	r1, [r3, #0]
   81242:	290a      	cmp	r1, #10
   81244:	d002      	beq.n	8124c <UnityPrintNumber+0x40>
   81246:	3301      	adds	r3, #1
   81248:	6013      	str	r3, [r2, #0]
   8124a:	e04f      	b.n	812ec <UnityPrintNumber+0xe0>
   8124c:	210a      	movs	r1, #10
   8124e:	4b53      	ldr	r3, [pc, #332]	; (8139c <UnityPrintNumber+0x190>)
   81250:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81252:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81256:	e049      	b.n	812ec <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   81258:	212d      	movs	r1, #45	; 0x2d
   8125a:	4b50      	ldr	r3, [pc, #320]	; (8139c <UnityPrintNumber+0x190>)
   8125c:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8125e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81262:	e043      	b.n	812ec <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   81264:	6883      	ldr	r3, [r0, #8]
   81266:	681b      	ldr	r3, [r3, #0]
   81268:	222d      	movs	r2, #45	; 0x2d
   8126a:	701a      	strb	r2, [r3, #0]
   8126c:	4b4a      	ldr	r3, [pc, #296]	; (81398 <UnityPrintNumber+0x18c>)
   8126e:	681b      	ldr	r3, [r3, #0]
   81270:	689b      	ldr	r3, [r3, #8]
   81272:	681a      	ldr	r2, [r3, #0]
   81274:	3201      	adds	r2, #1
   81276:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81278:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8127c:	e036      	b.n	812ec <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   8127e:	2800      	cmp	r0, #0
   81280:	da34      	bge.n	812ec <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   81282:	4b45      	ldr	r3, [pc, #276]	; (81398 <UnityPrintNumber+0x18c>)
   81284:	6818      	ldr	r0, [r3, #0]
   81286:	6882      	ldr	r2, [r0, #8]
   81288:	6893      	ldr	r3, [r2, #8]
   8128a:	3b01      	subs	r3, #1
   8128c:	6093      	str	r3, [r2, #8]
   8128e:	2b00      	cmp	r3, #0
   81290:	da19      	bge.n	812c6 <UnityPrintNumber+0xba>
   81292:	6882      	ldr	r2, [r0, #8]
   81294:	6891      	ldr	r1, [r2, #8]
   81296:	6993      	ldr	r3, [r2, #24]
   81298:	4299      	cmp	r1, r3
   8129a:	db10      	blt.n	812be <UnityPrintNumber+0xb2>
   8129c:	6813      	ldr	r3, [r2, #0]
   8129e:	222d      	movs	r2, #45	; 0x2d
   812a0:	701a      	strb	r2, [r3, #0]
   812a2:	4b3d      	ldr	r3, [pc, #244]	; (81398 <UnityPrintNumber+0x18c>)
   812a4:	6818      	ldr	r0, [r3, #0]
   812a6:	6882      	ldr	r2, [r0, #8]
   812a8:	6813      	ldr	r3, [r2, #0]
   812aa:	7819      	ldrb	r1, [r3, #0]
   812ac:	290a      	cmp	r1, #10
   812ae:	d002      	beq.n	812b6 <UnityPrintNumber+0xaa>
   812b0:	3301      	adds	r3, #1
   812b2:	6013      	str	r3, [r2, #0]
   812b4:	e011      	b.n	812da <UnityPrintNumber+0xce>
   812b6:	210a      	movs	r1, #10
   812b8:	4b38      	ldr	r3, [pc, #224]	; (8139c <UnityPrintNumber+0x190>)
   812ba:	4798      	blx	r3
   812bc:	e00d      	b.n	812da <UnityPrintNumber+0xce>
   812be:	212d      	movs	r1, #45	; 0x2d
   812c0:	4b36      	ldr	r3, [pc, #216]	; (8139c <UnityPrintNumber+0x190>)
   812c2:	4798      	blx	r3
   812c4:	e009      	b.n	812da <UnityPrintNumber+0xce>
   812c6:	6883      	ldr	r3, [r0, #8]
   812c8:	681b      	ldr	r3, [r3, #0]
   812ca:	222d      	movs	r2, #45	; 0x2d
   812cc:	701a      	strb	r2, [r3, #0]
   812ce:	4b32      	ldr	r3, [pc, #200]	; (81398 <UnityPrintNumber+0x18c>)
   812d0:	681b      	ldr	r3, [r3, #0]
   812d2:	689b      	ldr	r3, [r3, #8]
   812d4:	681a      	ldr	r2, [r3, #0]
   812d6:	3201      	adds	r2, #1
   812d8:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   812da:	426d      	negs	r5, r5
   812dc:	e006      	b.n	812ec <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   812de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   812e2:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   812e4:	429c      	cmp	r4, r3
   812e6:	da06      	bge.n	812f6 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   812e8:	461c      	mov	r4, r3
   812ea:	e000      	b.n	812ee <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   812ec:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   812ee:	fbb5 f3f4 	udiv	r3, r5, r4
   812f2:	2b09      	cmp	r3, #9
   812f4:	d8f3      	bhi.n	812de <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   812f6:	4e28      	ldr	r6, [pc, #160]	; (81398 <UnityPrintNumber+0x18c>)
   812f8:	4f29      	ldr	r7, [pc, #164]	; (813a0 <UnityPrintNumber+0x194>)
   812fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8139c <UnityPrintNumber+0x190>
   812fe:	6830      	ldr	r0, [r6, #0]
   81300:	6882      	ldr	r2, [r0, #8]
   81302:	6893      	ldr	r3, [r2, #8]
   81304:	3b01      	subs	r3, #1
   81306:	6093      	str	r3, [r2, #8]
   81308:	2b00      	cmp	r3, #0
   8130a:	da29      	bge.n	81360 <UnityPrintNumber+0x154>
   8130c:	6882      	ldr	r2, [r0, #8]
   8130e:	6891      	ldr	r1, [r2, #8]
   81310:	6993      	ldr	r3, [r2, #24]
   81312:	4299      	cmp	r1, r3
   81314:	db17      	blt.n	81346 <UnityPrintNumber+0x13a>
   81316:	6811      	ldr	r1, [r2, #0]
   81318:	fbb5 f3f4 	udiv	r3, r5, r4
   8131c:	fba7 0203 	umull	r0, r2, r7, r3
   81320:	08d2      	lsrs	r2, r2, #3
   81322:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81326:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8132a:	3330      	adds	r3, #48	; 0x30
   8132c:	700b      	strb	r3, [r1, #0]
   8132e:	6830      	ldr	r0, [r6, #0]
   81330:	6882      	ldr	r2, [r0, #8]
   81332:	6813      	ldr	r3, [r2, #0]
   81334:	7819      	ldrb	r1, [r3, #0]
   81336:	290a      	cmp	r1, #10
   81338:	d002      	beq.n	81340 <UnityPrintNumber+0x134>
   8133a:	3301      	adds	r3, #1
   8133c:	6013      	str	r3, [r2, #0]
   8133e:	e021      	b.n	81384 <UnityPrintNumber+0x178>
   81340:	210a      	movs	r1, #10
   81342:	47c0      	blx	r8
   81344:	e01e      	b.n	81384 <UnityPrintNumber+0x178>
   81346:	fbb5 f3f4 	udiv	r3, r5, r4
   8134a:	fba7 e103 	umull	lr, r1, r7, r3
   8134e:	08c9      	lsrs	r1, r1, #3
   81350:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81354:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   81358:	3130      	adds	r1, #48	; 0x30
   8135a:	b2c9      	uxtb	r1, r1
   8135c:	47c0      	blx	r8
   8135e:	e011      	b.n	81384 <UnityPrintNumber+0x178>
   81360:	6883      	ldr	r3, [r0, #8]
   81362:	6819      	ldr	r1, [r3, #0]
   81364:	fbb5 f3f4 	udiv	r3, r5, r4
   81368:	fba7 0203 	umull	r0, r2, r7, r3
   8136c:	08d2      	lsrs	r2, r2, #3
   8136e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81372:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81376:	3330      	adds	r3, #48	; 0x30
   81378:	700b      	strb	r3, [r1, #0]
   8137a:	6833      	ldr	r3, [r6, #0]
   8137c:	689b      	ldr	r3, [r3, #8]
   8137e:	681a      	ldr	r2, [r3, #0]
   81380:	3201      	adds	r2, #1
   81382:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   81384:	4b07      	ldr	r3, [pc, #28]	; (813a4 <UnityPrintNumber+0x198>)
   81386:	fb83 2304 	smull	r2, r3, r3, r4
   8138a:	17e4      	asrs	r4, r4, #31
   8138c:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   81390:	2c00      	cmp	r4, #0
   81392:	dcb4      	bgt.n	812fe <UnityPrintNumber+0xf2>
}
   81394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81398:	20070588 	.word	0x20070588
   8139c:	00083799 	.word	0x00083799
   813a0:	cccccccd 	.word	0xcccccccd
   813a4:	66666667 	.word	0x66666667

000813a8 <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   813a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   813ac:	4607      	mov	r7, r0
    _U_UINT divisor = 1;
   813ae:	2401      	movs	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   813b0:	e005      	b.n	813be <UnityPrintNumberUnsigned+0x16>
    {
        next_divisor = divisor * 10;
   813b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   813b6:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   813b8:	429c      	cmp	r4, r3
   813ba:	d204      	bcs.n	813c6 <UnityPrintNumberUnsigned+0x1e>
            divisor = next_divisor;
   813bc:	461c      	mov	r4, r3
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   813be:	fbb7 f3f4 	udiv	r3, r7, r4
   813c2:	2b09      	cmp	r3, #9
   813c4:	d8f5      	bhi.n	813b2 <UnityPrintNumberUnsigned+0xa>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   813c6:	4e27      	ldr	r6, [pc, #156]	; (81464 <UnityPrintNumberUnsigned+0xbc>)
   813c8:	4d27      	ldr	r5, [pc, #156]	; (81468 <UnityPrintNumberUnsigned+0xc0>)
   813ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8146c <UnityPrintNumberUnsigned+0xc4>
   813ce:	6833      	ldr	r3, [r6, #0]
   813d0:	6899      	ldr	r1, [r3, #8]
   813d2:	688a      	ldr	r2, [r1, #8]
   813d4:	3a01      	subs	r2, #1
   813d6:	608a      	str	r2, [r1, #8]
   813d8:	2a00      	cmp	r2, #0
   813da:	da2a      	bge.n	81432 <UnityPrintNumberUnsigned+0x8a>
   813dc:	689a      	ldr	r2, [r3, #8]
   813de:	6890      	ldr	r0, [r2, #8]
   813e0:	6991      	ldr	r1, [r2, #24]
   813e2:	4288      	cmp	r0, r1
   813e4:	db17      	blt.n	81416 <UnityPrintNumberUnsigned+0x6e>
   813e6:	6811      	ldr	r1, [r2, #0]
   813e8:	fbb7 f3f4 	udiv	r3, r7, r4
   813ec:	fba5 0203 	umull	r0, r2, r5, r3
   813f0:	08d2      	lsrs	r2, r2, #3
   813f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   813f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   813fa:	3330      	adds	r3, #48	; 0x30
   813fc:	700b      	strb	r3, [r1, #0]
   813fe:	6830      	ldr	r0, [r6, #0]
   81400:	6882      	ldr	r2, [r0, #8]
   81402:	6813      	ldr	r3, [r2, #0]
   81404:	7819      	ldrb	r1, [r3, #0]
   81406:	290a      	cmp	r1, #10
   81408:	d002      	beq.n	81410 <UnityPrintNumberUnsigned+0x68>
   8140a:	3301      	adds	r3, #1
   8140c:	6013      	str	r3, [r2, #0]
   8140e:	e022      	b.n	81456 <UnityPrintNumberUnsigned+0xae>
   81410:	210a      	movs	r1, #10
   81412:	47c0      	blx	r8
   81414:	e01f      	b.n	81456 <UnityPrintNumberUnsigned+0xae>
   81416:	fbb7 f1f4 	udiv	r1, r7, r4
   8141a:	fba5 e001 	umull	lr, r0, r5, r1
   8141e:	08c0      	lsrs	r0, r0, #3
   81420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81424:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   81428:	3130      	adds	r1, #48	; 0x30
   8142a:	4618      	mov	r0, r3
   8142c:	b2c9      	uxtb	r1, r1
   8142e:	47c0      	blx	r8
   81430:	e011      	b.n	81456 <UnityPrintNumberUnsigned+0xae>
   81432:	689b      	ldr	r3, [r3, #8]
   81434:	6819      	ldr	r1, [r3, #0]
   81436:	fbb7 f3f4 	udiv	r3, r7, r4
   8143a:	fba5 0203 	umull	r0, r2, r5, r3
   8143e:	08d2      	lsrs	r2, r2, #3
   81440:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81444:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81448:	3330      	adds	r3, #48	; 0x30
   8144a:	700b      	strb	r3, [r1, #0]
   8144c:	6833      	ldr	r3, [r6, #0]
   8144e:	689b      	ldr	r3, [r3, #8]
   81450:	681a      	ldr	r2, [r3, #0]
   81452:	3201      	adds	r2, #1
   81454:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   81456:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   8145a:	08e4      	lsrs	r4, r4, #3
   8145c:	d1b7      	bne.n	813ce <UnityPrintNumberUnsigned+0x26>
}
   8145e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81462:	bf00      	nop
   81464:	20070588 	.word	0x20070588
   81468:	cccccccd 	.word	0xcccccccd
   8146c:	00083799 	.word	0x00083799

00081470 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   81470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81474:	4606      	mov	r6, r0
   81476:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   81478:	4b5e      	ldr	r3, [pc, #376]	; (815f4 <UnityPrintNumberHex+0x184>)
   8147a:	6818      	ldr	r0, [r3, #0]
   8147c:	6882      	ldr	r2, [r0, #8]
   8147e:	6893      	ldr	r3, [r2, #8]
   81480:	3b01      	subs	r3, #1
   81482:	6093      	str	r3, [r2, #8]
   81484:	2b00      	cmp	r3, #0
   81486:	da19      	bge.n	814bc <UnityPrintNumberHex+0x4c>
   81488:	6882      	ldr	r2, [r0, #8]
   8148a:	6891      	ldr	r1, [r2, #8]
   8148c:	6993      	ldr	r3, [r2, #24]
   8148e:	4299      	cmp	r1, r3
   81490:	db10      	blt.n	814b4 <UnityPrintNumberHex+0x44>
   81492:	6813      	ldr	r3, [r2, #0]
   81494:	2230      	movs	r2, #48	; 0x30
   81496:	701a      	strb	r2, [r3, #0]
   81498:	4b56      	ldr	r3, [pc, #344]	; (815f4 <UnityPrintNumberHex+0x184>)
   8149a:	6818      	ldr	r0, [r3, #0]
   8149c:	6882      	ldr	r2, [r0, #8]
   8149e:	6813      	ldr	r3, [r2, #0]
   814a0:	7819      	ldrb	r1, [r3, #0]
   814a2:	290a      	cmp	r1, #10
   814a4:	d002      	beq.n	814ac <UnityPrintNumberHex+0x3c>
   814a6:	3301      	adds	r3, #1
   814a8:	6013      	str	r3, [r2, #0]
   814aa:	e011      	b.n	814d0 <UnityPrintNumberHex+0x60>
   814ac:	210a      	movs	r1, #10
   814ae:	4b52      	ldr	r3, [pc, #328]	; (815f8 <UnityPrintNumberHex+0x188>)
   814b0:	4798      	blx	r3
   814b2:	e00d      	b.n	814d0 <UnityPrintNumberHex+0x60>
   814b4:	2130      	movs	r1, #48	; 0x30
   814b6:	4b50      	ldr	r3, [pc, #320]	; (815f8 <UnityPrintNumberHex+0x188>)
   814b8:	4798      	blx	r3
   814ba:	e009      	b.n	814d0 <UnityPrintNumberHex+0x60>
   814bc:	6883      	ldr	r3, [r0, #8]
   814be:	681b      	ldr	r3, [r3, #0]
   814c0:	2230      	movs	r2, #48	; 0x30
   814c2:	701a      	strb	r2, [r3, #0]
   814c4:	4b4b      	ldr	r3, [pc, #300]	; (815f4 <UnityPrintNumberHex+0x184>)
   814c6:	681b      	ldr	r3, [r3, #0]
   814c8:	689b      	ldr	r3, [r3, #8]
   814ca:	681a      	ldr	r2, [r3, #0]
   814cc:	3201      	adds	r2, #1
   814ce:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   814d0:	4b48      	ldr	r3, [pc, #288]	; (815f4 <UnityPrintNumberHex+0x184>)
   814d2:	6818      	ldr	r0, [r3, #0]
   814d4:	6882      	ldr	r2, [r0, #8]
   814d6:	6893      	ldr	r3, [r2, #8]
   814d8:	3b01      	subs	r3, #1
   814da:	6093      	str	r3, [r2, #8]
   814dc:	2b00      	cmp	r3, #0
   814de:	da1b      	bge.n	81518 <UnityPrintNumberHex+0xa8>
   814e0:	6882      	ldr	r2, [r0, #8]
   814e2:	6891      	ldr	r1, [r2, #8]
   814e4:	6993      	ldr	r3, [r2, #24]
   814e6:	4299      	cmp	r1, r3
   814e8:	db10      	blt.n	8150c <UnityPrintNumberHex+0x9c>
   814ea:	6813      	ldr	r3, [r2, #0]
   814ec:	2278      	movs	r2, #120	; 0x78
   814ee:	701a      	strb	r2, [r3, #0]
   814f0:	4b40      	ldr	r3, [pc, #256]	; (815f4 <UnityPrintNumberHex+0x184>)
   814f2:	6818      	ldr	r0, [r3, #0]
   814f4:	6882      	ldr	r2, [r0, #8]
   814f6:	6813      	ldr	r3, [r2, #0]
   814f8:	7819      	ldrb	r1, [r3, #0]
   814fa:	290a      	cmp	r1, #10
   814fc:	d002      	beq.n	81504 <UnityPrintNumberHex+0x94>
   814fe:	3301      	adds	r3, #1
   81500:	6013      	str	r3, [r2, #0]
   81502:	e006      	b.n	81512 <UnityPrintNumberHex+0xa2>
   81504:	210a      	movs	r1, #10
   81506:	4b3c      	ldr	r3, [pc, #240]	; (815f8 <UnityPrintNumberHex+0x188>)
   81508:	4798      	blx	r3
   8150a:	e002      	b.n	81512 <UnityPrintNumberHex+0xa2>
   8150c:	2178      	movs	r1, #120	; 0x78
   8150e:	4b3a      	ldr	r3, [pc, #232]	; (815f8 <UnityPrintNumberHex+0x188>)
   81510:	4798      	blx	r3

    while (nibbles > 0)
   81512:	b964      	cbnz	r4, 8152e <UnityPrintNumberHex+0xbe>
   81514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   81518:	6883      	ldr	r3, [r0, #8]
   8151a:	681b      	ldr	r3, [r3, #0]
   8151c:	2278      	movs	r2, #120	; 0x78
   8151e:	701a      	strb	r2, [r3, #0]
   81520:	4b34      	ldr	r3, [pc, #208]	; (815f4 <UnityPrintNumberHex+0x184>)
   81522:	681b      	ldr	r3, [r3, #0]
   81524:	689b      	ldr	r3, [r3, #8]
   81526:	681a      	ldr	r2, [r3, #0]
   81528:	3201      	adds	r2, #1
   8152a:	601a      	str	r2, [r3, #0]
   8152c:	e7f1      	b.n	81512 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   8152e:	4d31      	ldr	r5, [pc, #196]	; (815f4 <UnityPrintNumberHex+0x184>)
   81530:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 815f8 <UnityPrintNumberHex+0x188>
   81534:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   81538:	3c01      	subs	r4, #1
   8153a:	b2e4      	uxtb	r4, r4
   8153c:	00a3      	lsls	r3, r4, #2
   8153e:	fa26 f303 	lsr.w	r3, r6, r3
   81542:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   81546:	2b09      	cmp	r3, #9
   81548:	d828      	bhi.n	8159c <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   8154a:	6828      	ldr	r0, [r5, #0]
   8154c:	6881      	ldr	r1, [r0, #8]
   8154e:	688a      	ldr	r2, [r1, #8]
   81550:	3a01      	subs	r2, #1
   81552:	608a      	str	r2, [r1, #8]
   81554:	2a00      	cmp	r2, #0
   81556:	da17      	bge.n	81588 <UnityPrintNumberHex+0x118>
   81558:	6882      	ldr	r2, [r0, #8]
   8155a:	6891      	ldr	r1, [r2, #8]
   8155c:	6997      	ldr	r7, [r2, #24]
   8155e:	42b9      	cmp	r1, r7
   81560:	db0e      	blt.n	81580 <UnityPrintNumberHex+0x110>
   81562:	6812      	ldr	r2, [r2, #0]
   81564:	3330      	adds	r3, #48	; 0x30
   81566:	7013      	strb	r3, [r2, #0]
   81568:	6828      	ldr	r0, [r5, #0]
   8156a:	6882      	ldr	r2, [r0, #8]
   8156c:	6813      	ldr	r3, [r2, #0]
   8156e:	7819      	ldrb	r1, [r3, #0]
   81570:	290a      	cmp	r1, #10
   81572:	d002      	beq.n	8157a <UnityPrintNumberHex+0x10a>
   81574:	3301      	adds	r3, #1
   81576:	6013      	str	r3, [r2, #0]
   81578:	e038      	b.n	815ec <UnityPrintNumberHex+0x17c>
   8157a:	4641      	mov	r1, r8
   8157c:	47c8      	blx	r9
   8157e:	e035      	b.n	815ec <UnityPrintNumberHex+0x17c>
   81580:	f103 0130 	add.w	r1, r3, #48	; 0x30
   81584:	47c8      	blx	r9
   81586:	e031      	b.n	815ec <UnityPrintNumberHex+0x17c>
   81588:	6882      	ldr	r2, [r0, #8]
   8158a:	6812      	ldr	r2, [r2, #0]
   8158c:	3330      	adds	r3, #48	; 0x30
   8158e:	7013      	strb	r3, [r2, #0]
   81590:	682b      	ldr	r3, [r5, #0]
   81592:	689b      	ldr	r3, [r3, #8]
   81594:	681a      	ldr	r2, [r3, #0]
   81596:	3201      	adds	r2, #1
   81598:	601a      	str	r2, [r3, #0]
   8159a:	e027      	b.n	815ec <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   8159c:	6828      	ldr	r0, [r5, #0]
   8159e:	6881      	ldr	r1, [r0, #8]
   815a0:	688a      	ldr	r2, [r1, #8]
   815a2:	3a01      	subs	r2, #1
   815a4:	608a      	str	r2, [r1, #8]
   815a6:	2a00      	cmp	r2, #0
   815a8:	da17      	bge.n	815da <UnityPrintNumberHex+0x16a>
   815aa:	6882      	ldr	r2, [r0, #8]
   815ac:	6891      	ldr	r1, [r2, #8]
   815ae:	6997      	ldr	r7, [r2, #24]
   815b0:	42b9      	cmp	r1, r7
   815b2:	db0e      	blt.n	815d2 <UnityPrintNumberHex+0x162>
   815b4:	6812      	ldr	r2, [r2, #0]
   815b6:	3337      	adds	r3, #55	; 0x37
   815b8:	7013      	strb	r3, [r2, #0]
   815ba:	6828      	ldr	r0, [r5, #0]
   815bc:	6882      	ldr	r2, [r0, #8]
   815be:	6813      	ldr	r3, [r2, #0]
   815c0:	7819      	ldrb	r1, [r3, #0]
   815c2:	290a      	cmp	r1, #10
   815c4:	d002      	beq.n	815cc <UnityPrintNumberHex+0x15c>
   815c6:	3301      	adds	r3, #1
   815c8:	6013      	str	r3, [r2, #0]
   815ca:	e00f      	b.n	815ec <UnityPrintNumberHex+0x17c>
   815cc:	4641      	mov	r1, r8
   815ce:	47c8      	blx	r9
   815d0:	e00c      	b.n	815ec <UnityPrintNumberHex+0x17c>
   815d2:	f103 0137 	add.w	r1, r3, #55	; 0x37
   815d6:	47c8      	blx	r9
   815d8:	e008      	b.n	815ec <UnityPrintNumberHex+0x17c>
   815da:	6882      	ldr	r2, [r0, #8]
   815dc:	6812      	ldr	r2, [r2, #0]
   815de:	3337      	adds	r3, #55	; 0x37
   815e0:	7013      	strb	r3, [r2, #0]
   815e2:	682b      	ldr	r3, [r5, #0]
   815e4:	689b      	ldr	r3, [r3, #8]
   815e6:	681a      	ldr	r2, [r3, #0]
   815e8:	3201      	adds	r2, #1
   815ea:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   815ec:	2c00      	cmp	r4, #0
   815ee:	d1a3      	bne.n	81538 <UnityPrintNumberHex+0xc8>
   815f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   815f4:	20070588 	.word	0x20070588
   815f8:	00083799 	.word	0x00083799

000815fc <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   815fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   815fe:	2800      	cmp	r0, #0
   81600:	f000 810a 	beq.w	81818 <UnityPrint+0x21c>
    {
        while (*pch)
   81604:	7803      	ldrb	r3, [r0, #0]
   81606:	2b00      	cmp	r3, #0
   81608:	f000 8106 	beq.w	81818 <UnityPrint+0x21c>
   8160c:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8160e:	4d83      	ldr	r5, [pc, #524]	; (8181c <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81610:	4e83      	ldr	r6, [pc, #524]	; (81820 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81612:	4f84      	ldr	r7, [pc, #528]	; (81824 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   81614:	f1a3 0220 	sub.w	r2, r3, #32
   81618:	b2d2      	uxtb	r2, r2
   8161a:	2a5e      	cmp	r2, #94	; 0x5e
   8161c:	d82a      	bhi.n	81674 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   8161e:	6828      	ldr	r0, [r5, #0]
   81620:	6882      	ldr	r2, [r0, #8]
   81622:	6893      	ldr	r3, [r2, #8]
   81624:	3b01      	subs	r3, #1
   81626:	6093      	str	r3, [r2, #8]
   81628:	2b00      	cmp	r3, #0
   8162a:	da18      	bge.n	8165e <UnityPrint+0x62>
   8162c:	6882      	ldr	r2, [r0, #8]
   8162e:	6891      	ldr	r1, [r2, #8]
   81630:	6993      	ldr	r3, [r2, #24]
   81632:	4299      	cmp	r1, r3
   81634:	db0f      	blt.n	81656 <UnityPrint+0x5a>
   81636:	6813      	ldr	r3, [r2, #0]
   81638:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8163c:	701a      	strb	r2, [r3, #0]
   8163e:	6828      	ldr	r0, [r5, #0]
   81640:	6882      	ldr	r2, [r0, #8]
   81642:	6813      	ldr	r3, [r2, #0]
   81644:	7819      	ldrb	r1, [r3, #0]
   81646:	290a      	cmp	r1, #10
   81648:	d002      	beq.n	81650 <UnityPrint+0x54>
   8164a:	3301      	adds	r3, #1
   8164c:	6013      	str	r3, [r2, #0]
   8164e:	e0de      	b.n	8180e <UnityPrint+0x212>
   81650:	210a      	movs	r1, #10
   81652:	47b8      	blx	r7
   81654:	e0db      	b.n	8180e <UnityPrint+0x212>
   81656:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8165a:	47b8      	blx	r7
   8165c:	e0d7      	b.n	8180e <UnityPrint+0x212>
   8165e:	6883      	ldr	r3, [r0, #8]
   81660:	681b      	ldr	r3, [r3, #0]
   81662:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   81666:	701a      	strb	r2, [r3, #0]
   81668:	682b      	ldr	r3, [r5, #0]
   8166a:	689b      	ldr	r3, [r3, #8]
   8166c:	681a      	ldr	r2, [r3, #0]
   8166e:	3201      	adds	r2, #1
   81670:	601a      	str	r2, [r3, #0]
   81672:	e0cc      	b.n	8180e <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   81674:	2b0d      	cmp	r3, #13
   81676:	d14e      	bne.n	81716 <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   81678:	6828      	ldr	r0, [r5, #0]
   8167a:	6882      	ldr	r2, [r0, #8]
   8167c:	6893      	ldr	r3, [r2, #8]
   8167e:	3b01      	subs	r3, #1
   81680:	6093      	str	r3, [r2, #8]
   81682:	2b00      	cmp	r3, #0
   81684:	da16      	bge.n	816b4 <UnityPrint+0xb8>
   81686:	6882      	ldr	r2, [r0, #8]
   81688:	6891      	ldr	r1, [r2, #8]
   8168a:	6993      	ldr	r3, [r2, #24]
   8168c:	4299      	cmp	r1, r3
   8168e:	db0e      	blt.n	816ae <UnityPrint+0xb2>
   81690:	6813      	ldr	r3, [r2, #0]
   81692:	225c      	movs	r2, #92	; 0x5c
   81694:	701a      	strb	r2, [r3, #0]
   81696:	6828      	ldr	r0, [r5, #0]
   81698:	6882      	ldr	r2, [r0, #8]
   8169a:	6813      	ldr	r3, [r2, #0]
   8169c:	7819      	ldrb	r1, [r3, #0]
   8169e:	290a      	cmp	r1, #10
   816a0:	d002      	beq.n	816a8 <UnityPrint+0xac>
   816a2:	3301      	adds	r3, #1
   816a4:	6013      	str	r3, [r2, #0]
   816a6:	e00e      	b.n	816c6 <UnityPrint+0xca>
   816a8:	210a      	movs	r1, #10
   816aa:	47b8      	blx	r7
   816ac:	e00b      	b.n	816c6 <UnityPrint+0xca>
   816ae:	215c      	movs	r1, #92	; 0x5c
   816b0:	47b8      	blx	r7
   816b2:	e008      	b.n	816c6 <UnityPrint+0xca>
   816b4:	6883      	ldr	r3, [r0, #8]
   816b6:	681b      	ldr	r3, [r3, #0]
   816b8:	225c      	movs	r2, #92	; 0x5c
   816ba:	701a      	strb	r2, [r3, #0]
   816bc:	682b      	ldr	r3, [r5, #0]
   816be:	689b      	ldr	r3, [r3, #8]
   816c0:	681a      	ldr	r2, [r3, #0]
   816c2:	3201      	adds	r2, #1
   816c4:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   816c6:	6828      	ldr	r0, [r5, #0]
   816c8:	6882      	ldr	r2, [r0, #8]
   816ca:	6893      	ldr	r3, [r2, #8]
   816cc:	3b01      	subs	r3, #1
   816ce:	6093      	str	r3, [r2, #8]
   816d0:	2b00      	cmp	r3, #0
   816d2:	da16      	bge.n	81702 <UnityPrint+0x106>
   816d4:	6882      	ldr	r2, [r0, #8]
   816d6:	6891      	ldr	r1, [r2, #8]
   816d8:	6993      	ldr	r3, [r2, #24]
   816da:	4299      	cmp	r1, r3
   816dc:	db0e      	blt.n	816fc <UnityPrint+0x100>
   816de:	6813      	ldr	r3, [r2, #0]
   816e0:	2272      	movs	r2, #114	; 0x72
   816e2:	701a      	strb	r2, [r3, #0]
   816e4:	6828      	ldr	r0, [r5, #0]
   816e6:	6882      	ldr	r2, [r0, #8]
   816e8:	6813      	ldr	r3, [r2, #0]
   816ea:	7819      	ldrb	r1, [r3, #0]
   816ec:	290a      	cmp	r1, #10
   816ee:	d002      	beq.n	816f6 <UnityPrint+0xfa>
   816f0:	3301      	adds	r3, #1
   816f2:	6013      	str	r3, [r2, #0]
   816f4:	e08b      	b.n	8180e <UnityPrint+0x212>
   816f6:	210a      	movs	r1, #10
   816f8:	47b8      	blx	r7
   816fa:	e088      	b.n	8180e <UnityPrint+0x212>
   816fc:	2172      	movs	r1, #114	; 0x72
   816fe:	47b8      	blx	r7
   81700:	e085      	b.n	8180e <UnityPrint+0x212>
   81702:	6883      	ldr	r3, [r0, #8]
   81704:	681b      	ldr	r3, [r3, #0]
   81706:	2272      	movs	r2, #114	; 0x72
   81708:	701a      	strb	r2, [r3, #0]
   8170a:	682b      	ldr	r3, [r5, #0]
   8170c:	689b      	ldr	r3, [r3, #8]
   8170e:	681a      	ldr	r2, [r3, #0]
   81710:	3201      	adds	r2, #1
   81712:	601a      	str	r2, [r3, #0]
   81714:	e07b      	b.n	8180e <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   81716:	2b0a      	cmp	r3, #10
   81718:	d14e      	bne.n	817b8 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   8171a:	6828      	ldr	r0, [r5, #0]
   8171c:	6882      	ldr	r2, [r0, #8]
   8171e:	6893      	ldr	r3, [r2, #8]
   81720:	3b01      	subs	r3, #1
   81722:	6093      	str	r3, [r2, #8]
   81724:	2b00      	cmp	r3, #0
   81726:	da16      	bge.n	81756 <UnityPrint+0x15a>
   81728:	6882      	ldr	r2, [r0, #8]
   8172a:	6891      	ldr	r1, [r2, #8]
   8172c:	6993      	ldr	r3, [r2, #24]
   8172e:	4299      	cmp	r1, r3
   81730:	db0e      	blt.n	81750 <UnityPrint+0x154>
   81732:	6813      	ldr	r3, [r2, #0]
   81734:	225c      	movs	r2, #92	; 0x5c
   81736:	701a      	strb	r2, [r3, #0]
   81738:	6828      	ldr	r0, [r5, #0]
   8173a:	6882      	ldr	r2, [r0, #8]
   8173c:	6813      	ldr	r3, [r2, #0]
   8173e:	7819      	ldrb	r1, [r3, #0]
   81740:	290a      	cmp	r1, #10
   81742:	d002      	beq.n	8174a <UnityPrint+0x14e>
   81744:	3301      	adds	r3, #1
   81746:	6013      	str	r3, [r2, #0]
   81748:	e00e      	b.n	81768 <UnityPrint+0x16c>
   8174a:	210a      	movs	r1, #10
   8174c:	47b8      	blx	r7
   8174e:	e00b      	b.n	81768 <UnityPrint+0x16c>
   81750:	215c      	movs	r1, #92	; 0x5c
   81752:	47b8      	blx	r7
   81754:	e008      	b.n	81768 <UnityPrint+0x16c>
   81756:	6883      	ldr	r3, [r0, #8]
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	225c      	movs	r2, #92	; 0x5c
   8175c:	701a      	strb	r2, [r3, #0]
   8175e:	682b      	ldr	r3, [r5, #0]
   81760:	689b      	ldr	r3, [r3, #8]
   81762:	681a      	ldr	r2, [r3, #0]
   81764:	3201      	adds	r2, #1
   81766:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   81768:	6828      	ldr	r0, [r5, #0]
   8176a:	6882      	ldr	r2, [r0, #8]
   8176c:	6893      	ldr	r3, [r2, #8]
   8176e:	3b01      	subs	r3, #1
   81770:	6093      	str	r3, [r2, #8]
   81772:	2b00      	cmp	r3, #0
   81774:	da16      	bge.n	817a4 <UnityPrint+0x1a8>
   81776:	6882      	ldr	r2, [r0, #8]
   81778:	6891      	ldr	r1, [r2, #8]
   8177a:	6993      	ldr	r3, [r2, #24]
   8177c:	4299      	cmp	r1, r3
   8177e:	db0e      	blt.n	8179e <UnityPrint+0x1a2>
   81780:	6813      	ldr	r3, [r2, #0]
   81782:	226e      	movs	r2, #110	; 0x6e
   81784:	701a      	strb	r2, [r3, #0]
   81786:	6828      	ldr	r0, [r5, #0]
   81788:	6882      	ldr	r2, [r0, #8]
   8178a:	6813      	ldr	r3, [r2, #0]
   8178c:	7819      	ldrb	r1, [r3, #0]
   8178e:	290a      	cmp	r1, #10
   81790:	d002      	beq.n	81798 <UnityPrint+0x19c>
   81792:	3301      	adds	r3, #1
   81794:	6013      	str	r3, [r2, #0]
   81796:	e03a      	b.n	8180e <UnityPrint+0x212>
   81798:	210a      	movs	r1, #10
   8179a:	47b8      	blx	r7
   8179c:	e037      	b.n	8180e <UnityPrint+0x212>
   8179e:	216e      	movs	r1, #110	; 0x6e
   817a0:	47b8      	blx	r7
   817a2:	e034      	b.n	8180e <UnityPrint+0x212>
   817a4:	6883      	ldr	r3, [r0, #8]
   817a6:	681b      	ldr	r3, [r3, #0]
   817a8:	226e      	movs	r2, #110	; 0x6e
   817aa:	701a      	strb	r2, [r3, #0]
   817ac:	682b      	ldr	r3, [r5, #0]
   817ae:	689b      	ldr	r3, [r3, #8]
   817b0:	681a      	ldr	r2, [r3, #0]
   817b2:	3201      	adds	r2, #1
   817b4:	601a      	str	r2, [r3, #0]
   817b6:	e02a      	b.n	8180e <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   817b8:	6828      	ldr	r0, [r5, #0]
   817ba:	6882      	ldr	r2, [r0, #8]
   817bc:	6893      	ldr	r3, [r2, #8]
   817be:	3b01      	subs	r3, #1
   817c0:	6093      	str	r3, [r2, #8]
   817c2:	2b00      	cmp	r3, #0
   817c4:	da16      	bge.n	817f4 <UnityPrint+0x1f8>
   817c6:	6882      	ldr	r2, [r0, #8]
   817c8:	6891      	ldr	r1, [r2, #8]
   817ca:	6993      	ldr	r3, [r2, #24]
   817cc:	4299      	cmp	r1, r3
   817ce:	db0e      	blt.n	817ee <UnityPrint+0x1f2>
   817d0:	6813      	ldr	r3, [r2, #0]
   817d2:	225c      	movs	r2, #92	; 0x5c
   817d4:	701a      	strb	r2, [r3, #0]
   817d6:	6828      	ldr	r0, [r5, #0]
   817d8:	6882      	ldr	r2, [r0, #8]
   817da:	6813      	ldr	r3, [r2, #0]
   817dc:	7819      	ldrb	r1, [r3, #0]
   817de:	290a      	cmp	r1, #10
   817e0:	d002      	beq.n	817e8 <UnityPrint+0x1ec>
   817e2:	3301      	adds	r3, #1
   817e4:	6013      	str	r3, [r2, #0]
   817e6:	e00e      	b.n	81806 <UnityPrint+0x20a>
   817e8:	210a      	movs	r1, #10
   817ea:	47b8      	blx	r7
   817ec:	e00b      	b.n	81806 <UnityPrint+0x20a>
   817ee:	215c      	movs	r1, #92	; 0x5c
   817f0:	47b8      	blx	r7
   817f2:	e008      	b.n	81806 <UnityPrint+0x20a>
   817f4:	6883      	ldr	r3, [r0, #8]
   817f6:	681b      	ldr	r3, [r3, #0]
   817f8:	225c      	movs	r2, #92	; 0x5c
   817fa:	701a      	strb	r2, [r3, #0]
   817fc:	682b      	ldr	r3, [r5, #0]
   817fe:	689b      	ldr	r3, [r3, #8]
   81800:	681a      	ldr	r2, [r3, #0]
   81802:	3201      	adds	r2, #1
   81804:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81806:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   8180a:	2102      	movs	r1, #2
   8180c:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   8180e:	f814 3b01 	ldrb.w	r3, [r4], #1
   81812:	2b00      	cmp	r3, #0
   81814:	f47f aefe 	bne.w	81614 <UnityPrint+0x18>
   81818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8181a:	bf00      	nop
   8181c:	20070588 	.word	0x20070588
   81820:	00081471 	.word	0x00081471
   81824:	00083799 	.word	0x00083799

00081828 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   81828:	b538      	push	{r3, r4, r5, lr}
   8182a:	460d      	mov	r5, r1
    UnityPrint(file);
   8182c:	4b46      	ldr	r3, [pc, #280]	; (81948 <UnityTestResultsBegin+0x120>)
   8182e:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81830:	4b46      	ldr	r3, [pc, #280]	; (8194c <UnityTestResultsBegin+0x124>)
   81832:	6818      	ldr	r0, [r3, #0]
   81834:	6884      	ldr	r4, [r0, #8]
   81836:	68a2      	ldr	r2, [r4, #8]
   81838:	3a01      	subs	r2, #1
   8183a:	60a2      	str	r2, [r4, #8]
   8183c:	2a00      	cmp	r2, #0
   8183e:	da19      	bge.n	81874 <UnityTestResultsBegin+0x4c>
   81840:	6882      	ldr	r2, [r0, #8]
   81842:	6893      	ldr	r3, [r2, #8]
   81844:	6991      	ldr	r1, [r2, #24]
   81846:	428b      	cmp	r3, r1
   81848:	db10      	blt.n	8186c <UnityTestResultsBegin+0x44>
   8184a:	6813      	ldr	r3, [r2, #0]
   8184c:	223a      	movs	r2, #58	; 0x3a
   8184e:	701a      	strb	r2, [r3, #0]
   81850:	4b3e      	ldr	r3, [pc, #248]	; (8194c <UnityTestResultsBegin+0x124>)
   81852:	6818      	ldr	r0, [r3, #0]
   81854:	6882      	ldr	r2, [r0, #8]
   81856:	6813      	ldr	r3, [r2, #0]
   81858:	7819      	ldrb	r1, [r3, #0]
   8185a:	290a      	cmp	r1, #10
   8185c:	d002      	beq.n	81864 <UnityTestResultsBegin+0x3c>
   8185e:	3301      	adds	r3, #1
   81860:	6013      	str	r3, [r2, #0]
   81862:	e011      	b.n	81888 <UnityTestResultsBegin+0x60>
   81864:	210a      	movs	r1, #10
   81866:	4b3a      	ldr	r3, [pc, #232]	; (81950 <UnityTestResultsBegin+0x128>)
   81868:	4798      	blx	r3
   8186a:	e00d      	b.n	81888 <UnityTestResultsBegin+0x60>
   8186c:	213a      	movs	r1, #58	; 0x3a
   8186e:	4b38      	ldr	r3, [pc, #224]	; (81950 <UnityTestResultsBegin+0x128>)
   81870:	4798      	blx	r3
   81872:	e009      	b.n	81888 <UnityTestResultsBegin+0x60>
   81874:	6883      	ldr	r3, [r0, #8]
   81876:	681b      	ldr	r3, [r3, #0]
   81878:	223a      	movs	r2, #58	; 0x3a
   8187a:	701a      	strb	r2, [r3, #0]
   8187c:	4b33      	ldr	r3, [pc, #204]	; (8194c <UnityTestResultsBegin+0x124>)
   8187e:	681b      	ldr	r3, [r3, #0]
   81880:	689b      	ldr	r3, [r3, #8]
   81882:	681a      	ldr	r2, [r3, #0]
   81884:	3201      	adds	r2, #1
   81886:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   81888:	4628      	mov	r0, r5
   8188a:	4b32      	ldr	r3, [pc, #200]	; (81954 <UnityTestResultsBegin+0x12c>)
   8188c:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8188e:	4b2f      	ldr	r3, [pc, #188]	; (8194c <UnityTestResultsBegin+0x124>)
   81890:	6818      	ldr	r0, [r3, #0]
   81892:	6882      	ldr	r2, [r0, #8]
   81894:	6893      	ldr	r3, [r2, #8]
   81896:	3b01      	subs	r3, #1
   81898:	6093      	str	r3, [r2, #8]
   8189a:	2b00      	cmp	r3, #0
   8189c:	da19      	bge.n	818d2 <UnityTestResultsBegin+0xaa>
   8189e:	6882      	ldr	r2, [r0, #8]
   818a0:	6891      	ldr	r1, [r2, #8]
   818a2:	6993      	ldr	r3, [r2, #24]
   818a4:	4299      	cmp	r1, r3
   818a6:	db10      	blt.n	818ca <UnityTestResultsBegin+0xa2>
   818a8:	6813      	ldr	r3, [r2, #0]
   818aa:	223a      	movs	r2, #58	; 0x3a
   818ac:	701a      	strb	r2, [r3, #0]
   818ae:	4b27      	ldr	r3, [pc, #156]	; (8194c <UnityTestResultsBegin+0x124>)
   818b0:	6818      	ldr	r0, [r3, #0]
   818b2:	6882      	ldr	r2, [r0, #8]
   818b4:	6813      	ldr	r3, [r2, #0]
   818b6:	7819      	ldrb	r1, [r3, #0]
   818b8:	290a      	cmp	r1, #10
   818ba:	d002      	beq.n	818c2 <UnityTestResultsBegin+0x9a>
   818bc:	3301      	adds	r3, #1
   818be:	6013      	str	r3, [r2, #0]
   818c0:	e011      	b.n	818e6 <UnityTestResultsBegin+0xbe>
   818c2:	210a      	movs	r1, #10
   818c4:	4b22      	ldr	r3, [pc, #136]	; (81950 <UnityTestResultsBegin+0x128>)
   818c6:	4798      	blx	r3
   818c8:	e00d      	b.n	818e6 <UnityTestResultsBegin+0xbe>
   818ca:	213a      	movs	r1, #58	; 0x3a
   818cc:	4b20      	ldr	r3, [pc, #128]	; (81950 <UnityTestResultsBegin+0x128>)
   818ce:	4798      	blx	r3
   818d0:	e009      	b.n	818e6 <UnityTestResultsBegin+0xbe>
   818d2:	6883      	ldr	r3, [r0, #8]
   818d4:	681b      	ldr	r3, [r3, #0]
   818d6:	223a      	movs	r2, #58	; 0x3a
   818d8:	701a      	strb	r2, [r3, #0]
   818da:	4b1c      	ldr	r3, [pc, #112]	; (8194c <UnityTestResultsBegin+0x124>)
   818dc:	681b      	ldr	r3, [r3, #0]
   818de:	689b      	ldr	r3, [r3, #8]
   818e0:	681a      	ldr	r2, [r3, #0]
   818e2:	3201      	adds	r2, #1
   818e4:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   818e6:	4b1c      	ldr	r3, [pc, #112]	; (81958 <UnityTestResultsBegin+0x130>)
   818e8:	6858      	ldr	r0, [r3, #4]
   818ea:	4b17      	ldr	r3, [pc, #92]	; (81948 <UnityTestResultsBegin+0x120>)
   818ec:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   818ee:	4b17      	ldr	r3, [pc, #92]	; (8194c <UnityTestResultsBegin+0x124>)
   818f0:	6818      	ldr	r0, [r3, #0]
   818f2:	6882      	ldr	r2, [r0, #8]
   818f4:	6893      	ldr	r3, [r2, #8]
   818f6:	3b01      	subs	r3, #1
   818f8:	6093      	str	r3, [r2, #8]
   818fa:	2b00      	cmp	r3, #0
   818fc:	da19      	bge.n	81932 <UnityTestResultsBegin+0x10a>
   818fe:	6882      	ldr	r2, [r0, #8]
   81900:	6891      	ldr	r1, [r2, #8]
   81902:	6993      	ldr	r3, [r2, #24]
   81904:	4299      	cmp	r1, r3
   81906:	db10      	blt.n	8192a <UnityTestResultsBegin+0x102>
   81908:	6813      	ldr	r3, [r2, #0]
   8190a:	223a      	movs	r2, #58	; 0x3a
   8190c:	701a      	strb	r2, [r3, #0]
   8190e:	4b0f      	ldr	r3, [pc, #60]	; (8194c <UnityTestResultsBegin+0x124>)
   81910:	6818      	ldr	r0, [r3, #0]
   81912:	6882      	ldr	r2, [r0, #8]
   81914:	6813      	ldr	r3, [r2, #0]
   81916:	7819      	ldrb	r1, [r3, #0]
   81918:	290a      	cmp	r1, #10
   8191a:	d002      	beq.n	81922 <UnityTestResultsBegin+0xfa>
   8191c:	3301      	adds	r3, #1
   8191e:	6013      	str	r3, [r2, #0]
   81920:	bd38      	pop	{r3, r4, r5, pc}
   81922:	210a      	movs	r1, #10
   81924:	4b0a      	ldr	r3, [pc, #40]	; (81950 <UnityTestResultsBegin+0x128>)
   81926:	4798      	blx	r3
   81928:	bd38      	pop	{r3, r4, r5, pc}
   8192a:	213a      	movs	r1, #58	; 0x3a
   8192c:	4b08      	ldr	r3, [pc, #32]	; (81950 <UnityTestResultsBegin+0x128>)
   8192e:	4798      	blx	r3
   81930:	bd38      	pop	{r3, r4, r5, pc}
   81932:	6883      	ldr	r3, [r0, #8]
   81934:	681b      	ldr	r3, [r3, #0]
   81936:	223a      	movs	r2, #58	; 0x3a
   81938:	701a      	strb	r2, [r3, #0]
   8193a:	4b04      	ldr	r3, [pc, #16]	; (8194c <UnityTestResultsBegin+0x124>)
   8193c:	681b      	ldr	r3, [r3, #0]
   8193e:	689b      	ldr	r3, [r3, #8]
   81940:	681a      	ldr	r2, [r3, #0]
   81942:	3201      	adds	r2, #1
   81944:	601a      	str	r2, [r3, #0]
   81946:	bd38      	pop	{r3, r4, r5, pc}
   81948:	000815fd 	.word	0x000815fd
   8194c:	20070588 	.word	0x20070588
   81950:	00083799 	.word	0x00083799
   81954:	0008120d 	.word	0x0008120d
   81958:	20070b34 	.word	0x20070b34

0008195c <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   8195c:	b508      	push	{r3, lr}
   8195e:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   81960:	4b19      	ldr	r3, [pc, #100]	; (819c8 <UnityTestResultsFailBegin+0x6c>)
   81962:	6818      	ldr	r0, [r3, #0]
   81964:	4b19      	ldr	r3, [pc, #100]	; (819cc <UnityTestResultsFailBegin+0x70>)
   81966:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   81968:	4819      	ldr	r0, [pc, #100]	; (819d0 <UnityTestResultsFailBegin+0x74>)
   8196a:	4b1a      	ldr	r3, [pc, #104]	; (819d4 <UnityTestResultsFailBegin+0x78>)
   8196c:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8196e:	4b1a      	ldr	r3, [pc, #104]	; (819d8 <UnityTestResultsFailBegin+0x7c>)
   81970:	6818      	ldr	r0, [r3, #0]
   81972:	6882      	ldr	r2, [r0, #8]
   81974:	6893      	ldr	r3, [r2, #8]
   81976:	3b01      	subs	r3, #1
   81978:	6093      	str	r3, [r2, #8]
   8197a:	2b00      	cmp	r3, #0
   8197c:	da19      	bge.n	819b2 <UnityTestResultsFailBegin+0x56>
   8197e:	6882      	ldr	r2, [r0, #8]
   81980:	6891      	ldr	r1, [r2, #8]
   81982:	6993      	ldr	r3, [r2, #24]
   81984:	4299      	cmp	r1, r3
   81986:	db10      	blt.n	819aa <UnityTestResultsFailBegin+0x4e>
   81988:	6813      	ldr	r3, [r2, #0]
   8198a:	223a      	movs	r2, #58	; 0x3a
   8198c:	701a      	strb	r2, [r3, #0]
   8198e:	4b12      	ldr	r3, [pc, #72]	; (819d8 <UnityTestResultsFailBegin+0x7c>)
   81990:	6818      	ldr	r0, [r3, #0]
   81992:	6882      	ldr	r2, [r0, #8]
   81994:	6813      	ldr	r3, [r2, #0]
   81996:	7819      	ldrb	r1, [r3, #0]
   81998:	290a      	cmp	r1, #10
   8199a:	d002      	beq.n	819a2 <UnityTestResultsFailBegin+0x46>
   8199c:	3301      	adds	r3, #1
   8199e:	6013      	str	r3, [r2, #0]
   819a0:	bd08      	pop	{r3, pc}
   819a2:	210a      	movs	r1, #10
   819a4:	4b0d      	ldr	r3, [pc, #52]	; (819dc <UnityTestResultsFailBegin+0x80>)
   819a6:	4798      	blx	r3
   819a8:	bd08      	pop	{r3, pc}
   819aa:	213a      	movs	r1, #58	; 0x3a
   819ac:	4b0b      	ldr	r3, [pc, #44]	; (819dc <UnityTestResultsFailBegin+0x80>)
   819ae:	4798      	blx	r3
   819b0:	bd08      	pop	{r3, pc}
   819b2:	6883      	ldr	r3, [r0, #8]
   819b4:	681b      	ldr	r3, [r3, #0]
   819b6:	223a      	movs	r2, #58	; 0x3a
   819b8:	701a      	strb	r2, [r3, #0]
   819ba:	4b07      	ldr	r3, [pc, #28]	; (819d8 <UnityTestResultsFailBegin+0x7c>)
   819bc:	681b      	ldr	r3, [r3, #0]
   819be:	689b      	ldr	r3, [r3, #8]
   819c0:	681a      	ldr	r2, [r3, #0]
   819c2:	3201      	adds	r2, #1
   819c4:	601a      	str	r2, [r3, #0]
   819c6:	bd08      	pop	{r3, pc}
   819c8:	20070b34 	.word	0x20070b34
   819cc:	00081829 	.word	0x00081829
   819d0:	00085a70 	.word	0x00085a70
   819d4:	000815fd 	.word	0x000815fd
   819d8:	20070588 	.word	0x20070588
   819dc:	00083799 	.word	0x00083799

000819e0 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   819e0:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   819e2:	4605      	mov	r5, r0
   819e4:	b120      	cbz	r0, 819f0 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   819e6:	4803      	ldr	r0, [pc, #12]	; (819f4 <UnityAddMsgIfSpecified+0x14>)
   819e8:	4c03      	ldr	r4, [pc, #12]	; (819f8 <UnityAddMsgIfSpecified+0x18>)
   819ea:	47a0      	blx	r4
        UnityPrint(msg);
   819ec:	4628      	mov	r0, r5
   819ee:	47a0      	blx	r4
   819f0:	bd38      	pop	{r3, r4, r5, pc}
   819f2:	bf00      	nop
   819f4:	00085a64 	.word	0x00085a64
   819f8:	000815fd 	.word	0x000815fd

000819fc <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   819fc:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   819fe:	f011 0f10 	tst.w	r1, #16
   81a02:	d002      	beq.n	81a0a <UnityPrintNumberByStyle+0xe>
    {
        UnityPrintNumber(number);
   81a04:	4b0a      	ldr	r3, [pc, #40]	; (81a30 <UnityPrintNumberByStyle+0x34>)
   81a06:	4798      	blx	r3
   81a08:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   81a0a:	f011 0f20 	tst.w	r1, #32
   81a0e:	d009      	beq.n	81a24 <UnityPrintNumberByStyle+0x28>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   81a10:	f001 010f 	and.w	r1, r1, #15
   81a14:	3901      	subs	r1, #1
   81a16:	4b07      	ldr	r3, [pc, #28]	; (81a34 <UnityPrintNumberByStyle+0x38>)
   81a18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   81a1c:	4018      	ands	r0, r3
   81a1e:	4b06      	ldr	r3, [pc, #24]	; (81a38 <UnityPrintNumberByStyle+0x3c>)
   81a20:	4798      	blx	r3
   81a22:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   81a24:	f001 010f 	and.w	r1, r1, #15
   81a28:	0049      	lsls	r1, r1, #1
   81a2a:	4b04      	ldr	r3, [pc, #16]	; (81a3c <UnityPrintNumberByStyle+0x40>)
   81a2c:	4798      	blx	r3
   81a2e:	bd08      	pop	{r3, pc}
   81a30:	0008120d 	.word	0x0008120d
   81a34:	00085a44 	.word	0x00085a44
   81a38:	000813a9 	.word	0x000813a9
   81a3c:	00081471 	.word	0x00081471

00081a40 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   81a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a44:	4607      	mov	r7, r0
   81a46:	4688      	mov	r8, r1
   81a48:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   81a4a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81a4e:	4e43      	ldr	r6, [pc, #268]	; (81b5c <UnityPrintMask+0x11c>)
   81a50:	f04f 0958 	mov.w	r9, #88	; 0x58
   81a54:	f8df a108 	ldr.w	sl, [pc, #264]	; 81b60 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   81a58:	423c      	tst	r4, r7
   81a5a:	d052      	beq.n	81b02 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   81a5c:	ea14 0f08 	tst.w	r4, r8
   81a60:	d027      	beq.n	81ab2 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   81a62:	6830      	ldr	r0, [r6, #0]
   81a64:	6882      	ldr	r2, [r0, #8]
   81a66:	6893      	ldr	r3, [r2, #8]
   81a68:	3b01      	subs	r3, #1
   81a6a:	6093      	str	r3, [r2, #8]
   81a6c:	2b00      	cmp	r3, #0
   81a6e:	da16      	bge.n	81a9e <UnityPrintMask+0x5e>
   81a70:	6882      	ldr	r2, [r0, #8]
   81a72:	6891      	ldr	r1, [r2, #8]
   81a74:	6993      	ldr	r3, [r2, #24]
   81a76:	4299      	cmp	r1, r3
   81a78:	db0e      	blt.n	81a98 <UnityPrintMask+0x58>
   81a7a:	6813      	ldr	r3, [r2, #0]
   81a7c:	2231      	movs	r2, #49	; 0x31
   81a7e:	701a      	strb	r2, [r3, #0]
   81a80:	6830      	ldr	r0, [r6, #0]
   81a82:	6882      	ldr	r2, [r0, #8]
   81a84:	6813      	ldr	r3, [r2, #0]
   81a86:	7819      	ldrb	r1, [r3, #0]
   81a88:	290a      	cmp	r1, #10
   81a8a:	d002      	beq.n	81a92 <UnityPrintMask+0x52>
   81a8c:	3301      	adds	r3, #1
   81a8e:	6013      	str	r3, [r2, #0]
   81a90:	e05e      	b.n	81b50 <UnityPrintMask+0x110>
   81a92:	210a      	movs	r1, #10
   81a94:	47d0      	blx	sl
   81a96:	e05b      	b.n	81b50 <UnityPrintMask+0x110>
   81a98:	2131      	movs	r1, #49	; 0x31
   81a9a:	47d0      	blx	sl
   81a9c:	e058      	b.n	81b50 <UnityPrintMask+0x110>
   81a9e:	6883      	ldr	r3, [r0, #8]
   81aa0:	681b      	ldr	r3, [r3, #0]
   81aa2:	2231      	movs	r2, #49	; 0x31
   81aa4:	701a      	strb	r2, [r3, #0]
   81aa6:	6833      	ldr	r3, [r6, #0]
   81aa8:	689b      	ldr	r3, [r3, #8]
   81aaa:	681a      	ldr	r2, [r3, #0]
   81aac:	3201      	adds	r2, #1
   81aae:	601a      	str	r2, [r3, #0]
   81ab0:	e04e      	b.n	81b50 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   81ab2:	6830      	ldr	r0, [r6, #0]
   81ab4:	6882      	ldr	r2, [r0, #8]
   81ab6:	6893      	ldr	r3, [r2, #8]
   81ab8:	3b01      	subs	r3, #1
   81aba:	6093      	str	r3, [r2, #8]
   81abc:	2b00      	cmp	r3, #0
   81abe:	da16      	bge.n	81aee <UnityPrintMask+0xae>
   81ac0:	6882      	ldr	r2, [r0, #8]
   81ac2:	6891      	ldr	r1, [r2, #8]
   81ac4:	6993      	ldr	r3, [r2, #24]
   81ac6:	4299      	cmp	r1, r3
   81ac8:	db0e      	blt.n	81ae8 <UnityPrintMask+0xa8>
   81aca:	6813      	ldr	r3, [r2, #0]
   81acc:	2230      	movs	r2, #48	; 0x30
   81ace:	701a      	strb	r2, [r3, #0]
   81ad0:	6830      	ldr	r0, [r6, #0]
   81ad2:	6882      	ldr	r2, [r0, #8]
   81ad4:	6813      	ldr	r3, [r2, #0]
   81ad6:	7819      	ldrb	r1, [r3, #0]
   81ad8:	290a      	cmp	r1, #10
   81ada:	d002      	beq.n	81ae2 <UnityPrintMask+0xa2>
   81adc:	3301      	adds	r3, #1
   81ade:	6013      	str	r3, [r2, #0]
   81ae0:	e036      	b.n	81b50 <UnityPrintMask+0x110>
   81ae2:	210a      	movs	r1, #10
   81ae4:	47d0      	blx	sl
   81ae6:	e033      	b.n	81b50 <UnityPrintMask+0x110>
   81ae8:	2130      	movs	r1, #48	; 0x30
   81aea:	47d0      	blx	sl
   81aec:	e030      	b.n	81b50 <UnityPrintMask+0x110>
   81aee:	6883      	ldr	r3, [r0, #8]
   81af0:	681b      	ldr	r3, [r3, #0]
   81af2:	2230      	movs	r2, #48	; 0x30
   81af4:	701a      	strb	r2, [r3, #0]
   81af6:	6833      	ldr	r3, [r6, #0]
   81af8:	689b      	ldr	r3, [r3, #8]
   81afa:	681a      	ldr	r2, [r3, #0]
   81afc:	3201      	adds	r2, #1
   81afe:	601a      	str	r2, [r3, #0]
   81b00:	e026      	b.n	81b50 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81b02:	6830      	ldr	r0, [r6, #0]
   81b04:	6882      	ldr	r2, [r0, #8]
   81b06:	6893      	ldr	r3, [r2, #8]
   81b08:	3b01      	subs	r3, #1
   81b0a:	6093      	str	r3, [r2, #8]
   81b0c:	2b00      	cmp	r3, #0
   81b0e:	da16      	bge.n	81b3e <UnityPrintMask+0xfe>
   81b10:	6882      	ldr	r2, [r0, #8]
   81b12:	6891      	ldr	r1, [r2, #8]
   81b14:	6993      	ldr	r3, [r2, #24]
   81b16:	4299      	cmp	r1, r3
   81b18:	db0e      	blt.n	81b38 <UnityPrintMask+0xf8>
   81b1a:	6813      	ldr	r3, [r2, #0]
   81b1c:	f883 9000 	strb.w	r9, [r3]
   81b20:	6830      	ldr	r0, [r6, #0]
   81b22:	6882      	ldr	r2, [r0, #8]
   81b24:	6813      	ldr	r3, [r2, #0]
   81b26:	7819      	ldrb	r1, [r3, #0]
   81b28:	290a      	cmp	r1, #10
   81b2a:	d002      	beq.n	81b32 <UnityPrintMask+0xf2>
   81b2c:	3301      	adds	r3, #1
   81b2e:	6013      	str	r3, [r2, #0]
   81b30:	e00e      	b.n	81b50 <UnityPrintMask+0x110>
   81b32:	210a      	movs	r1, #10
   81b34:	47d0      	blx	sl
   81b36:	e00b      	b.n	81b50 <UnityPrintMask+0x110>
   81b38:	4649      	mov	r1, r9
   81b3a:	47d0      	blx	sl
   81b3c:	e008      	b.n	81b50 <UnityPrintMask+0x110>
   81b3e:	6883      	ldr	r3, [r0, #8]
   81b40:	681b      	ldr	r3, [r3, #0]
   81b42:	f883 9000 	strb.w	r9, [r3]
   81b46:	6833      	ldr	r3, [r6, #0]
   81b48:	689b      	ldr	r3, [r3, #8]
   81b4a:	681a      	ldr	r2, [r3, #0]
   81b4c:	3201      	adds	r2, #1
   81b4e:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   81b50:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   81b52:	3d01      	subs	r5, #1
   81b54:	d180      	bne.n	81a58 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   81b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b5a:	bf00      	nop
   81b5c:	20070588 	.word	0x20070588
   81b60:	00083799 	.word	0x00083799

00081b64 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   81b64:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   81b66:	4802      	ldr	r0, [pc, #8]	; (81b70 <UnityPrintFail+0xc>)
   81b68:	4b02      	ldr	r3, [pc, #8]	; (81b74 <UnityPrintFail+0x10>)
   81b6a:	4798      	blx	r3
   81b6c:	bd08      	pop	{r3, pc}
   81b6e:	bf00      	nop
   81b70:	00085a70 	.word	0x00085a70
   81b74:	000815fd 	.word	0x000815fd

00081b78 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   81b78:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   81b7a:	4802      	ldr	r0, [pc, #8]	; (81b84 <UnityPrintOk+0xc>)
   81b7c:	4b02      	ldr	r3, [pc, #8]	; (81b88 <UnityPrintOk+0x10>)
   81b7e:	4798      	blx	r3
   81b80:	bd08      	pop	{r3, pc}
   81b82:	bf00      	nop
   81b84:	00085a60 	.word	0x00085a60
   81b88:	000815fd 	.word	0x000815fd

00081b8c <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   81b8c:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   81b8e:	4b24      	ldr	r3, [pc, #144]	; (81c20 <UnityConcludeTest+0x94>)
   81b90:	69db      	ldr	r3, [r3, #28]
   81b92:	b123      	cbz	r3, 81b9e <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   81b94:	4b22      	ldr	r3, [pc, #136]	; (81c20 <UnityConcludeTest+0x94>)
   81b96:	695a      	ldr	r2, [r3, #20]
   81b98:	3201      	adds	r2, #1
   81b9a:	615a      	str	r2, [r3, #20]
   81b9c:	e00f      	b.n	81bbe <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   81b9e:	4b20      	ldr	r3, [pc, #128]	; (81c20 <UnityConcludeTest+0x94>)
   81ba0:	699b      	ldr	r3, [r3, #24]
   81ba2:	b943      	cbnz	r3, 81bb6 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   81ba4:	4b1e      	ldr	r3, [pc, #120]	; (81c20 <UnityConcludeTest+0x94>)
   81ba6:	6818      	ldr	r0, [r3, #0]
   81ba8:	6899      	ldr	r1, [r3, #8]
   81baa:	4b1e      	ldr	r3, [pc, #120]	; (81c24 <UnityConcludeTest+0x98>)
   81bac:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   81bae:	481e      	ldr	r0, [pc, #120]	; (81c28 <UnityConcludeTest+0x9c>)
   81bb0:	4b1e      	ldr	r3, [pc, #120]	; (81c2c <UnityConcludeTest+0xa0>)
   81bb2:	4798      	blx	r3
   81bb4:	e003      	b.n	81bbe <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   81bb6:	4b1a      	ldr	r3, [pc, #104]	; (81c20 <UnityConcludeTest+0x94>)
   81bb8:	691a      	ldr	r2, [r3, #16]
   81bba:	3201      	adds	r2, #1
   81bbc:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   81bbe:	4b18      	ldr	r3, [pc, #96]	; (81c20 <UnityConcludeTest+0x94>)
   81bc0:	2200      	movs	r2, #0
   81bc2:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81bc4:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81bc6:	4b1a      	ldr	r3, [pc, #104]	; (81c30 <UnityConcludeTest+0xa4>)
   81bc8:	6818      	ldr	r0, [r3, #0]
   81bca:	6882      	ldr	r2, [r0, #8]
   81bcc:	6893      	ldr	r3, [r2, #8]
   81bce:	3b01      	subs	r3, #1
   81bd0:	6093      	str	r3, [r2, #8]
   81bd2:	2b00      	cmp	r3, #0
   81bd4:	da19      	bge.n	81c0a <UnityConcludeTest+0x7e>
   81bd6:	6882      	ldr	r2, [r0, #8]
   81bd8:	6891      	ldr	r1, [r2, #8]
   81bda:	6993      	ldr	r3, [r2, #24]
   81bdc:	4299      	cmp	r1, r3
   81bde:	db10      	blt.n	81c02 <UnityConcludeTest+0x76>
   81be0:	6813      	ldr	r3, [r2, #0]
   81be2:	220a      	movs	r2, #10
   81be4:	701a      	strb	r2, [r3, #0]
   81be6:	4b12      	ldr	r3, [pc, #72]	; (81c30 <UnityConcludeTest+0xa4>)
   81be8:	6818      	ldr	r0, [r3, #0]
   81bea:	6882      	ldr	r2, [r0, #8]
   81bec:	6813      	ldr	r3, [r2, #0]
   81bee:	7819      	ldrb	r1, [r3, #0]
   81bf0:	290a      	cmp	r1, #10
   81bf2:	d002      	beq.n	81bfa <UnityConcludeTest+0x6e>
   81bf4:	3301      	adds	r3, #1
   81bf6:	6013      	str	r3, [r2, #0]
   81bf8:	bd08      	pop	{r3, pc}
   81bfa:	210a      	movs	r1, #10
   81bfc:	4b0d      	ldr	r3, [pc, #52]	; (81c34 <UnityConcludeTest+0xa8>)
   81bfe:	4798      	blx	r3
   81c00:	bd08      	pop	{r3, pc}
   81c02:	210a      	movs	r1, #10
   81c04:	4b0b      	ldr	r3, [pc, #44]	; (81c34 <UnityConcludeTest+0xa8>)
   81c06:	4798      	blx	r3
   81c08:	bd08      	pop	{r3, pc}
   81c0a:	6883      	ldr	r3, [r0, #8]
   81c0c:	681b      	ldr	r3, [r3, #0]
   81c0e:	220a      	movs	r2, #10
   81c10:	701a      	strb	r2, [r3, #0]
   81c12:	4b07      	ldr	r3, [pc, #28]	; (81c30 <UnityConcludeTest+0xa4>)
   81c14:	681b      	ldr	r3, [r3, #0]
   81c16:	689b      	ldr	r3, [r3, #8]
   81c18:	681a      	ldr	r2, [r3, #0]
   81c1a:	3201      	adds	r2, #1
   81c1c:	601a      	str	r2, [r3, #0]
   81c1e:	bd08      	pop	{r3, pc}
   81c20:	20070b34 	.word	0x20070b34
   81c24:	00081829 	.word	0x00081829
   81c28:	00085abc 	.word	0x00085abc
   81c2c:	000815fd 	.word	0x000815fd
   81c30:	20070588 	.word	0x20070588
   81c34:	00083799 	.word	0x00083799

00081c38 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   81c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81c3c:	4605      	mov	r5, r0
   81c3e:	460f      	mov	r7, r1
   81c40:	4616      	mov	r6, r2
   81c42:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   81c44:	4c12      	ldr	r4, [pc, #72]	; (81c90 <UnityAssertBits+0x58>)
   81c46:	69a4      	ldr	r4, [r4, #24]
   81c48:	b9fc      	cbnz	r4, 81c8a <UnityAssertBits+0x52>
   81c4a:	4a11      	ldr	r2, [pc, #68]	; (81c90 <UnityAssertBits+0x58>)
   81c4c:	69d2      	ldr	r2, [r2, #28]
   81c4e:	b9e2      	cbnz	r2, 81c8a <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   81c50:	ea81 0306 	eor.w	r3, r1, r6
   81c54:	4203      	tst	r3, r0
   81c56:	d018      	beq.n	81c8a <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   81c58:	9808      	ldr	r0, [sp, #32]
   81c5a:	4b0e      	ldr	r3, [pc, #56]	; (81c94 <UnityAssertBits+0x5c>)
   81c5c:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   81c5e:	480e      	ldr	r0, [pc, #56]	; (81c98 <UnityAssertBits+0x60>)
   81c60:	f8df 9048 	ldr.w	r9, [pc, #72]	; 81cac <UnityAssertBits+0x74>
   81c64:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   81c66:	4628      	mov	r0, r5
   81c68:	4639      	mov	r1, r7
   81c6a:	4c0c      	ldr	r4, [pc, #48]	; (81c9c <UnityAssertBits+0x64>)
   81c6c:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   81c6e:	480c      	ldr	r0, [pc, #48]	; (81ca0 <UnityAssertBits+0x68>)
   81c70:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   81c72:	4628      	mov	r0, r5
   81c74:	4631      	mov	r1, r6
   81c76:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   81c78:	4640      	mov	r0, r8
   81c7a:	4b0a      	ldr	r3, [pc, #40]	; (81ca4 <UnityAssertBits+0x6c>)
   81c7c:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   81c7e:	4804      	ldr	r0, [pc, #16]	; (81c90 <UnityAssertBits+0x58>)
   81c80:	2101      	movs	r1, #1
   81c82:	6181      	str	r1, [r0, #24]
   81c84:	3020      	adds	r0, #32
   81c86:	4b08      	ldr	r3, [pc, #32]	; (81ca8 <UnityAssertBits+0x70>)
   81c88:	4798      	blx	r3
   81c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c8e:	bf00      	nop
   81c90:	20070b34 	.word	0x20070b34
   81c94:	0008195d 	.word	0x0008195d
   81c98:	00085a78 	.word	0x00085a78
   81c9c:	00081a41 	.word	0x00081a41
   81ca0:	00085a68 	.word	0x00085a68
   81ca4:	000819e1 	.word	0x000819e1
   81ca8:	000828e1 	.word	0x000828e1
   81cac:	000815fd 	.word	0x000815fd

00081cb0 <UnityAssertNumbersWithin>:
                               const _U_SINT expected,
                               const _U_SINT actual,
                               const char* msg,
                               const UNITY_LINE_TYPE lineNumber,
                               const UNITY_DISPLAY_STYLE_T style)
{
   81cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81cb4:	4680      	mov	r8, r0
   81cb6:	460e      	mov	r6, r1
   81cb8:	4615      	mov	r5, r2
   81cba:	4699      	mov	r9, r3
   81cbc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    UNITY_SKIP_EXECUTION;
   81cc0:	4c25      	ldr	r4, [pc, #148]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81cc2:	69a4      	ldr	r4, [r4, #24]
   81cc4:	2c00      	cmp	r4, #0
   81cc6:	d144      	bne.n	81d52 <UnityAssertNumbersWithin+0xa2>
   81cc8:	4b23      	ldr	r3, [pc, #140]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81cca:	69da      	ldr	r2, [r3, #28]
   81ccc:	2a00      	cmp	r2, #0
   81cce:	d140      	bne.n	81d52 <UnityAssertNumbersWithin+0xa2>

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   81cd0:	f017 0f10 	tst.w	r7, #16
   81cd4:	d010      	beq.n	81cf8 <UnityAssertNumbersWithin+0x48>
    {
        if (actual > expected)
   81cd6:	428d      	cmp	r5, r1
   81cd8:	dd06      	ble.n	81ce8 <UnityAssertNumbersWithin+0x38>
          Unity.CurrentTestFailed = ((actual - expected) > delta);
   81cda:	1a6a      	subs	r2, r5, r1
   81cdc:	4282      	cmp	r2, r0
   81cde:	bfd4      	ite	le
   81ce0:	2200      	movle	r2, #0
   81ce2:	2201      	movgt	r2, #1
   81ce4:	619a      	str	r2, [r3, #24]
   81ce6:	e013      	b.n	81d10 <UnityAssertNumbersWithin+0x60>
        else
          Unity.CurrentTestFailed = ((expected - actual) > delta);
   81ce8:	1b4a      	subs	r2, r1, r5
   81cea:	4282      	cmp	r2, r0
   81cec:	bfd4      	ite	le
   81cee:	2200      	movle	r2, #0
   81cf0:	2201      	movgt	r2, #1
   81cf2:	4b19      	ldr	r3, [pc, #100]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81cf4:	619a      	str	r2, [r3, #24]
   81cf6:	e00b      	b.n	81d10 <UnityAssertNumbersWithin+0x60>
    }
    else
    {
        if ((_U_UINT)actual > (_U_UINT)expected)
   81cf8:	428d      	cmp	r5, r1
            Unity.CurrentTestFailed = ((_U_UINT)(actual - expected) > (_U_UINT)delta);
   81cfa:	bf8c      	ite	hi
   81cfc:	ebc1 0205 	rsbhi	r2, r1, r5
        else
            Unity.CurrentTestFailed = ((_U_UINT)(expected - actual) > (_U_UINT)delta);
   81d00:	ebc5 0201 	rsbls	r2, r5, r1
   81d04:	4282      	cmp	r2, r0
   81d06:	bf94      	ite	ls
   81d08:	2200      	movls	r2, #0
   81d0a:	2201      	movhi	r2, #1
   81d0c:	4b12      	ldr	r3, [pc, #72]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81d0e:	619a      	str	r2, [r3, #24]
    }

    if (Unity.CurrentTestFailed)
   81d10:	4b11      	ldr	r3, [pc, #68]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81d12:	699b      	ldr	r3, [r3, #24]
   81d14:	b1eb      	cbz	r3, 81d52 <UnityAssertNumbersWithin+0xa2>
    {
        UnityTestResultsFailBegin(lineNumber);
   81d16:	9808      	ldr	r0, [sp, #32]
   81d18:	4b10      	ldr	r3, [pc, #64]	; (81d5c <UnityAssertNumbersWithin+0xac>)
   81d1a:	4798      	blx	r3
        UnityPrint(UnityStrDelta);
   81d1c:	4810      	ldr	r0, [pc, #64]	; (81d60 <UnityAssertNumbersWithin+0xb0>)
   81d1e:	f8df a058 	ldr.w	sl, [pc, #88]	; 81d78 <UnityAssertNumbersWithin+0xc8>
   81d22:	47d0      	blx	sl
        UnityPrintNumberByStyle(delta, style);
   81d24:	4640      	mov	r0, r8
   81d26:	4639      	mov	r1, r7
   81d28:	4c0e      	ldr	r4, [pc, #56]	; (81d64 <UnityAssertNumbersWithin+0xb4>)
   81d2a:	47a0      	blx	r4
        UnityPrint(UnityStrExpected);
   81d2c:	480e      	ldr	r0, [pc, #56]	; (81d68 <UnityAssertNumbersWithin+0xb8>)
   81d2e:	47d0      	blx	sl
        UnityPrintNumberByStyle(expected, style);
   81d30:	4630      	mov	r0, r6
   81d32:	4639      	mov	r1, r7
   81d34:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   81d36:	480d      	ldr	r0, [pc, #52]	; (81d6c <UnityAssertNumbersWithin+0xbc>)
   81d38:	47d0      	blx	sl
        UnityPrintNumberByStyle(actual, style);
   81d3a:	4628      	mov	r0, r5
   81d3c:	4639      	mov	r1, r7
   81d3e:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   81d40:	4648      	mov	r0, r9
   81d42:	4b0b      	ldr	r3, [pc, #44]	; (81d70 <UnityAssertNumbersWithin+0xc0>)
   81d44:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   81d46:	4804      	ldr	r0, [pc, #16]	; (81d58 <UnityAssertNumbersWithin+0xa8>)
   81d48:	2101      	movs	r1, #1
   81d4a:	6181      	str	r1, [r0, #24]
   81d4c:	3020      	adds	r0, #32
   81d4e:	4b09      	ldr	r3, [pc, #36]	; (81d74 <UnityAssertNumbersWithin+0xc4>)
   81d50:	4798      	blx	r3
   81d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d56:	bf00      	nop
   81d58:	20070b34 	.word	0x20070b34
   81d5c:	0008195d 	.word	0x0008195d
   81d60:	00085ac4 	.word	0x00085ac4
   81d64:	000819fd 	.word	0x000819fd
   81d68:	00085a78 	.word	0x00085a78
   81d6c:	00085a68 	.word	0x00085a68
   81d70:	000819e1 	.word	0x000819e1
   81d74:	000828e1 	.word	0x000828e1
   81d78:	000815fd 	.word	0x000815fd

00081d7c <UnityFail>:
//-----------------------------------------------
// Control Functions
//-----------------------------------------------

void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
   81d7c:	b510      	push	{r4, lr}
   81d7e:	4604      	mov	r4, r0
    UNITY_SKIP_EXECUTION;
   81d80:	4b3a      	ldr	r3, [pc, #232]	; (81e6c <UnityFail+0xf0>)
   81d82:	699b      	ldr	r3, [r3, #24]
   81d84:	2b00      	cmp	r3, #0
   81d86:	d16f      	bne.n	81e68 <UnityFail+0xec>
   81d88:	4b38      	ldr	r3, [pc, #224]	; (81e6c <UnityFail+0xf0>)
   81d8a:	69db      	ldr	r3, [r3, #28]
   81d8c:	2b00      	cmp	r3, #0
   81d8e:	d16b      	bne.n	81e68 <UnityFail+0xec>

    UnityTestResultsBegin(Unity.TestFile, line);
   81d90:	4b36      	ldr	r3, [pc, #216]	; (81e6c <UnityFail+0xf0>)
   81d92:	6818      	ldr	r0, [r3, #0]
   81d94:	4b36      	ldr	r3, [pc, #216]	; (81e70 <UnityFail+0xf4>)
   81d96:	4798      	blx	r3
    UnityPrintFail();
   81d98:	4b36      	ldr	r3, [pc, #216]	; (81e74 <UnityFail+0xf8>)
   81d9a:	4798      	blx	r3
    if (msg != NULL)
   81d9c:	2c00      	cmp	r4, #0
   81d9e:	d05d      	beq.n	81e5c <UnityFail+0xe0>
    {
      UNITY_OUTPUT_CHAR(':');
   81da0:	4b35      	ldr	r3, [pc, #212]	; (81e78 <UnityFail+0xfc>)
   81da2:	6818      	ldr	r0, [r3, #0]
   81da4:	6882      	ldr	r2, [r0, #8]
   81da6:	6893      	ldr	r3, [r2, #8]
   81da8:	3b01      	subs	r3, #1
   81daa:	6093      	str	r3, [r2, #8]
   81dac:	2b00      	cmp	r3, #0
   81dae:	da19      	bge.n	81de4 <UnityFail+0x68>
   81db0:	6882      	ldr	r2, [r0, #8]
   81db2:	6891      	ldr	r1, [r2, #8]
   81db4:	6993      	ldr	r3, [r2, #24]
   81db6:	4299      	cmp	r1, r3
   81db8:	db10      	blt.n	81ddc <UnityFail+0x60>
   81dba:	6813      	ldr	r3, [r2, #0]
   81dbc:	223a      	movs	r2, #58	; 0x3a
   81dbe:	701a      	strb	r2, [r3, #0]
   81dc0:	4b2d      	ldr	r3, [pc, #180]	; (81e78 <UnityFail+0xfc>)
   81dc2:	6818      	ldr	r0, [r3, #0]
   81dc4:	6882      	ldr	r2, [r0, #8]
   81dc6:	6813      	ldr	r3, [r2, #0]
   81dc8:	7819      	ldrb	r1, [r3, #0]
   81dca:	290a      	cmp	r1, #10
   81dcc:	d002      	beq.n	81dd4 <UnityFail+0x58>
   81dce:	3301      	adds	r3, #1
   81dd0:	6013      	str	r3, [r2, #0]
   81dd2:	e011      	b.n	81df8 <UnityFail+0x7c>
   81dd4:	210a      	movs	r1, #10
   81dd6:	4b29      	ldr	r3, [pc, #164]	; (81e7c <UnityFail+0x100>)
   81dd8:	4798      	blx	r3
   81dda:	e00d      	b.n	81df8 <UnityFail+0x7c>
   81ddc:	213a      	movs	r1, #58	; 0x3a
   81dde:	4b27      	ldr	r3, [pc, #156]	; (81e7c <UnityFail+0x100>)
   81de0:	4798      	blx	r3
   81de2:	e009      	b.n	81df8 <UnityFail+0x7c>
   81de4:	6883      	ldr	r3, [r0, #8]
   81de6:	681b      	ldr	r3, [r3, #0]
   81de8:	223a      	movs	r2, #58	; 0x3a
   81dea:	701a      	strb	r2, [r3, #0]
   81dec:	4b22      	ldr	r3, [pc, #136]	; (81e78 <UnityFail+0xfc>)
   81dee:	681b      	ldr	r3, [r3, #0]
   81df0:	689b      	ldr	r3, [r3, #8]
   81df2:	681a      	ldr	r2, [r3, #0]
   81df4:	3201      	adds	r2, #1
   81df6:	601a      	str	r2, [r3, #0]
      if (msg[0] != ' ')
   81df8:	7823      	ldrb	r3, [r4, #0]
   81dfa:	2b20      	cmp	r3, #32
   81dfc:	d02b      	beq.n	81e56 <UnityFail+0xda>
      {
        UNITY_OUTPUT_CHAR(' ');
   81dfe:	4b1e      	ldr	r3, [pc, #120]	; (81e78 <UnityFail+0xfc>)
   81e00:	6818      	ldr	r0, [r3, #0]
   81e02:	6882      	ldr	r2, [r0, #8]
   81e04:	6893      	ldr	r3, [r2, #8]
   81e06:	3b01      	subs	r3, #1
   81e08:	6093      	str	r3, [r2, #8]
   81e0a:	2b00      	cmp	r3, #0
   81e0c:	da19      	bge.n	81e42 <UnityFail+0xc6>
   81e0e:	6882      	ldr	r2, [r0, #8]
   81e10:	6891      	ldr	r1, [r2, #8]
   81e12:	6993      	ldr	r3, [r2, #24]
   81e14:	4299      	cmp	r1, r3
   81e16:	db10      	blt.n	81e3a <UnityFail+0xbe>
   81e18:	6813      	ldr	r3, [r2, #0]
   81e1a:	2220      	movs	r2, #32
   81e1c:	701a      	strb	r2, [r3, #0]
   81e1e:	4b16      	ldr	r3, [pc, #88]	; (81e78 <UnityFail+0xfc>)
   81e20:	6818      	ldr	r0, [r3, #0]
   81e22:	6882      	ldr	r2, [r0, #8]
   81e24:	6813      	ldr	r3, [r2, #0]
   81e26:	7819      	ldrb	r1, [r3, #0]
   81e28:	290a      	cmp	r1, #10
   81e2a:	d002      	beq.n	81e32 <UnityFail+0xb6>
   81e2c:	3301      	adds	r3, #1
   81e2e:	6013      	str	r3, [r2, #0]
   81e30:	e011      	b.n	81e56 <UnityFail+0xda>
   81e32:	210a      	movs	r1, #10
   81e34:	4b11      	ldr	r3, [pc, #68]	; (81e7c <UnityFail+0x100>)
   81e36:	4798      	blx	r3
   81e38:	e00d      	b.n	81e56 <UnityFail+0xda>
   81e3a:	2120      	movs	r1, #32
   81e3c:	4b0f      	ldr	r3, [pc, #60]	; (81e7c <UnityFail+0x100>)
   81e3e:	4798      	blx	r3
   81e40:	e009      	b.n	81e56 <UnityFail+0xda>
   81e42:	6883      	ldr	r3, [r0, #8]
   81e44:	681b      	ldr	r3, [r3, #0]
   81e46:	2220      	movs	r2, #32
   81e48:	701a      	strb	r2, [r3, #0]
   81e4a:	4b0b      	ldr	r3, [pc, #44]	; (81e78 <UnityFail+0xfc>)
   81e4c:	681b      	ldr	r3, [r3, #0]
   81e4e:	689b      	ldr	r3, [r3, #8]
   81e50:	681a      	ldr	r2, [r3, #0]
   81e52:	3201      	adds	r2, #1
   81e54:	601a      	str	r2, [r3, #0]
      }
      UnityPrint(msg);
   81e56:	4620      	mov	r0, r4
   81e58:	4b09      	ldr	r3, [pc, #36]	; (81e80 <UnityFail+0x104>)
   81e5a:	4798      	blx	r3
    }
    UNITY_FAIL_AND_BAIL;
   81e5c:	4803      	ldr	r0, [pc, #12]	; (81e6c <UnityFail+0xf0>)
   81e5e:	2101      	movs	r1, #1
   81e60:	6181      	str	r1, [r0, #24]
   81e62:	3020      	adds	r0, #32
   81e64:	4b07      	ldr	r3, [pc, #28]	; (81e84 <UnityFail+0x108>)
   81e66:	4798      	blx	r3
   81e68:	bd10      	pop	{r4, pc}
   81e6a:	bf00      	nop
   81e6c:	20070b34 	.word	0x20070b34
   81e70:	00081829 	.word	0x00081829
   81e74:	00081b65 	.word	0x00081b65
   81e78:	20070588 	.word	0x20070588
   81e7c:	00083799 	.word	0x00083799
   81e80:	000815fd 	.word	0x000815fd
   81e84:	000828e1 	.word	0x000828e1

00081e88 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81e88:	b500      	push	{lr}
   81e8a:	b083      	sub	sp, #12
   81e8c:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   81e8e:	480e      	ldr	r0, [pc, #56]	; (81ec8 <UnityDefaultTestRun+0x40>)
   81e90:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81e92:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81e94:	68c3      	ldr	r3, [r0, #12]
   81e96:	3301      	adds	r3, #1
   81e98:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81e9a:	3020      	adds	r0, #32
   81e9c:	4b0b      	ldr	r3, [pc, #44]	; (81ecc <UnityDefaultTestRun+0x44>)
   81e9e:	4798      	blx	r3
   81ea0:	b918      	cbnz	r0, 81eaa <UnityDefaultTestRun+0x22>
    {
        setUp();
   81ea2:	4b0b      	ldr	r3, [pc, #44]	; (81ed0 <UnityDefaultTestRun+0x48>)
   81ea4:	4798      	blx	r3
        Func();
   81ea6:	9b01      	ldr	r3, [sp, #4]
   81ea8:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81eaa:	480a      	ldr	r0, [pc, #40]	; (81ed4 <UnityDefaultTestRun+0x4c>)
   81eac:	4b07      	ldr	r3, [pc, #28]	; (81ecc <UnityDefaultTestRun+0x44>)
   81eae:	4798      	blx	r3
   81eb0:	b920      	cbnz	r0, 81ebc <UnityDefaultTestRun+0x34>
   81eb2:	4b05      	ldr	r3, [pc, #20]	; (81ec8 <UnityDefaultTestRun+0x40>)
   81eb4:	69db      	ldr	r3, [r3, #28]
   81eb6:	b90b      	cbnz	r3, 81ebc <UnityDefaultTestRun+0x34>
    {
        tearDown();
   81eb8:	4b07      	ldr	r3, [pc, #28]	; (81ed8 <UnityDefaultTestRun+0x50>)
   81eba:	4798      	blx	r3
    }
    UnityConcludeTest();
   81ebc:	4b07      	ldr	r3, [pc, #28]	; (81edc <UnityDefaultTestRun+0x54>)
   81ebe:	4798      	blx	r3
}
   81ec0:	b003      	add	sp, #12
   81ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   81ec6:	bf00      	nop
   81ec8:	20070b34 	.word	0x20070b34
   81ecc:	000828d5 	.word	0x000828d5
   81ed0:	00080b0d 	.word	0x00080b0d
   81ed4:	20070b54 	.word	0x20070b54
   81ed8:	00080b11 	.word	0x00080b11
   81edc:	00081b8d 	.word	0x00081b8d

00081ee0 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   81ee0:	4b05      	ldr	r3, [pc, #20]	; (81ef8 <UnityBegin+0x18>)
   81ee2:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81ee4:	2200      	movs	r2, #0
   81ee6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81ee8:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   81eea:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81eec:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   81eee:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81ef0:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81ef2:	61da      	str	r2, [r3, #28]
   81ef4:	4770      	bx	lr
   81ef6:	bf00      	nop
   81ef8:	20070b34 	.word	0x20070b34

00081efc <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81efc:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   81efe:	4b66      	ldr	r3, [pc, #408]	; (82098 <UnityEnd+0x19c>)
   81f00:	6818      	ldr	r0, [r3, #0]
   81f02:	6882      	ldr	r2, [r0, #8]
   81f04:	6893      	ldr	r3, [r2, #8]
   81f06:	3b01      	subs	r3, #1
   81f08:	6093      	str	r3, [r2, #8]
   81f0a:	2b00      	cmp	r3, #0
   81f0c:	da19      	bge.n	81f42 <UnityEnd+0x46>
   81f0e:	6882      	ldr	r2, [r0, #8]
   81f10:	6891      	ldr	r1, [r2, #8]
   81f12:	6993      	ldr	r3, [r2, #24]
   81f14:	4299      	cmp	r1, r3
   81f16:	db10      	blt.n	81f3a <UnityEnd+0x3e>
   81f18:	6813      	ldr	r3, [r2, #0]
   81f1a:	220a      	movs	r2, #10
   81f1c:	701a      	strb	r2, [r3, #0]
   81f1e:	4b5e      	ldr	r3, [pc, #376]	; (82098 <UnityEnd+0x19c>)
   81f20:	6818      	ldr	r0, [r3, #0]
   81f22:	6882      	ldr	r2, [r0, #8]
   81f24:	6813      	ldr	r3, [r2, #0]
   81f26:	7819      	ldrb	r1, [r3, #0]
   81f28:	290a      	cmp	r1, #10
   81f2a:	d002      	beq.n	81f32 <UnityEnd+0x36>
   81f2c:	3301      	adds	r3, #1
   81f2e:	6013      	str	r3, [r2, #0]
   81f30:	e011      	b.n	81f56 <UnityEnd+0x5a>
   81f32:	210a      	movs	r1, #10
   81f34:	4b59      	ldr	r3, [pc, #356]	; (8209c <UnityEnd+0x1a0>)
   81f36:	4798      	blx	r3
   81f38:	e00d      	b.n	81f56 <UnityEnd+0x5a>
   81f3a:	210a      	movs	r1, #10
   81f3c:	4b57      	ldr	r3, [pc, #348]	; (8209c <UnityEnd+0x1a0>)
   81f3e:	4798      	blx	r3
   81f40:	e009      	b.n	81f56 <UnityEnd+0x5a>
   81f42:	6883      	ldr	r3, [r0, #8]
   81f44:	681b      	ldr	r3, [r3, #0]
   81f46:	220a      	movs	r2, #10
   81f48:	701a      	strb	r2, [r3, #0]
   81f4a:	4b53      	ldr	r3, [pc, #332]	; (82098 <UnityEnd+0x19c>)
   81f4c:	681b      	ldr	r3, [r3, #0]
   81f4e:	689b      	ldr	r3, [r3, #8]
   81f50:	681a      	ldr	r2, [r3, #0]
   81f52:	3201      	adds	r2, #1
   81f54:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81f56:	4852      	ldr	r0, [pc, #328]	; (820a0 <UnityEnd+0x1a4>)
   81f58:	4b52      	ldr	r3, [pc, #328]	; (820a4 <UnityEnd+0x1a8>)
   81f5a:	4798      	blx	r3
    UNITY_PRINT_EOL;
   81f5c:	4b4e      	ldr	r3, [pc, #312]	; (82098 <UnityEnd+0x19c>)
   81f5e:	6818      	ldr	r0, [r3, #0]
   81f60:	6882      	ldr	r2, [r0, #8]
   81f62:	6893      	ldr	r3, [r2, #8]
   81f64:	3b01      	subs	r3, #1
   81f66:	6093      	str	r3, [r2, #8]
   81f68:	2b00      	cmp	r3, #0
   81f6a:	da19      	bge.n	81fa0 <UnityEnd+0xa4>
   81f6c:	6882      	ldr	r2, [r0, #8]
   81f6e:	6891      	ldr	r1, [r2, #8]
   81f70:	6993      	ldr	r3, [r2, #24]
   81f72:	4299      	cmp	r1, r3
   81f74:	db10      	blt.n	81f98 <UnityEnd+0x9c>
   81f76:	6813      	ldr	r3, [r2, #0]
   81f78:	220a      	movs	r2, #10
   81f7a:	701a      	strb	r2, [r3, #0]
   81f7c:	4b46      	ldr	r3, [pc, #280]	; (82098 <UnityEnd+0x19c>)
   81f7e:	6818      	ldr	r0, [r3, #0]
   81f80:	6882      	ldr	r2, [r0, #8]
   81f82:	6813      	ldr	r3, [r2, #0]
   81f84:	7819      	ldrb	r1, [r3, #0]
   81f86:	290a      	cmp	r1, #10
   81f88:	d002      	beq.n	81f90 <UnityEnd+0x94>
   81f8a:	3301      	adds	r3, #1
   81f8c:	6013      	str	r3, [r2, #0]
   81f8e:	e011      	b.n	81fb4 <UnityEnd+0xb8>
   81f90:	210a      	movs	r1, #10
   81f92:	4b42      	ldr	r3, [pc, #264]	; (8209c <UnityEnd+0x1a0>)
   81f94:	4798      	blx	r3
   81f96:	e00d      	b.n	81fb4 <UnityEnd+0xb8>
   81f98:	210a      	movs	r1, #10
   81f9a:	4b40      	ldr	r3, [pc, #256]	; (8209c <UnityEnd+0x1a0>)
   81f9c:	4798      	blx	r3
   81f9e:	e009      	b.n	81fb4 <UnityEnd+0xb8>
   81fa0:	6883      	ldr	r3, [r0, #8]
   81fa2:	681b      	ldr	r3, [r3, #0]
   81fa4:	220a      	movs	r2, #10
   81fa6:	701a      	strb	r2, [r3, #0]
   81fa8:	4b3b      	ldr	r3, [pc, #236]	; (82098 <UnityEnd+0x19c>)
   81faa:	681b      	ldr	r3, [r3, #0]
   81fac:	689b      	ldr	r3, [r3, #8]
   81fae:	681a      	ldr	r2, [r3, #0]
   81fb0:	3201      	adds	r2, #1
   81fb2:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81fb4:	4e3c      	ldr	r6, [pc, #240]	; (820a8 <UnityEnd+0x1ac>)
   81fb6:	68f0      	ldr	r0, [r6, #12]
   81fb8:	4d3c      	ldr	r5, [pc, #240]	; (820ac <UnityEnd+0x1b0>)
   81fba:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81fbc:	483c      	ldr	r0, [pc, #240]	; (820b0 <UnityEnd+0x1b4>)
   81fbe:	4c39      	ldr	r4, [pc, #228]	; (820a4 <UnityEnd+0x1a8>)
   81fc0:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81fc2:	6930      	ldr	r0, [r6, #16]
   81fc4:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81fc6:	483b      	ldr	r0, [pc, #236]	; (820b4 <UnityEnd+0x1b8>)
   81fc8:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81fca:	6970      	ldr	r0, [r6, #20]
   81fcc:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81fce:	483a      	ldr	r0, [pc, #232]	; (820b8 <UnityEnd+0x1bc>)
   81fd0:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81fd2:	4b31      	ldr	r3, [pc, #196]	; (82098 <UnityEnd+0x19c>)
   81fd4:	6818      	ldr	r0, [r3, #0]
   81fd6:	6882      	ldr	r2, [r0, #8]
   81fd8:	6893      	ldr	r3, [r2, #8]
   81fda:	3b01      	subs	r3, #1
   81fdc:	6093      	str	r3, [r2, #8]
   81fde:	2b00      	cmp	r3, #0
   81fe0:	da19      	bge.n	82016 <UnityEnd+0x11a>
   81fe2:	6882      	ldr	r2, [r0, #8]
   81fe4:	6891      	ldr	r1, [r2, #8]
   81fe6:	6993      	ldr	r3, [r2, #24]
   81fe8:	4299      	cmp	r1, r3
   81fea:	db10      	blt.n	8200e <UnityEnd+0x112>
   81fec:	6813      	ldr	r3, [r2, #0]
   81fee:	220a      	movs	r2, #10
   81ff0:	701a      	strb	r2, [r3, #0]
   81ff2:	4b29      	ldr	r3, [pc, #164]	; (82098 <UnityEnd+0x19c>)
   81ff4:	6818      	ldr	r0, [r3, #0]
   81ff6:	6882      	ldr	r2, [r0, #8]
   81ff8:	6813      	ldr	r3, [r2, #0]
   81ffa:	7819      	ldrb	r1, [r3, #0]
   81ffc:	290a      	cmp	r1, #10
   81ffe:	d002      	beq.n	82006 <UnityEnd+0x10a>
   82000:	3301      	adds	r3, #1
   82002:	6013      	str	r3, [r2, #0]
   82004:	e011      	b.n	8202a <UnityEnd+0x12e>
   82006:	210a      	movs	r1, #10
   82008:	4b24      	ldr	r3, [pc, #144]	; (8209c <UnityEnd+0x1a0>)
   8200a:	4798      	blx	r3
   8200c:	e00d      	b.n	8202a <UnityEnd+0x12e>
   8200e:	210a      	movs	r1, #10
   82010:	4b22      	ldr	r3, [pc, #136]	; (8209c <UnityEnd+0x1a0>)
   82012:	4798      	blx	r3
   82014:	e009      	b.n	8202a <UnityEnd+0x12e>
   82016:	6883      	ldr	r3, [r0, #8]
   82018:	681b      	ldr	r3, [r3, #0]
   8201a:	220a      	movs	r2, #10
   8201c:	701a      	strb	r2, [r3, #0]
   8201e:	4b1e      	ldr	r3, [pc, #120]	; (82098 <UnityEnd+0x19c>)
   82020:	681b      	ldr	r3, [r3, #0]
   82022:	689b      	ldr	r3, [r3, #8]
   82024:	681a      	ldr	r2, [r3, #0]
   82026:	3201      	adds	r2, #1
   82028:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   8202a:	4b1f      	ldr	r3, [pc, #124]	; (820a8 <UnityEnd+0x1ac>)
   8202c:	691b      	ldr	r3, [r3, #16]
   8202e:	b913      	cbnz	r3, 82036 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   82030:	4b22      	ldr	r3, [pc, #136]	; (820bc <UnityEnd+0x1c0>)
   82032:	4798      	blx	r3
   82034:	e001      	b.n	8203a <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   82036:	4b22      	ldr	r3, [pc, #136]	; (820c0 <UnityEnd+0x1c4>)
   82038:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   8203a:	4b17      	ldr	r3, [pc, #92]	; (82098 <UnityEnd+0x19c>)
   8203c:	6818      	ldr	r0, [r3, #0]
   8203e:	6882      	ldr	r2, [r0, #8]
   82040:	6893      	ldr	r3, [r2, #8]
   82042:	3b01      	subs	r3, #1
   82044:	6093      	str	r3, [r2, #8]
   82046:	2b00      	cmp	r3, #0
   82048:	da19      	bge.n	8207e <UnityEnd+0x182>
   8204a:	6882      	ldr	r2, [r0, #8]
   8204c:	6891      	ldr	r1, [r2, #8]
   8204e:	6993      	ldr	r3, [r2, #24]
   82050:	4299      	cmp	r1, r3
   82052:	db10      	blt.n	82076 <UnityEnd+0x17a>
   82054:	6813      	ldr	r3, [r2, #0]
   82056:	220a      	movs	r2, #10
   82058:	701a      	strb	r2, [r3, #0]
   8205a:	4b0f      	ldr	r3, [pc, #60]	; (82098 <UnityEnd+0x19c>)
   8205c:	6818      	ldr	r0, [r3, #0]
   8205e:	6882      	ldr	r2, [r0, #8]
   82060:	6813      	ldr	r3, [r2, #0]
   82062:	7819      	ldrb	r1, [r3, #0]
   82064:	290a      	cmp	r1, #10
   82066:	d002      	beq.n	8206e <UnityEnd+0x172>
   82068:	3301      	adds	r3, #1
   8206a:	6013      	str	r3, [r2, #0]
   8206c:	e011      	b.n	82092 <UnityEnd+0x196>
   8206e:	210a      	movs	r1, #10
   82070:	4b0a      	ldr	r3, [pc, #40]	; (8209c <UnityEnd+0x1a0>)
   82072:	4798      	blx	r3
   82074:	e00d      	b.n	82092 <UnityEnd+0x196>
   82076:	210a      	movs	r1, #10
   82078:	4b08      	ldr	r3, [pc, #32]	; (8209c <UnityEnd+0x1a0>)
   8207a:	4798      	blx	r3
   8207c:	e009      	b.n	82092 <UnityEnd+0x196>
   8207e:	6883      	ldr	r3, [r0, #8]
   82080:	681b      	ldr	r3, [r3, #0]
   82082:	220a      	movs	r2, #10
   82084:	701a      	strb	r2, [r3, #0]
   82086:	4b04      	ldr	r3, [pc, #16]	; (82098 <UnityEnd+0x19c>)
   82088:	681b      	ldr	r3, [r3, #0]
   8208a:	689b      	ldr	r3, [r3, #8]
   8208c:	681a      	ldr	r2, [r3, #0]
   8208e:	3201      	adds	r2, #1
   82090:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   82092:	4b05      	ldr	r3, [pc, #20]	; (820a8 <UnityEnd+0x1ac>)
   82094:	6918      	ldr	r0, [r3, #16]
   82096:	bd70      	pop	{r4, r5, r6, pc}
   82098:	20070588 	.word	0x20070588
   8209c:	00083799 	.word	0x00083799
   820a0:	00085a84 	.word	0x00085a84
   820a4:	000815fd 	.word	0x000815fd
   820a8:	20070b34 	.word	0x20070b34
   820ac:	0008120d 	.word	0x0008120d
   820b0:	00085ab4 	.word	0x00085ab4
   820b4:	00085a9c 	.word	0x00085a9c
   820b8:	00085aa8 	.word	0x00085aa8
   820bc:	00081b79 	.word	0x00081b79
   820c0:	00081b65 	.word	0x00081b65

000820c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   820c4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   820c6:	480e      	ldr	r0, [pc, #56]	; (82100 <sysclk_init+0x3c>)
   820c8:	4b0e      	ldr	r3, [pc, #56]	; (82104 <sysclk_init+0x40>)
   820ca:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   820cc:	2000      	movs	r0, #0
   820ce:	213e      	movs	r1, #62	; 0x3e
   820d0:	4b0d      	ldr	r3, [pc, #52]	; (82108 <sysclk_init+0x44>)
   820d2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   820d4:	4c0d      	ldr	r4, [pc, #52]	; (8210c <sysclk_init+0x48>)
   820d6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   820d8:	2800      	cmp	r0, #0
   820da:	d0fc      	beq.n	820d6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   820dc:	4b0c      	ldr	r3, [pc, #48]	; (82110 <sysclk_init+0x4c>)
   820de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   820e0:	4a0c      	ldr	r2, [pc, #48]	; (82114 <sysclk_init+0x50>)
   820e2:	4b0d      	ldr	r3, [pc, #52]	; (82118 <sysclk_init+0x54>)
   820e4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   820e6:	4c0d      	ldr	r4, [pc, #52]	; (8211c <sysclk_init+0x58>)
   820e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   820ea:	2800      	cmp	r0, #0
   820ec:	d0fc      	beq.n	820e8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   820ee:	2010      	movs	r0, #16
   820f0:	4b0b      	ldr	r3, [pc, #44]	; (82120 <sysclk_init+0x5c>)
   820f2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   820f4:	4b0b      	ldr	r3, [pc, #44]	; (82124 <sysclk_init+0x60>)
   820f6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   820f8:	4801      	ldr	r0, [pc, #4]	; (82100 <sysclk_init+0x3c>)
   820fa:	4b02      	ldr	r3, [pc, #8]	; (82104 <sysclk_init+0x40>)
   820fc:	4798      	blx	r3
   820fe:	bd10      	pop	{r4, pc}
   82100:	0501bd00 	.word	0x0501bd00
   82104:	200700a5 	.word	0x200700a5
   82108:	000824bd 	.word	0x000824bd
   8210c:	00082511 	.word	0x00082511
   82110:	00082521 	.word	0x00082521
   82114:	200d3f01 	.word	0x200d3f01
   82118:	400e0600 	.word	0x400e0600
   8211c:	00082531 	.word	0x00082531
   82120:	00082459 	.word	0x00082459
   82124:	0008264d 	.word	0x0008264d

00082128 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82128:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8212a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8212e:	4b12      	ldr	r3, [pc, #72]	; (82178 <board_init+0x50>)
   82130:	605a      	str	r2, [r3, #4]
   82132:	200b      	movs	r0, #11
   82134:	4c11      	ldr	r4, [pc, #68]	; (8217c <board_init+0x54>)
   82136:	47a0      	blx	r4
   82138:	200c      	movs	r0, #12
   8213a:	47a0      	blx	r4
   8213c:	200d      	movs	r0, #13
   8213e:	47a0      	blx	r4
   82140:	200e      	movs	r0, #14
   82142:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82144:	203b      	movs	r0, #59	; 0x3b
   82146:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8214a:	4c0d      	ldr	r4, [pc, #52]	; (82180 <board_init+0x58>)
   8214c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8214e:	2055      	movs	r0, #85	; 0x55
   82150:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82154:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82156:	2056      	movs	r0, #86	; 0x56
   82158:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8215c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8215e:	2068      	movs	r0, #104	; 0x68
   82160:	4908      	ldr	r1, [pc, #32]	; (82184 <board_init+0x5c>)
   82162:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82164:	205c      	movs	r0, #92	; 0x5c
   82166:	4908      	ldr	r1, [pc, #32]	; (82188 <board_init+0x60>)
   82168:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8216a:	4808      	ldr	r0, [pc, #32]	; (8218c <board_init+0x64>)
   8216c:	f44f 7140 	mov.w	r1, #768	; 0x300
   82170:	4a07      	ldr	r2, [pc, #28]	; (82190 <board_init+0x68>)
   82172:	4b08      	ldr	r3, [pc, #32]	; (82194 <board_init+0x6c>)
   82174:	4798      	blx	r3
   82176:	bd10      	pop	{r4, pc}
   82178:	400e1a50 	.word	0x400e1a50
   8217c:	00082541 	.word	0x00082541
   82180:	0008223d 	.word	0x0008223d
   82184:	28000079 	.word	0x28000079
   82188:	28000001 	.word	0x28000001
   8218c:	400e0e00 	.word	0x400e0e00
   82190:	08000001 	.word	0x08000001
   82194:	00082311 	.word	0x00082311

00082198 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82198:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8219a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8219e:	d016      	beq.n	821ce <pio_set_peripheral+0x36>
   821a0:	d804      	bhi.n	821ac <pio_set_peripheral+0x14>
   821a2:	b1c1      	cbz	r1, 821d6 <pio_set_peripheral+0x3e>
   821a4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   821a8:	d00a      	beq.n	821c0 <pio_set_peripheral+0x28>
   821aa:	e013      	b.n	821d4 <pio_set_peripheral+0x3c>
   821ac:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   821b0:	d011      	beq.n	821d6 <pio_set_peripheral+0x3e>
   821b2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   821b6:	d00e      	beq.n	821d6 <pio_set_peripheral+0x3e>
   821b8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   821bc:	d10a      	bne.n	821d4 <pio_set_peripheral+0x3c>
   821be:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   821c0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   821c2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   821c4:	400b      	ands	r3, r1
   821c6:	ea23 0302 	bic.w	r3, r3, r2
   821ca:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   821cc:	e002      	b.n	821d4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   821ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   821d0:	4313      	orrs	r3, r2
   821d2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   821d4:	6042      	str	r2, [r0, #4]
   821d6:	4770      	bx	lr

000821d8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   821d8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821da:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   821de:	bf14      	ite	ne
   821e0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821e2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   821e4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   821e8:	bf14      	ite	ne
   821ea:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   821ec:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   821ee:	f012 0f02 	tst.w	r2, #2
   821f2:	d002      	beq.n	821fa <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   821f4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   821f8:	e004      	b.n	82204 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   821fa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   821fe:	bf18      	it	ne
   82200:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82204:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82206:	6001      	str	r1, [r0, #0]
   82208:	4770      	bx	lr
   8220a:	bf00      	nop

0008220c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8220c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8220e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82210:	9c01      	ldr	r4, [sp, #4]
   82212:	b10c      	cbz	r4, 82218 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82214:	6641      	str	r1, [r0, #100]	; 0x64
   82216:	e000      	b.n	8221a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82218:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8221a:	b10b      	cbz	r3, 82220 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8221c:	6501      	str	r1, [r0, #80]	; 0x50
   8221e:	e000      	b.n	82222 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82220:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82222:	b10a      	cbz	r2, 82228 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82224:	6301      	str	r1, [r0, #48]	; 0x30
   82226:	e000      	b.n	8222a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82228:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8222a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8222c:	6001      	str	r1, [r0, #0]
}
   8222e:	f85d 4b04 	ldr.w	r4, [sp], #4
   82232:	4770      	bx	lr

00082234 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82234:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82236:	4770      	bx	lr

00082238 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82238:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8223a:	4770      	bx	lr

0008223c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8223c:	b570      	push	{r4, r5, r6, lr}
   8223e:	b082      	sub	sp, #8
   82240:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82242:	0944      	lsrs	r4, r0, #5
   82244:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82248:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8224c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8224e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82252:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82256:	d030      	beq.n	822ba <pio_configure_pin+0x7e>
   82258:	d806      	bhi.n	82268 <pio_configure_pin+0x2c>
   8225a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8225e:	d00a      	beq.n	82276 <pio_configure_pin+0x3a>
   82260:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82264:	d018      	beq.n	82298 <pio_configure_pin+0x5c>
   82266:	e049      	b.n	822fc <pio_configure_pin+0xc0>
   82268:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8226c:	d030      	beq.n	822d0 <pio_configure_pin+0x94>
   8226e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82272:	d02d      	beq.n	822d0 <pio_configure_pin+0x94>
   82274:	e042      	b.n	822fc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82276:	f000 001f 	and.w	r0, r0, #31
   8227a:	2401      	movs	r4, #1
   8227c:	4084      	lsls	r4, r0
   8227e:	4630      	mov	r0, r6
   82280:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82284:	4622      	mov	r2, r4
   82286:	4b1f      	ldr	r3, [pc, #124]	; (82304 <pio_configure_pin+0xc8>)
   82288:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8228a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8228e:	bf14      	ite	ne
   82290:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82292:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82294:	2001      	movs	r0, #1
   82296:	e032      	b.n	822fe <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82298:	f000 001f 	and.w	r0, r0, #31
   8229c:	2401      	movs	r4, #1
   8229e:	4084      	lsls	r4, r0
   822a0:	4630      	mov	r0, r6
   822a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   822a6:	4622      	mov	r2, r4
   822a8:	4b16      	ldr	r3, [pc, #88]	; (82304 <pio_configure_pin+0xc8>)
   822aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   822ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822b0:	bf14      	ite	ne
   822b2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   822b4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   822b6:	2001      	movs	r0, #1
   822b8:	e021      	b.n	822fe <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   822ba:	f000 011f 	and.w	r1, r0, #31
   822be:	2401      	movs	r4, #1
   822c0:	4630      	mov	r0, r6
   822c2:	fa04 f101 	lsl.w	r1, r4, r1
   822c6:	462a      	mov	r2, r5
   822c8:	4b0f      	ldr	r3, [pc, #60]	; (82308 <pio_configure_pin+0xcc>)
   822ca:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   822cc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   822ce:	e016      	b.n	822fe <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822d0:	f000 011f 	and.w	r1, r0, #31
   822d4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   822d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822da:	ea05 0304 	and.w	r3, r5, r4
   822de:	9300      	str	r3, [sp, #0]
   822e0:	4630      	mov	r0, r6
   822e2:	fa04 f101 	lsl.w	r1, r4, r1
   822e6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   822ea:	bf14      	ite	ne
   822ec:	2200      	movne	r2, #0
   822ee:	2201      	moveq	r2, #1
   822f0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   822f4:	4d05      	ldr	r5, [pc, #20]	; (8230c <pio_configure_pin+0xd0>)
   822f6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   822f8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   822fa:	e000      	b.n	822fe <pio_configure_pin+0xc2>

	default:
		return 0;
   822fc:	2000      	movs	r0, #0
	}

	return 1;
}
   822fe:	b002      	add	sp, #8
   82300:	bd70      	pop	{r4, r5, r6, pc}
   82302:	bf00      	nop
   82304:	00082199 	.word	0x00082199
   82308:	000821d9 	.word	0x000821d9
   8230c:	0008220d 	.word	0x0008220d

00082310 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82310:	b5f0      	push	{r4, r5, r6, r7, lr}
   82312:	b083      	sub	sp, #12
   82314:	4607      	mov	r7, r0
   82316:	460e      	mov	r6, r1
   82318:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8231a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8231e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82322:	d026      	beq.n	82372 <pio_configure_pin_group+0x62>
   82324:	d806      	bhi.n	82334 <pio_configure_pin_group+0x24>
   82326:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8232a:	d00a      	beq.n	82342 <pio_configure_pin_group+0x32>
   8232c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82330:	d013      	beq.n	8235a <pio_configure_pin_group+0x4a>
   82332:	e034      	b.n	8239e <pio_configure_pin_group+0x8e>
   82334:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82338:	d01f      	beq.n	8237a <pio_configure_pin_group+0x6a>
   8233a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8233e:	d01c      	beq.n	8237a <pio_configure_pin_group+0x6a>
   82340:	e02d      	b.n	8239e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82342:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82346:	4632      	mov	r2, r6
   82348:	4b16      	ldr	r3, [pc, #88]	; (823a4 <pio_configure_pin_group+0x94>)
   8234a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8234c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82350:	bf14      	ite	ne
   82352:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82354:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82356:	2001      	movs	r0, #1
   82358:	e022      	b.n	823a0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8235a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8235e:	4632      	mov	r2, r6
   82360:	4b10      	ldr	r3, [pc, #64]	; (823a4 <pio_configure_pin_group+0x94>)
   82362:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82364:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82368:	bf14      	ite	ne
   8236a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8236c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8236e:	2001      	movs	r0, #1
   82370:	e016      	b.n	823a0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82372:	4b0d      	ldr	r3, [pc, #52]	; (823a8 <pio_configure_pin_group+0x98>)
   82374:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82376:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82378:	e012      	b.n	823a0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8237a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8237e:	f005 0301 	and.w	r3, r5, #1
   82382:	9300      	str	r3, [sp, #0]
   82384:	4638      	mov	r0, r7
   82386:	4631      	mov	r1, r6
   82388:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8238c:	bf14      	ite	ne
   8238e:	2200      	movne	r2, #0
   82390:	2201      	moveq	r2, #1
   82392:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82396:	4c05      	ldr	r4, [pc, #20]	; (823ac <pio_configure_pin_group+0x9c>)
   82398:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8239a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8239c:	e000      	b.n	823a0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8239e:	2000      	movs	r0, #0
	}

	return 1;
}
   823a0:	b003      	add	sp, #12
   823a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   823a4:	00082199 	.word	0x00082199
   823a8:	000821d9 	.word	0x000821d9
   823ac:	0008220d 	.word	0x0008220d

000823b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   823b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823b4:	4604      	mov	r4, r0
   823b6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   823b8:	4b10      	ldr	r3, [pc, #64]	; (823fc <pio_handler_process+0x4c>)
   823ba:	4798      	blx	r3
   823bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   823be:	4620      	mov	r0, r4
   823c0:	4b0f      	ldr	r3, [pc, #60]	; (82400 <pio_handler_process+0x50>)
   823c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   823c4:	4005      	ands	r5, r0
   823c6:	d017      	beq.n	823f8 <pio_handler_process+0x48>
   823c8:	4f0e      	ldr	r7, [pc, #56]	; (82404 <pio_handler_process+0x54>)
   823ca:	f107 040c 	add.w	r4, r7, #12
   823ce:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   823d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   823d4:	42b3      	cmp	r3, r6
   823d6:	d10a      	bne.n	823ee <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   823d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   823dc:	4229      	tst	r1, r5
   823de:	d006      	beq.n	823ee <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   823e0:	6823      	ldr	r3, [r4, #0]
   823e2:	4630      	mov	r0, r6
   823e4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   823e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   823ea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   823ee:	42bc      	cmp	r4, r7
   823f0:	d002      	beq.n	823f8 <pio_handler_process+0x48>
   823f2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   823f4:	2d00      	cmp	r5, #0
   823f6:	d1eb      	bne.n	823d0 <pio_handler_process+0x20>
   823f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823fc:	00082235 	.word	0x00082235
   82400:	00082239 	.word	0x00082239
   82404:	20070a80 	.word	0x20070a80

00082408 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82408:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8240a:	4802      	ldr	r0, [pc, #8]	; (82414 <PIOA_Handler+0xc>)
   8240c:	210b      	movs	r1, #11
   8240e:	4b02      	ldr	r3, [pc, #8]	; (82418 <PIOA_Handler+0x10>)
   82410:	4798      	blx	r3
   82412:	bd08      	pop	{r3, pc}
   82414:	400e0e00 	.word	0x400e0e00
   82418:	000823b1 	.word	0x000823b1

0008241c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8241c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8241e:	4802      	ldr	r0, [pc, #8]	; (82428 <PIOB_Handler+0xc>)
   82420:	210c      	movs	r1, #12
   82422:	4b02      	ldr	r3, [pc, #8]	; (8242c <PIOB_Handler+0x10>)
   82424:	4798      	blx	r3
   82426:	bd08      	pop	{r3, pc}
   82428:	400e1000 	.word	0x400e1000
   8242c:	000823b1 	.word	0x000823b1

00082430 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82430:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82432:	4802      	ldr	r0, [pc, #8]	; (8243c <PIOC_Handler+0xc>)
   82434:	210d      	movs	r1, #13
   82436:	4b02      	ldr	r3, [pc, #8]	; (82440 <PIOC_Handler+0x10>)
   82438:	4798      	blx	r3
   8243a:	bd08      	pop	{r3, pc}
   8243c:	400e1200 	.word	0x400e1200
   82440:	000823b1 	.word	0x000823b1

00082444 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82444:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82446:	4802      	ldr	r0, [pc, #8]	; (82450 <PIOD_Handler+0xc>)
   82448:	210e      	movs	r1, #14
   8244a:	4b02      	ldr	r3, [pc, #8]	; (82454 <PIOD_Handler+0x10>)
   8244c:	4798      	blx	r3
   8244e:	bd08      	pop	{r3, pc}
   82450:	400e1400 	.word	0x400e1400
   82454:	000823b1 	.word	0x000823b1

00082458 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82458:	4b17      	ldr	r3, [pc, #92]	; (824b8 <pmc_switch_mck_to_pllack+0x60>)
   8245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8245c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82460:	4310      	orrs	r0, r2
   82462:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82466:	f013 0f08 	tst.w	r3, #8
   8246a:	d109      	bne.n	82480 <pmc_switch_mck_to_pllack+0x28>
   8246c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82470:	4911      	ldr	r1, [pc, #68]	; (824b8 <pmc_switch_mck_to_pllack+0x60>)
   82472:	e001      	b.n	82478 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82474:	3b01      	subs	r3, #1
   82476:	d019      	beq.n	824ac <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82478:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8247a:	f012 0f08 	tst.w	r2, #8
   8247e:	d0f9      	beq.n	82474 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82480:	4b0d      	ldr	r3, [pc, #52]	; (824b8 <pmc_switch_mck_to_pllack+0x60>)
   82482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82484:	f022 0203 	bic.w	r2, r2, #3
   82488:	f042 0202 	orr.w	r2, r2, #2
   8248c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8248e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82490:	f010 0008 	ands.w	r0, r0, #8
   82494:	d10c      	bne.n	824b0 <pmc_switch_mck_to_pllack+0x58>
   82496:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8249a:	4907      	ldr	r1, [pc, #28]	; (824b8 <pmc_switch_mck_to_pllack+0x60>)
   8249c:	e001      	b.n	824a2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8249e:	3b01      	subs	r3, #1
   824a0:	d008      	beq.n	824b4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   824a4:	f012 0f08 	tst.w	r2, #8
   824a8:	d0f9      	beq.n	8249e <pmc_switch_mck_to_pllack+0x46>
   824aa:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   824ac:	2001      	movs	r0, #1
   824ae:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   824b0:	2000      	movs	r0, #0
   824b2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   824b4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   824b6:	4770      	bx	lr
   824b8:	400e0600 	.word	0x400e0600

000824bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   824bc:	b138      	cbz	r0, 824ce <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824be:	4911      	ldr	r1, [pc, #68]	; (82504 <pmc_switch_mainck_to_xtal+0x48>)
   824c0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   824c2:	4a11      	ldr	r2, [pc, #68]	; (82508 <pmc_switch_mainck_to_xtal+0x4c>)
   824c4:	401a      	ands	r2, r3
   824c6:	4b11      	ldr	r3, [pc, #68]	; (8250c <pmc_switch_mainck_to_xtal+0x50>)
   824c8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824ca:	620b      	str	r3, [r1, #32]
   824cc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824ce:	4a0d      	ldr	r2, [pc, #52]	; (82504 <pmc_switch_mainck_to_xtal+0x48>)
   824d0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824d6:	f023 0303 	bic.w	r3, r3, #3
   824da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824de:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   824e2:	0209      	lsls	r1, r1, #8
   824e4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824e6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824e8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   824ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   824ec:	f013 0f01 	tst.w	r3, #1
   824f0:	d0fb      	beq.n	824ea <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   824f2:	4a04      	ldr	r2, [pc, #16]	; (82504 <pmc_switch_mainck_to_xtal+0x48>)
   824f4:	6a13      	ldr	r3, [r2, #32]
   824f6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   824fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   824fe:	6213      	str	r3, [r2, #32]
   82500:	4770      	bx	lr
   82502:	bf00      	nop
   82504:	400e0600 	.word	0x400e0600
   82508:	fec8fffc 	.word	0xfec8fffc
   8250c:	01370002 	.word	0x01370002

00082510 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82510:	4b02      	ldr	r3, [pc, #8]	; (8251c <pmc_osc_is_ready_mainck+0xc>)
   82512:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82514:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82518:	4770      	bx	lr
   8251a:	bf00      	nop
   8251c:	400e0600 	.word	0x400e0600

00082520 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82520:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82524:	4b01      	ldr	r3, [pc, #4]	; (8252c <pmc_disable_pllack+0xc>)
   82526:	629a      	str	r2, [r3, #40]	; 0x28
   82528:	4770      	bx	lr
   8252a:	bf00      	nop
   8252c:	400e0600 	.word	0x400e0600

00082530 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82530:	4b02      	ldr	r3, [pc, #8]	; (8253c <pmc_is_locked_pllack+0xc>)
   82532:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82534:	f000 0002 	and.w	r0, r0, #2
   82538:	4770      	bx	lr
   8253a:	bf00      	nop
   8253c:	400e0600 	.word	0x400e0600

00082540 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82540:	282c      	cmp	r0, #44	; 0x2c
   82542:	d820      	bhi.n	82586 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82544:	281f      	cmp	r0, #31
   82546:	d80d      	bhi.n	82564 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82548:	4b12      	ldr	r3, [pc, #72]	; (82594 <pmc_enable_periph_clk+0x54>)
   8254a:	699a      	ldr	r2, [r3, #24]
   8254c:	2301      	movs	r3, #1
   8254e:	4083      	lsls	r3, r0
   82550:	401a      	ands	r2, r3
   82552:	4293      	cmp	r3, r2
   82554:	d019      	beq.n	8258a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82556:	2301      	movs	r3, #1
   82558:	fa03 f000 	lsl.w	r0, r3, r0
   8255c:	4b0d      	ldr	r3, [pc, #52]	; (82594 <pmc_enable_periph_clk+0x54>)
   8255e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82560:	2000      	movs	r0, #0
   82562:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82564:	4b0b      	ldr	r3, [pc, #44]	; (82594 <pmc_enable_periph_clk+0x54>)
   82566:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8256a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8256c:	2301      	movs	r3, #1
   8256e:	4083      	lsls	r3, r0
   82570:	401a      	ands	r2, r3
   82572:	4293      	cmp	r3, r2
   82574:	d00b      	beq.n	8258e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82576:	2301      	movs	r3, #1
   82578:	fa03 f000 	lsl.w	r0, r3, r0
   8257c:	4b05      	ldr	r3, [pc, #20]	; (82594 <pmc_enable_periph_clk+0x54>)
   8257e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82582:	2000      	movs	r0, #0
   82584:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82586:	2001      	movs	r0, #1
   82588:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8258a:	2000      	movs	r0, #0
   8258c:	4770      	bx	lr
   8258e:	2000      	movs	r0, #0
}
   82590:	4770      	bx	lr
   82592:	bf00      	nop
   82594:	400e0600 	.word	0x400e0600

00082598 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82598:	e7fe      	b.n	82598 <Dummy_Handler>
   8259a:	bf00      	nop

0008259c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8259c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8259e:	4b1e      	ldr	r3, [pc, #120]	; (82618 <Reset_Handler+0x7c>)
   825a0:	4a1e      	ldr	r2, [pc, #120]	; (8261c <Reset_Handler+0x80>)
   825a2:	429a      	cmp	r2, r3
   825a4:	d003      	beq.n	825ae <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   825a6:	4b1e      	ldr	r3, [pc, #120]	; (82620 <Reset_Handler+0x84>)
   825a8:	4a1b      	ldr	r2, [pc, #108]	; (82618 <Reset_Handler+0x7c>)
   825aa:	429a      	cmp	r2, r3
   825ac:	d304      	bcc.n	825b8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   825ae:	4b1d      	ldr	r3, [pc, #116]	; (82624 <Reset_Handler+0x88>)
   825b0:	4a1d      	ldr	r2, [pc, #116]	; (82628 <Reset_Handler+0x8c>)
   825b2:	429a      	cmp	r2, r3
   825b4:	d30f      	bcc.n	825d6 <Reset_Handler+0x3a>
   825b6:	e01a      	b.n	825ee <Reset_Handler+0x52>
   825b8:	4b1c      	ldr	r3, [pc, #112]	; (8262c <Reset_Handler+0x90>)
   825ba:	4c1d      	ldr	r4, [pc, #116]	; (82630 <Reset_Handler+0x94>)
   825bc:	1ae4      	subs	r4, r4, r3
   825be:	f024 0403 	bic.w	r4, r4, #3
   825c2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   825c4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   825c6:	4814      	ldr	r0, [pc, #80]	; (82618 <Reset_Handler+0x7c>)
   825c8:	4914      	ldr	r1, [pc, #80]	; (8261c <Reset_Handler+0x80>)
   825ca:	585a      	ldr	r2, [r3, r1]
   825cc:	501a      	str	r2, [r3, r0]
   825ce:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   825d0:	42a3      	cmp	r3, r4
   825d2:	d1fa      	bne.n	825ca <Reset_Handler+0x2e>
   825d4:	e7eb      	b.n	825ae <Reset_Handler+0x12>
   825d6:	4b17      	ldr	r3, [pc, #92]	; (82634 <Reset_Handler+0x98>)
   825d8:	4917      	ldr	r1, [pc, #92]	; (82638 <Reset_Handler+0x9c>)
   825da:	1ac9      	subs	r1, r1, r3
   825dc:	f021 0103 	bic.w	r1, r1, #3
   825e0:	1d1a      	adds	r2, r3, #4
   825e2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   825e4:	2200      	movs	r2, #0
   825e6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   825ea:	428b      	cmp	r3, r1
   825ec:	d1fb      	bne.n	825e6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   825ee:	4a13      	ldr	r2, [pc, #76]	; (8263c <Reset_Handler+0xa0>)
   825f0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   825f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   825f8:	4911      	ldr	r1, [pc, #68]	; (82640 <Reset_Handler+0xa4>)
   825fa:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   825fc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82600:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82604:	d203      	bcs.n	8260e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82606:	688a      	ldr	r2, [r1, #8]
   82608:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8260c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8260e:	4b0d      	ldr	r3, [pc, #52]	; (82644 <Reset_Handler+0xa8>)
   82610:	4798      	blx	r3

	/* Branch to main function */
	main();
   82612:	4b0d      	ldr	r3, [pc, #52]	; (82648 <Reset_Handler+0xac>)
   82614:	4798      	blx	r3
   82616:	e7fe      	b.n	82616 <Reset_Handler+0x7a>
   82618:	20070000 	.word	0x20070000
   8261c:	00085b64 	.word	0x00085b64
   82620:	200709c4 	.word	0x200709c4
   82624:	20070bb4 	.word	0x20070bb4
   82628:	200709c4 	.word	0x200709c4
   8262c:	20070004 	.word	0x20070004
   82630:	200709c7 	.word	0x200709c7
   82634:	200709c0 	.word	0x200709c0
   82638:	20070baf 	.word	0x20070baf
   8263c:	00080000 	.word	0x00080000
   82640:	e000ed00 	.word	0xe000ed00
   82644:	000827b9 	.word	0x000827b9
   82648:	000809cd 	.word	0x000809cd

0008264c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8264c:	4b3e      	ldr	r3, [pc, #248]	; (82748 <SystemCoreClockUpdate+0xfc>)
   8264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82650:	f003 0303 	and.w	r3, r3, #3
   82654:	2b03      	cmp	r3, #3
   82656:	d85f      	bhi.n	82718 <SystemCoreClockUpdate+0xcc>
   82658:	e8df f003 	tbb	[pc, r3]
   8265c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82660:	4b3a      	ldr	r3, [pc, #232]	; (8274c <SystemCoreClockUpdate+0x100>)
   82662:	695b      	ldr	r3, [r3, #20]
   82664:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82668:	bf14      	ite	ne
   8266a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8266e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82672:	4b37      	ldr	r3, [pc, #220]	; (82750 <SystemCoreClockUpdate+0x104>)
   82674:	601a      	str	r2, [r3, #0]
   82676:	e04f      	b.n	82718 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82678:	4b33      	ldr	r3, [pc, #204]	; (82748 <SystemCoreClockUpdate+0xfc>)
   8267a:	6a1b      	ldr	r3, [r3, #32]
   8267c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82680:	d003      	beq.n	8268a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82682:	4a34      	ldr	r2, [pc, #208]	; (82754 <SystemCoreClockUpdate+0x108>)
   82684:	4b32      	ldr	r3, [pc, #200]	; (82750 <SystemCoreClockUpdate+0x104>)
   82686:	601a      	str	r2, [r3, #0]
   82688:	e046      	b.n	82718 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8268a:	4a33      	ldr	r2, [pc, #204]	; (82758 <SystemCoreClockUpdate+0x10c>)
   8268c:	4b30      	ldr	r3, [pc, #192]	; (82750 <SystemCoreClockUpdate+0x104>)
   8268e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82690:	4b2d      	ldr	r3, [pc, #180]	; (82748 <SystemCoreClockUpdate+0xfc>)
   82692:	6a1b      	ldr	r3, [r3, #32]
   82694:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82698:	2b10      	cmp	r3, #16
   8269a:	d002      	beq.n	826a2 <SystemCoreClockUpdate+0x56>
   8269c:	2b20      	cmp	r3, #32
   8269e:	d004      	beq.n	826aa <SystemCoreClockUpdate+0x5e>
   826a0:	e03a      	b.n	82718 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   826a2:	4a2e      	ldr	r2, [pc, #184]	; (8275c <SystemCoreClockUpdate+0x110>)
   826a4:	4b2a      	ldr	r3, [pc, #168]	; (82750 <SystemCoreClockUpdate+0x104>)
   826a6:	601a      	str	r2, [r3, #0]
				break;
   826a8:	e036      	b.n	82718 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   826aa:	4a2a      	ldr	r2, [pc, #168]	; (82754 <SystemCoreClockUpdate+0x108>)
   826ac:	4b28      	ldr	r3, [pc, #160]	; (82750 <SystemCoreClockUpdate+0x104>)
   826ae:	601a      	str	r2, [r3, #0]
				break;
   826b0:	e032      	b.n	82718 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   826b2:	4b25      	ldr	r3, [pc, #148]	; (82748 <SystemCoreClockUpdate+0xfc>)
   826b4:	6a1b      	ldr	r3, [r3, #32]
   826b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826ba:	d003      	beq.n	826c4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826bc:	4a25      	ldr	r2, [pc, #148]	; (82754 <SystemCoreClockUpdate+0x108>)
   826be:	4b24      	ldr	r3, [pc, #144]	; (82750 <SystemCoreClockUpdate+0x104>)
   826c0:	601a      	str	r2, [r3, #0]
   826c2:	e012      	b.n	826ea <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   826c4:	4a24      	ldr	r2, [pc, #144]	; (82758 <SystemCoreClockUpdate+0x10c>)
   826c6:	4b22      	ldr	r3, [pc, #136]	; (82750 <SystemCoreClockUpdate+0x104>)
   826c8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   826ca:	4b1f      	ldr	r3, [pc, #124]	; (82748 <SystemCoreClockUpdate+0xfc>)
   826cc:	6a1b      	ldr	r3, [r3, #32]
   826ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826d2:	2b10      	cmp	r3, #16
   826d4:	d002      	beq.n	826dc <SystemCoreClockUpdate+0x90>
   826d6:	2b20      	cmp	r3, #32
   826d8:	d004      	beq.n	826e4 <SystemCoreClockUpdate+0x98>
   826da:	e006      	b.n	826ea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   826dc:	4a1f      	ldr	r2, [pc, #124]	; (8275c <SystemCoreClockUpdate+0x110>)
   826de:	4b1c      	ldr	r3, [pc, #112]	; (82750 <SystemCoreClockUpdate+0x104>)
   826e0:	601a      	str	r2, [r3, #0]
				break;
   826e2:	e002      	b.n	826ea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   826e4:	4a1b      	ldr	r2, [pc, #108]	; (82754 <SystemCoreClockUpdate+0x108>)
   826e6:	4b1a      	ldr	r3, [pc, #104]	; (82750 <SystemCoreClockUpdate+0x104>)
   826e8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   826ea:	4b17      	ldr	r3, [pc, #92]	; (82748 <SystemCoreClockUpdate+0xfc>)
   826ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826ee:	f003 0303 	and.w	r3, r3, #3
   826f2:	2b02      	cmp	r3, #2
   826f4:	d10d      	bne.n	82712 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826f6:	4b14      	ldr	r3, [pc, #80]	; (82748 <SystemCoreClockUpdate+0xfc>)
   826f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
   826fc:	4b14      	ldr	r3, [pc, #80]	; (82750 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826fe:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82702:	681a      	ldr	r2, [r3, #0]
   82704:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82708:	b2c9      	uxtb	r1, r1
   8270a:	fbb2 f2f1 	udiv	r2, r2, r1
   8270e:	601a      	str	r2, [r3, #0]
   82710:	e002      	b.n	82718 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82712:	4a13      	ldr	r2, [pc, #76]	; (82760 <SystemCoreClockUpdate+0x114>)
   82714:	4b0e      	ldr	r3, [pc, #56]	; (82750 <SystemCoreClockUpdate+0x104>)
   82716:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82718:	4b0b      	ldr	r3, [pc, #44]	; (82748 <SystemCoreClockUpdate+0xfc>)
   8271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8271c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82720:	2b70      	cmp	r3, #112	; 0x70
   82722:	d107      	bne.n	82734 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82724:	4b0a      	ldr	r3, [pc, #40]	; (82750 <SystemCoreClockUpdate+0x104>)
   82726:	681a      	ldr	r2, [r3, #0]
   82728:	490e      	ldr	r1, [pc, #56]	; (82764 <SystemCoreClockUpdate+0x118>)
   8272a:	fba1 0202 	umull	r0, r2, r1, r2
   8272e:	0852      	lsrs	r2, r2, #1
   82730:	601a      	str	r2, [r3, #0]
   82732:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82734:	4b04      	ldr	r3, [pc, #16]	; (82748 <SystemCoreClockUpdate+0xfc>)
   82736:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82738:	4b05      	ldr	r3, [pc, #20]	; (82750 <SystemCoreClockUpdate+0x104>)
   8273a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8273e:	681a      	ldr	r2, [r3, #0]
   82740:	40ca      	lsrs	r2, r1
   82742:	601a      	str	r2, [r3, #0]
   82744:	4770      	bx	lr
   82746:	bf00      	nop
   82748:	400e0600 	.word	0x400e0600
   8274c:	400e1a10 	.word	0x400e1a10
   82750:	2007015c 	.word	0x2007015c
   82754:	00b71b00 	.word	0x00b71b00
   82758:	003d0900 	.word	0x003d0900
   8275c:	007a1200 	.word	0x007a1200
   82760:	0e4e1c00 	.word	0x0e4e1c00
   82764:	aaaaaaab 	.word	0xaaaaaaab

00082768 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82768:	4b09      	ldr	r3, [pc, #36]	; (82790 <_sbrk+0x28>)
   8276a:	681b      	ldr	r3, [r3, #0]
   8276c:	b913      	cbnz	r3, 82774 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8276e:	4a09      	ldr	r2, [pc, #36]	; (82794 <_sbrk+0x2c>)
   82770:	4b07      	ldr	r3, [pc, #28]	; (82790 <_sbrk+0x28>)
   82772:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82774:	4b06      	ldr	r3, [pc, #24]	; (82790 <_sbrk+0x28>)
   82776:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82778:	181a      	adds	r2, r3, r0
   8277a:	4907      	ldr	r1, [pc, #28]	; (82798 <_sbrk+0x30>)
   8277c:	4291      	cmp	r1, r2
   8277e:	db04      	blt.n	8278a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82780:	4610      	mov	r0, r2
   82782:	4a03      	ldr	r2, [pc, #12]	; (82790 <_sbrk+0x28>)
   82784:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82786:	4618      	mov	r0, r3
   82788:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8278a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8278e:	4770      	bx	lr
   82790:	20070af0 	.word	0x20070af0
   82794:	20072bb8 	.word	0x20072bb8
   82798:	20087ffc 	.word	0x20087ffc

0008279c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8279c:	f04f 30ff 	mov.w	r0, #4294967295
   827a0:	4770      	bx	lr
   827a2:	bf00      	nop

000827a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   827a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   827a8:	604b      	str	r3, [r1, #4]

	return 0;
}
   827aa:	2000      	movs	r0, #0
   827ac:	4770      	bx	lr
   827ae:	bf00      	nop

000827b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   827b0:	2001      	movs	r0, #1
   827b2:	4770      	bx	lr

000827b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   827b4:	2000      	movs	r0, #0
   827b6:	4770      	bx	lr

000827b8 <__libc_init_array>:
   827b8:	b570      	push	{r4, r5, r6, lr}
   827ba:	4e0f      	ldr	r6, [pc, #60]	; (827f8 <__libc_init_array+0x40>)
   827bc:	4d0f      	ldr	r5, [pc, #60]	; (827fc <__libc_init_array+0x44>)
   827be:	1b76      	subs	r6, r6, r5
   827c0:	10b6      	asrs	r6, r6, #2
   827c2:	d007      	beq.n	827d4 <__libc_init_array+0x1c>
   827c4:	3d04      	subs	r5, #4
   827c6:	2400      	movs	r4, #0
   827c8:	3401      	adds	r4, #1
   827ca:	f855 3f04 	ldr.w	r3, [r5, #4]!
   827ce:	4798      	blx	r3
   827d0:	42a6      	cmp	r6, r4
   827d2:	d1f9      	bne.n	827c8 <__libc_init_array+0x10>
   827d4:	4e0a      	ldr	r6, [pc, #40]	; (82800 <__libc_init_array+0x48>)
   827d6:	4d0b      	ldr	r5, [pc, #44]	; (82804 <__libc_init_array+0x4c>)
   827d8:	f003 f9ae 	bl	85b38 <_init>
   827dc:	1b76      	subs	r6, r6, r5
   827de:	10b6      	asrs	r6, r6, #2
   827e0:	d008      	beq.n	827f4 <__libc_init_array+0x3c>
   827e2:	3d04      	subs	r5, #4
   827e4:	2400      	movs	r4, #0
   827e6:	3401      	adds	r4, #1
   827e8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   827ec:	4798      	blx	r3
   827ee:	42a6      	cmp	r6, r4
   827f0:	d1f9      	bne.n	827e6 <__libc_init_array+0x2e>
   827f2:	bd70      	pop	{r4, r5, r6, pc}
   827f4:	bd70      	pop	{r4, r5, r6, pc}
   827f6:	bf00      	nop
   827f8:	00085b44 	.word	0x00085b44
   827fc:	00085b44 	.word	0x00085b44
   82800:	00085b4c 	.word	0x00085b4c
   82804:	00085b44 	.word	0x00085b44

00082808 <iprintf>:
   82808:	b40f      	push	{r0, r1, r2, r3}
   8280a:	b510      	push	{r4, lr}
   8280c:	4b07      	ldr	r3, [pc, #28]	; (8282c <iprintf+0x24>)
   8280e:	b082      	sub	sp, #8
   82810:	ac04      	add	r4, sp, #16
   82812:	f854 2b04 	ldr.w	r2, [r4], #4
   82816:	6818      	ldr	r0, [r3, #0]
   82818:	4623      	mov	r3, r4
   8281a:	6881      	ldr	r1, [r0, #8]
   8281c:	9401      	str	r4, [sp, #4]
   8281e:	f000 f953 	bl	82ac8 <_vfiprintf_r>
   82822:	b002      	add	sp, #8
   82824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82828:	b004      	add	sp, #16
   8282a:	4770      	bx	lr
   8282c:	20070588 	.word	0x20070588

00082830 <memset>:
   82830:	b4f0      	push	{r4, r5, r6, r7}
   82832:	0784      	lsls	r4, r0, #30
   82834:	d043      	beq.n	828be <memset+0x8e>
   82836:	1e54      	subs	r4, r2, #1
   82838:	2a00      	cmp	r2, #0
   8283a:	d03e      	beq.n	828ba <memset+0x8a>
   8283c:	b2cd      	uxtb	r5, r1
   8283e:	4603      	mov	r3, r0
   82840:	e003      	b.n	8284a <memset+0x1a>
   82842:	1e62      	subs	r2, r4, #1
   82844:	2c00      	cmp	r4, #0
   82846:	d038      	beq.n	828ba <memset+0x8a>
   82848:	4614      	mov	r4, r2
   8284a:	f803 5b01 	strb.w	r5, [r3], #1
   8284e:	079a      	lsls	r2, r3, #30
   82850:	d1f7      	bne.n	82842 <memset+0x12>
   82852:	2c03      	cmp	r4, #3
   82854:	d92a      	bls.n	828ac <memset+0x7c>
   82856:	b2cd      	uxtb	r5, r1
   82858:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8285c:	2c0f      	cmp	r4, #15
   8285e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82862:	d915      	bls.n	82890 <memset+0x60>
   82864:	f1a4 0710 	sub.w	r7, r4, #16
   82868:	093f      	lsrs	r7, r7, #4
   8286a:	f103 0610 	add.w	r6, r3, #16
   8286e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82872:	461a      	mov	r2, r3
   82874:	6015      	str	r5, [r2, #0]
   82876:	6055      	str	r5, [r2, #4]
   82878:	6095      	str	r5, [r2, #8]
   8287a:	60d5      	str	r5, [r2, #12]
   8287c:	3210      	adds	r2, #16
   8287e:	42b2      	cmp	r2, r6
   82880:	d1f8      	bne.n	82874 <memset+0x44>
   82882:	f004 040f 	and.w	r4, r4, #15
   82886:	3701      	adds	r7, #1
   82888:	2c03      	cmp	r4, #3
   8288a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8288e:	d90d      	bls.n	828ac <memset+0x7c>
   82890:	461e      	mov	r6, r3
   82892:	4622      	mov	r2, r4
   82894:	3a04      	subs	r2, #4
   82896:	2a03      	cmp	r2, #3
   82898:	f846 5b04 	str.w	r5, [r6], #4
   8289c:	d8fa      	bhi.n	82894 <memset+0x64>
   8289e:	1f22      	subs	r2, r4, #4
   828a0:	f022 0203 	bic.w	r2, r2, #3
   828a4:	3204      	adds	r2, #4
   828a6:	4413      	add	r3, r2
   828a8:	f004 0403 	and.w	r4, r4, #3
   828ac:	b12c      	cbz	r4, 828ba <memset+0x8a>
   828ae:	b2c9      	uxtb	r1, r1
   828b0:	441c      	add	r4, r3
   828b2:	f803 1b01 	strb.w	r1, [r3], #1
   828b6:	42a3      	cmp	r3, r4
   828b8:	d1fb      	bne.n	828b2 <memset+0x82>
   828ba:	bcf0      	pop	{r4, r5, r6, r7}
   828bc:	4770      	bx	lr
   828be:	4614      	mov	r4, r2
   828c0:	4603      	mov	r3, r0
   828c2:	e7c6      	b.n	82852 <memset+0x22>

000828c4 <setbuf>:
   828c4:	2900      	cmp	r1, #0
   828c6:	bf0c      	ite	eq
   828c8:	2202      	moveq	r2, #2
   828ca:	2200      	movne	r2, #0
   828cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   828d0:	f000 b80e 	b.w	828f0 <setvbuf>

000828d4 <setjmp>:
   828d4:	46ec      	mov	ip, sp
   828d6:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   828da:	f04f 0000 	mov.w	r0, #0
   828de:	4770      	bx	lr

000828e0 <longjmp>:
   828e0:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   828e4:	46e5      	mov	sp, ip
   828e6:	0008      	movs	r0, r1
   828e8:	bf08      	it	eq
   828ea:	2001      	moveq	r0, #1
   828ec:	4770      	bx	lr
   828ee:	bf00      	nop

000828f0 <setvbuf>:
   828f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828f4:	4d3c      	ldr	r5, [pc, #240]	; (829e8 <setvbuf+0xf8>)
   828f6:	4604      	mov	r4, r0
   828f8:	682d      	ldr	r5, [r5, #0]
   828fa:	4688      	mov	r8, r1
   828fc:	4616      	mov	r6, r2
   828fe:	461f      	mov	r7, r3
   82900:	b115      	cbz	r5, 82908 <setvbuf+0x18>
   82902:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82904:	2b00      	cmp	r3, #0
   82906:	d04f      	beq.n	829a8 <setvbuf+0xb8>
   82908:	2e02      	cmp	r6, #2
   8290a:	d830      	bhi.n	8296e <setvbuf+0x7e>
   8290c:	2f00      	cmp	r7, #0
   8290e:	db2e      	blt.n	8296e <setvbuf+0x7e>
   82910:	4628      	mov	r0, r5
   82912:	4621      	mov	r1, r4
   82914:	f001 f8aa 	bl	83a6c <_fflush_r>
   82918:	89a3      	ldrh	r3, [r4, #12]
   8291a:	2200      	movs	r2, #0
   8291c:	6062      	str	r2, [r4, #4]
   8291e:	61a2      	str	r2, [r4, #24]
   82920:	061a      	lsls	r2, r3, #24
   82922:	d428      	bmi.n	82976 <setvbuf+0x86>
   82924:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82928:	b29b      	uxth	r3, r3
   8292a:	2e02      	cmp	r6, #2
   8292c:	81a3      	strh	r3, [r4, #12]
   8292e:	d02d      	beq.n	8298c <setvbuf+0x9c>
   82930:	f1b8 0f00 	cmp.w	r8, #0
   82934:	d03c      	beq.n	829b0 <setvbuf+0xc0>
   82936:	2e01      	cmp	r6, #1
   82938:	d013      	beq.n	82962 <setvbuf+0x72>
   8293a:	b29b      	uxth	r3, r3
   8293c:	f003 0008 	and.w	r0, r3, #8
   82940:	4a2a      	ldr	r2, [pc, #168]	; (829ec <setvbuf+0xfc>)
   82942:	b280      	uxth	r0, r0
   82944:	63ea      	str	r2, [r5, #60]	; 0x3c
   82946:	f8c4 8000 	str.w	r8, [r4]
   8294a:	f8c4 8010 	str.w	r8, [r4, #16]
   8294e:	6167      	str	r7, [r4, #20]
   82950:	b178      	cbz	r0, 82972 <setvbuf+0x82>
   82952:	f013 0f03 	tst.w	r3, #3
   82956:	bf18      	it	ne
   82958:	2700      	movne	r7, #0
   8295a:	60a7      	str	r7, [r4, #8]
   8295c:	2000      	movs	r0, #0
   8295e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82962:	f043 0301 	orr.w	r3, r3, #1
   82966:	427a      	negs	r2, r7
   82968:	81a3      	strh	r3, [r4, #12]
   8296a:	61a2      	str	r2, [r4, #24]
   8296c:	e7e5      	b.n	8293a <setvbuf+0x4a>
   8296e:	f04f 30ff 	mov.w	r0, #4294967295
   82972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82976:	4628      	mov	r0, r5
   82978:	6921      	ldr	r1, [r4, #16]
   8297a:	f001 f9d7 	bl	83d2c <_free_r>
   8297e:	89a3      	ldrh	r3, [r4, #12]
   82980:	2e02      	cmp	r6, #2
   82982:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82986:	b29b      	uxth	r3, r3
   82988:	81a3      	strh	r3, [r4, #12]
   8298a:	d1d1      	bne.n	82930 <setvbuf+0x40>
   8298c:	2000      	movs	r0, #0
   8298e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82992:	f043 0302 	orr.w	r3, r3, #2
   82996:	2500      	movs	r5, #0
   82998:	2101      	movs	r1, #1
   8299a:	81a3      	strh	r3, [r4, #12]
   8299c:	60a5      	str	r5, [r4, #8]
   8299e:	6022      	str	r2, [r4, #0]
   829a0:	6122      	str	r2, [r4, #16]
   829a2:	6161      	str	r1, [r4, #20]
   829a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829a8:	4628      	mov	r0, r5
   829aa:	f001 f87b 	bl	83aa4 <__sinit>
   829ae:	e7ab      	b.n	82908 <setvbuf+0x18>
   829b0:	2f00      	cmp	r7, #0
   829b2:	bf08      	it	eq
   829b4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   829b8:	4638      	mov	r0, r7
   829ba:	f001 fcad 	bl	84318 <malloc>
   829be:	4680      	mov	r8, r0
   829c0:	b128      	cbz	r0, 829ce <setvbuf+0xde>
   829c2:	89a3      	ldrh	r3, [r4, #12]
   829c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   829c8:	b29b      	uxth	r3, r3
   829ca:	81a3      	strh	r3, [r4, #12]
   829cc:	e7b3      	b.n	82936 <setvbuf+0x46>
   829ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
   829d2:	f001 fca1 	bl	84318 <malloc>
   829d6:	4680      	mov	r8, r0
   829d8:	b918      	cbnz	r0, 829e2 <setvbuf+0xf2>
   829da:	89a3      	ldrh	r3, [r4, #12]
   829dc:	f04f 30ff 	mov.w	r0, #4294967295
   829e0:	e7d5      	b.n	8298e <setvbuf+0x9e>
   829e2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   829e6:	e7ec      	b.n	829c2 <setvbuf+0xd2>
   829e8:	20070588 	.word	0x20070588
   829ec:	00083a99 	.word	0x00083a99

000829f0 <strlen>:
   829f0:	f020 0103 	bic.w	r1, r0, #3
   829f4:	f010 0003 	ands.w	r0, r0, #3
   829f8:	f1c0 0000 	rsb	r0, r0, #0
   829fc:	f851 3b04 	ldr.w	r3, [r1], #4
   82a00:	f100 0c04 	add.w	ip, r0, #4
   82a04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82a08:	f06f 0200 	mvn.w	r2, #0
   82a0c:	bf1c      	itt	ne
   82a0e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82a12:	4313      	orrne	r3, r2
   82a14:	f04f 0c01 	mov.w	ip, #1
   82a18:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82a1c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82a20:	eba3 020c 	sub.w	r2, r3, ip
   82a24:	ea22 0203 	bic.w	r2, r2, r3
   82a28:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82a2c:	bf04      	itt	eq
   82a2e:	f851 3b04 	ldreq.w	r3, [r1], #4
   82a32:	3004      	addeq	r0, #4
   82a34:	d0f4      	beq.n	82a20 <strlen+0x30>
   82a36:	f013 0fff 	tst.w	r3, #255	; 0xff
   82a3a:	bf1f      	itttt	ne
   82a3c:	3001      	addne	r0, #1
   82a3e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   82a42:	3001      	addne	r0, #1
   82a44:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82a48:	bf18      	it	ne
   82a4a:	3001      	addne	r0, #1
   82a4c:	4770      	bx	lr
   82a4e:	bf00      	nop

00082a50 <__sprint_r.part.0>:
   82a50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82a56:	049c      	lsls	r4, r3, #18
   82a58:	460e      	mov	r6, r1
   82a5a:	4680      	mov	r8, r0
   82a5c:	4691      	mov	r9, r2
   82a5e:	d52a      	bpl.n	82ab6 <__sprint_r.part.0+0x66>
   82a60:	6893      	ldr	r3, [r2, #8]
   82a62:	6812      	ldr	r2, [r2, #0]
   82a64:	f102 0a08 	add.w	sl, r2, #8
   82a68:	b31b      	cbz	r3, 82ab2 <__sprint_r.part.0+0x62>
   82a6a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82a6e:	08bf      	lsrs	r7, r7, #2
   82a70:	d017      	beq.n	82aa2 <__sprint_r.part.0+0x52>
   82a72:	3d04      	subs	r5, #4
   82a74:	2400      	movs	r4, #0
   82a76:	e001      	b.n	82a7c <__sprint_r.part.0+0x2c>
   82a78:	42a7      	cmp	r7, r4
   82a7a:	d010      	beq.n	82a9e <__sprint_r.part.0+0x4e>
   82a7c:	4640      	mov	r0, r8
   82a7e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82a82:	4632      	mov	r2, r6
   82a84:	f001 f8a4 	bl	83bd0 <_fputwc_r>
   82a88:	1c43      	adds	r3, r0, #1
   82a8a:	f104 0401 	add.w	r4, r4, #1
   82a8e:	d1f3      	bne.n	82a78 <__sprint_r.part.0+0x28>
   82a90:	2300      	movs	r3, #0
   82a92:	f8c9 3008 	str.w	r3, [r9, #8]
   82a96:	f8c9 3004 	str.w	r3, [r9, #4]
   82a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82a9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82aa2:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82aa6:	f8c9 3008 	str.w	r3, [r9, #8]
   82aaa:	f10a 0a08 	add.w	sl, sl, #8
   82aae:	2b00      	cmp	r3, #0
   82ab0:	d1db      	bne.n	82a6a <__sprint_r.part.0+0x1a>
   82ab2:	2000      	movs	r0, #0
   82ab4:	e7ec      	b.n	82a90 <__sprint_r.part.0+0x40>
   82ab6:	f001 fa05 	bl	83ec4 <__sfvwrite_r>
   82aba:	2300      	movs	r3, #0
   82abc:	f8c9 3008 	str.w	r3, [r9, #8]
   82ac0:	f8c9 3004 	str.w	r3, [r9, #4]
   82ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082ac8 <_vfiprintf_r>:
   82ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82acc:	b0b1      	sub	sp, #196	; 0xc4
   82ace:	461c      	mov	r4, r3
   82ad0:	9102      	str	r1, [sp, #8]
   82ad2:	4690      	mov	r8, r2
   82ad4:	9308      	str	r3, [sp, #32]
   82ad6:	9006      	str	r0, [sp, #24]
   82ad8:	b118      	cbz	r0, 82ae2 <_vfiprintf_r+0x1a>
   82ada:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82adc:	2b00      	cmp	r3, #0
   82ade:	f000 80e8 	beq.w	82cb2 <_vfiprintf_r+0x1ea>
   82ae2:	9d02      	ldr	r5, [sp, #8]
   82ae4:	89ab      	ldrh	r3, [r5, #12]
   82ae6:	b29a      	uxth	r2, r3
   82ae8:	0490      	lsls	r0, r2, #18
   82aea:	d407      	bmi.n	82afc <_vfiprintf_r+0x34>
   82aec:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82af2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82af6:	81ab      	strh	r3, [r5, #12]
   82af8:	b29a      	uxth	r2, r3
   82afa:	6669      	str	r1, [r5, #100]	; 0x64
   82afc:	0711      	lsls	r1, r2, #28
   82afe:	f140 80b7 	bpl.w	82c70 <_vfiprintf_r+0x1a8>
   82b02:	f8dd b008 	ldr.w	fp, [sp, #8]
   82b06:	f8db 3010 	ldr.w	r3, [fp, #16]
   82b0a:	2b00      	cmp	r3, #0
   82b0c:	f000 80b0 	beq.w	82c70 <_vfiprintf_r+0x1a8>
   82b10:	f002 021a 	and.w	r2, r2, #26
   82b14:	2a0a      	cmp	r2, #10
   82b16:	f000 80b7 	beq.w	82c88 <_vfiprintf_r+0x1c0>
   82b1a:	2300      	movs	r3, #0
   82b1c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82b20:	930a      	str	r3, [sp, #40]	; 0x28
   82b22:	9315      	str	r3, [sp, #84]	; 0x54
   82b24:	9314      	str	r3, [sp, #80]	; 0x50
   82b26:	9309      	str	r3, [sp, #36]	; 0x24
   82b28:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82b2c:	464e      	mov	r6, r9
   82b2e:	f898 3000 	ldrb.w	r3, [r8]
   82b32:	2b00      	cmp	r3, #0
   82b34:	f000 84c8 	beq.w	834c8 <_vfiprintf_r+0xa00>
   82b38:	2b25      	cmp	r3, #37	; 0x25
   82b3a:	f000 84c5 	beq.w	834c8 <_vfiprintf_r+0xa00>
   82b3e:	f108 0201 	add.w	r2, r8, #1
   82b42:	e001      	b.n	82b48 <_vfiprintf_r+0x80>
   82b44:	2b25      	cmp	r3, #37	; 0x25
   82b46:	d004      	beq.n	82b52 <_vfiprintf_r+0x8a>
   82b48:	7813      	ldrb	r3, [r2, #0]
   82b4a:	4614      	mov	r4, r2
   82b4c:	3201      	adds	r2, #1
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d1f8      	bne.n	82b44 <_vfiprintf_r+0x7c>
   82b52:	ebc8 0504 	rsb	r5, r8, r4
   82b56:	b195      	cbz	r5, 82b7e <_vfiprintf_r+0xb6>
   82b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82b5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b5c:	3301      	adds	r3, #1
   82b5e:	442a      	add	r2, r5
   82b60:	2b07      	cmp	r3, #7
   82b62:	f8c6 8000 	str.w	r8, [r6]
   82b66:	6075      	str	r5, [r6, #4]
   82b68:	9215      	str	r2, [sp, #84]	; 0x54
   82b6a:	9314      	str	r3, [sp, #80]	; 0x50
   82b6c:	dd7b      	ble.n	82c66 <_vfiprintf_r+0x19e>
   82b6e:	2a00      	cmp	r2, #0
   82b70:	f040 84d5 	bne.w	8351e <_vfiprintf_r+0xa56>
   82b74:	9809      	ldr	r0, [sp, #36]	; 0x24
   82b76:	9214      	str	r2, [sp, #80]	; 0x50
   82b78:	4428      	add	r0, r5
   82b7a:	464e      	mov	r6, r9
   82b7c:	9009      	str	r0, [sp, #36]	; 0x24
   82b7e:	7823      	ldrb	r3, [r4, #0]
   82b80:	2b00      	cmp	r3, #0
   82b82:	f000 83ed 	beq.w	83360 <_vfiprintf_r+0x898>
   82b86:	2100      	movs	r1, #0
   82b88:	f04f 0200 	mov.w	r2, #0
   82b8c:	f04f 3cff 	mov.w	ip, #4294967295
   82b90:	7863      	ldrb	r3, [r4, #1]
   82b92:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82b96:	9104      	str	r1, [sp, #16]
   82b98:	468a      	mov	sl, r1
   82b9a:	f104 0801 	add.w	r8, r4, #1
   82b9e:	4608      	mov	r0, r1
   82ba0:	4665      	mov	r5, ip
   82ba2:	f108 0801 	add.w	r8, r8, #1
   82ba6:	f1a3 0220 	sub.w	r2, r3, #32
   82baa:	2a58      	cmp	r2, #88	; 0x58
   82bac:	f200 82d9 	bhi.w	83162 <_vfiprintf_r+0x69a>
   82bb0:	e8df f012 	tbh	[pc, r2, lsl #1]
   82bb4:	02d702cb 	.word	0x02d702cb
   82bb8:	02d202d7 	.word	0x02d202d7
   82bbc:	02d702d7 	.word	0x02d702d7
   82bc0:	02d702d7 	.word	0x02d702d7
   82bc4:	02d702d7 	.word	0x02d702d7
   82bc8:	028f0282 	.word	0x028f0282
   82bcc:	008402d7 	.word	0x008402d7
   82bd0:	02d70293 	.word	0x02d70293
   82bd4:	0196012b 	.word	0x0196012b
   82bd8:	01960196 	.word	0x01960196
   82bdc:	01960196 	.word	0x01960196
   82be0:	01960196 	.word	0x01960196
   82be4:	01960196 	.word	0x01960196
   82be8:	02d702d7 	.word	0x02d702d7
   82bec:	02d702d7 	.word	0x02d702d7
   82bf0:	02d702d7 	.word	0x02d702d7
   82bf4:	02d702d7 	.word	0x02d702d7
   82bf8:	02d702d7 	.word	0x02d702d7
   82bfc:	02d70130 	.word	0x02d70130
   82c00:	02d702d7 	.word	0x02d702d7
   82c04:	02d702d7 	.word	0x02d702d7
   82c08:	02d702d7 	.word	0x02d702d7
   82c0c:	02d702d7 	.word	0x02d702d7
   82c10:	017b02d7 	.word	0x017b02d7
   82c14:	02d702d7 	.word	0x02d702d7
   82c18:	02d702d7 	.word	0x02d702d7
   82c1c:	01a402d7 	.word	0x01a402d7
   82c20:	02d702d7 	.word	0x02d702d7
   82c24:	02d701bf 	.word	0x02d701bf
   82c28:	02d702d7 	.word	0x02d702d7
   82c2c:	02d702d7 	.word	0x02d702d7
   82c30:	02d702d7 	.word	0x02d702d7
   82c34:	02d702d7 	.word	0x02d702d7
   82c38:	01e402d7 	.word	0x01e402d7
   82c3c:	02d701fa 	.word	0x02d701fa
   82c40:	02d702d7 	.word	0x02d702d7
   82c44:	01fa0216 	.word	0x01fa0216
   82c48:	02d702d7 	.word	0x02d702d7
   82c4c:	02d7021b 	.word	0x02d7021b
   82c50:	00890228 	.word	0x00890228
   82c54:	027d0266 	.word	0x027d0266
   82c58:	023a02d7 	.word	0x023a02d7
   82c5c:	011902d7 	.word	0x011902d7
   82c60:	02d702d7 	.word	0x02d702d7
   82c64:	02af      	.short	0x02af
   82c66:	3608      	adds	r6, #8
   82c68:	9809      	ldr	r0, [sp, #36]	; 0x24
   82c6a:	4428      	add	r0, r5
   82c6c:	9009      	str	r0, [sp, #36]	; 0x24
   82c6e:	e786      	b.n	82b7e <_vfiprintf_r+0xb6>
   82c70:	9806      	ldr	r0, [sp, #24]
   82c72:	9902      	ldr	r1, [sp, #8]
   82c74:	f000 fde4 	bl	83840 <__swsetup_r>
   82c78:	b9b0      	cbnz	r0, 82ca8 <_vfiprintf_r+0x1e0>
   82c7a:	9d02      	ldr	r5, [sp, #8]
   82c7c:	89aa      	ldrh	r2, [r5, #12]
   82c7e:	f002 021a 	and.w	r2, r2, #26
   82c82:	2a0a      	cmp	r2, #10
   82c84:	f47f af49 	bne.w	82b1a <_vfiprintf_r+0x52>
   82c88:	f8dd b008 	ldr.w	fp, [sp, #8]
   82c8c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82c90:	2b00      	cmp	r3, #0
   82c92:	f6ff af42 	blt.w	82b1a <_vfiprintf_r+0x52>
   82c96:	9806      	ldr	r0, [sp, #24]
   82c98:	4659      	mov	r1, fp
   82c9a:	4642      	mov	r2, r8
   82c9c:	4623      	mov	r3, r4
   82c9e:	f000 fd3d 	bl	8371c <__sbprintf>
   82ca2:	b031      	add	sp, #196	; 0xc4
   82ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ca8:	f04f 30ff 	mov.w	r0, #4294967295
   82cac:	b031      	add	sp, #196	; 0xc4
   82cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cb2:	f000 fef7 	bl	83aa4 <__sinit>
   82cb6:	e714      	b.n	82ae2 <_vfiprintf_r+0x1a>
   82cb8:	4240      	negs	r0, r0
   82cba:	9308      	str	r3, [sp, #32]
   82cbc:	f04a 0a04 	orr.w	sl, sl, #4
   82cc0:	f898 3000 	ldrb.w	r3, [r8]
   82cc4:	e76d      	b.n	82ba2 <_vfiprintf_r+0xda>
   82cc6:	f01a 0320 	ands.w	r3, sl, #32
   82cca:	9004      	str	r0, [sp, #16]
   82ccc:	46ac      	mov	ip, r5
   82cce:	f000 80f4 	beq.w	82eba <_vfiprintf_r+0x3f2>
   82cd2:	f8dd b020 	ldr.w	fp, [sp, #32]
   82cd6:	f10b 0307 	add.w	r3, fp, #7
   82cda:	f023 0307 	bic.w	r3, r3, #7
   82cde:	f103 0408 	add.w	r4, r3, #8
   82ce2:	9408      	str	r4, [sp, #32]
   82ce4:	e9d3 4500 	ldrd	r4, r5, [r3]
   82ce8:	2300      	movs	r3, #0
   82cea:	f04f 0000 	mov.w	r0, #0
   82cee:	2100      	movs	r1, #0
   82cf0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82cf4:	f8cd c014 	str.w	ip, [sp, #20]
   82cf8:	9107      	str	r1, [sp, #28]
   82cfa:	f1bc 0f00 	cmp.w	ip, #0
   82cfe:	bfa8      	it	ge
   82d00:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82d04:	ea54 0205 	orrs.w	r2, r4, r5
   82d08:	f040 80ad 	bne.w	82e66 <_vfiprintf_r+0x39e>
   82d0c:	f1bc 0f00 	cmp.w	ip, #0
   82d10:	f040 80a9 	bne.w	82e66 <_vfiprintf_r+0x39e>
   82d14:	2b00      	cmp	r3, #0
   82d16:	f040 83c0 	bne.w	8349a <_vfiprintf_r+0x9d2>
   82d1a:	f01a 0f01 	tst.w	sl, #1
   82d1e:	f000 83bc 	beq.w	8349a <_vfiprintf_r+0x9d2>
   82d22:	2330      	movs	r3, #48	; 0x30
   82d24:	af30      	add	r7, sp, #192	; 0xc0
   82d26:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82d2a:	ebc7 0409 	rsb	r4, r7, r9
   82d2e:	9405      	str	r4, [sp, #20]
   82d30:	f8dd b014 	ldr.w	fp, [sp, #20]
   82d34:	9c07      	ldr	r4, [sp, #28]
   82d36:	45e3      	cmp	fp, ip
   82d38:	bfb8      	it	lt
   82d3a:	46e3      	movlt	fp, ip
   82d3c:	f8cd b00c 	str.w	fp, [sp, #12]
   82d40:	b11c      	cbz	r4, 82d4a <_vfiprintf_r+0x282>
   82d42:	f10b 0b01 	add.w	fp, fp, #1
   82d46:	f8cd b00c 	str.w	fp, [sp, #12]
   82d4a:	f01a 0502 	ands.w	r5, sl, #2
   82d4e:	9507      	str	r5, [sp, #28]
   82d50:	d005      	beq.n	82d5e <_vfiprintf_r+0x296>
   82d52:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82d56:	f10b 0b02 	add.w	fp, fp, #2
   82d5a:	f8cd b00c 	str.w	fp, [sp, #12]
   82d5e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82d62:	930b      	str	r3, [sp, #44]	; 0x2c
   82d64:	f040 821b 	bne.w	8319e <_vfiprintf_r+0x6d6>
   82d68:	9d04      	ldr	r5, [sp, #16]
   82d6a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82d6e:	ebcb 0405 	rsb	r4, fp, r5
   82d72:	2c00      	cmp	r4, #0
   82d74:	f340 8213 	ble.w	8319e <_vfiprintf_r+0x6d6>
   82d78:	2c10      	cmp	r4, #16
   82d7a:	f340 8489 	ble.w	83690 <_vfiprintf_r+0xbc8>
   82d7e:	4dbe      	ldr	r5, [pc, #760]	; (83078 <_vfiprintf_r+0x5b0>)
   82d80:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82d82:	462b      	mov	r3, r5
   82d84:	9814      	ldr	r0, [sp, #80]	; 0x50
   82d86:	4625      	mov	r5, r4
   82d88:	f04f 0b10 	mov.w	fp, #16
   82d8c:	4664      	mov	r4, ip
   82d8e:	46b4      	mov	ip, r6
   82d90:	461e      	mov	r6, r3
   82d92:	e006      	b.n	82da2 <_vfiprintf_r+0x2da>
   82d94:	1c83      	adds	r3, r0, #2
   82d96:	f10c 0c08 	add.w	ip, ip, #8
   82d9a:	4608      	mov	r0, r1
   82d9c:	3d10      	subs	r5, #16
   82d9e:	2d10      	cmp	r5, #16
   82da0:	dd11      	ble.n	82dc6 <_vfiprintf_r+0x2fe>
   82da2:	1c41      	adds	r1, r0, #1
   82da4:	3210      	adds	r2, #16
   82da6:	2907      	cmp	r1, #7
   82da8:	9215      	str	r2, [sp, #84]	; 0x54
   82daa:	e88c 0840 	stmia.w	ip, {r6, fp}
   82dae:	9114      	str	r1, [sp, #80]	; 0x50
   82db0:	ddf0      	ble.n	82d94 <_vfiprintf_r+0x2cc>
   82db2:	2a00      	cmp	r2, #0
   82db4:	f040 81e6 	bne.w	83184 <_vfiprintf_r+0x6bc>
   82db8:	3d10      	subs	r5, #16
   82dba:	2d10      	cmp	r5, #16
   82dbc:	f04f 0301 	mov.w	r3, #1
   82dc0:	4610      	mov	r0, r2
   82dc2:	46cc      	mov	ip, r9
   82dc4:	dced      	bgt.n	82da2 <_vfiprintf_r+0x2da>
   82dc6:	4631      	mov	r1, r6
   82dc8:	4666      	mov	r6, ip
   82dca:	46a4      	mov	ip, r4
   82dcc:	462c      	mov	r4, r5
   82dce:	460d      	mov	r5, r1
   82dd0:	4422      	add	r2, r4
   82dd2:	2b07      	cmp	r3, #7
   82dd4:	9215      	str	r2, [sp, #84]	; 0x54
   82dd6:	6035      	str	r5, [r6, #0]
   82dd8:	6074      	str	r4, [r6, #4]
   82dda:	9314      	str	r3, [sp, #80]	; 0x50
   82ddc:	f300 836d 	bgt.w	834ba <_vfiprintf_r+0x9f2>
   82de0:	3608      	adds	r6, #8
   82de2:	1c59      	adds	r1, r3, #1
   82de4:	e1de      	b.n	831a4 <_vfiprintf_r+0x6dc>
   82de6:	f01a 0f20 	tst.w	sl, #32
   82dea:	9004      	str	r0, [sp, #16]
   82dec:	46ac      	mov	ip, r5
   82dee:	f000 808d 	beq.w	82f0c <_vfiprintf_r+0x444>
   82df2:	9d08      	ldr	r5, [sp, #32]
   82df4:	1deb      	adds	r3, r5, #7
   82df6:	f023 0307 	bic.w	r3, r3, #7
   82dfa:	f103 0b08 	add.w	fp, r3, #8
   82dfe:	e9d3 4500 	ldrd	r4, r5, [r3]
   82e02:	f8cd b020 	str.w	fp, [sp, #32]
   82e06:	2301      	movs	r3, #1
   82e08:	e76f      	b.n	82cea <_vfiprintf_r+0x222>
   82e0a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82e0e:	f898 3000 	ldrb.w	r3, [r8]
   82e12:	e6c6      	b.n	82ba2 <_vfiprintf_r+0xda>
   82e14:	f04a 0a10 	orr.w	sl, sl, #16
   82e18:	f01a 0f20 	tst.w	sl, #32
   82e1c:	9004      	str	r0, [sp, #16]
   82e1e:	46ac      	mov	ip, r5
   82e20:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82e24:	f000 80c8 	beq.w	82fb8 <_vfiprintf_r+0x4f0>
   82e28:	9c08      	ldr	r4, [sp, #32]
   82e2a:	1de1      	adds	r1, r4, #7
   82e2c:	f021 0107 	bic.w	r1, r1, #7
   82e30:	e9d1 2300 	ldrd	r2, r3, [r1]
   82e34:	3108      	adds	r1, #8
   82e36:	9108      	str	r1, [sp, #32]
   82e38:	4614      	mov	r4, r2
   82e3a:	461d      	mov	r5, r3
   82e3c:	2a00      	cmp	r2, #0
   82e3e:	f173 0b00 	sbcs.w	fp, r3, #0
   82e42:	f2c0 83ce 	blt.w	835e2 <_vfiprintf_r+0xb1a>
   82e46:	f1bc 0f00 	cmp.w	ip, #0
   82e4a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82e4e:	bfa8      	it	ge
   82e50:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82e54:	ea54 0205 	orrs.w	r2, r4, r5
   82e58:	9007      	str	r0, [sp, #28]
   82e5a:	f8cd c014 	str.w	ip, [sp, #20]
   82e5e:	f04f 0301 	mov.w	r3, #1
   82e62:	f43f af53 	beq.w	82d0c <_vfiprintf_r+0x244>
   82e66:	2b01      	cmp	r3, #1
   82e68:	f000 8319 	beq.w	8349e <_vfiprintf_r+0x9d6>
   82e6c:	2b02      	cmp	r3, #2
   82e6e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82e72:	f040 824c 	bne.w	8330e <_vfiprintf_r+0x846>
   82e76:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82e7a:	4619      	mov	r1, r3
   82e7c:	f004 000f 	and.w	r0, r4, #15
   82e80:	0922      	lsrs	r2, r4, #4
   82e82:	f81b 0000 	ldrb.w	r0, [fp, r0]
   82e86:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82e8a:	092b      	lsrs	r3, r5, #4
   82e8c:	7008      	strb	r0, [r1, #0]
   82e8e:	ea52 0003 	orrs.w	r0, r2, r3
   82e92:	460f      	mov	r7, r1
   82e94:	4614      	mov	r4, r2
   82e96:	461d      	mov	r5, r3
   82e98:	f101 31ff 	add.w	r1, r1, #4294967295
   82e9c:	d1ee      	bne.n	82e7c <_vfiprintf_r+0x3b4>
   82e9e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82ea2:	ebc7 0309 	rsb	r3, r7, r9
   82ea6:	9305      	str	r3, [sp, #20]
   82ea8:	e742      	b.n	82d30 <_vfiprintf_r+0x268>
   82eaa:	f04a 0a10 	orr.w	sl, sl, #16
   82eae:	f01a 0320 	ands.w	r3, sl, #32
   82eb2:	9004      	str	r0, [sp, #16]
   82eb4:	46ac      	mov	ip, r5
   82eb6:	f47f af0c 	bne.w	82cd2 <_vfiprintf_r+0x20a>
   82eba:	f01a 0210 	ands.w	r2, sl, #16
   82ebe:	f040 8311 	bne.w	834e4 <_vfiprintf_r+0xa1c>
   82ec2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82ec6:	f000 830d 	beq.w	834e4 <_vfiprintf_r+0xa1c>
   82eca:	f8dd b020 	ldr.w	fp, [sp, #32]
   82ece:	4613      	mov	r3, r2
   82ed0:	f8bb 4000 	ldrh.w	r4, [fp]
   82ed4:	f10b 0b04 	add.w	fp, fp, #4
   82ed8:	2500      	movs	r5, #0
   82eda:	f8cd b020 	str.w	fp, [sp, #32]
   82ede:	e704      	b.n	82cea <_vfiprintf_r+0x222>
   82ee0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82ee4:	2000      	movs	r0, #0
   82ee6:	f818 3b01 	ldrb.w	r3, [r8], #1
   82eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82eee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82ef2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82ef6:	2a09      	cmp	r2, #9
   82ef8:	d9f5      	bls.n	82ee6 <_vfiprintf_r+0x41e>
   82efa:	e654      	b.n	82ba6 <_vfiprintf_r+0xde>
   82efc:	f04a 0a10 	orr.w	sl, sl, #16
   82f00:	f01a 0f20 	tst.w	sl, #32
   82f04:	9004      	str	r0, [sp, #16]
   82f06:	46ac      	mov	ip, r5
   82f08:	f47f af73 	bne.w	82df2 <_vfiprintf_r+0x32a>
   82f0c:	f01a 0f10 	tst.w	sl, #16
   82f10:	f040 82ef 	bne.w	834f2 <_vfiprintf_r+0xa2a>
   82f14:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82f18:	f000 82eb 	beq.w	834f2 <_vfiprintf_r+0xa2a>
   82f1c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f20:	2500      	movs	r5, #0
   82f22:	f8bb 4000 	ldrh.w	r4, [fp]
   82f26:	f10b 0b04 	add.w	fp, fp, #4
   82f2a:	2301      	movs	r3, #1
   82f2c:	f8cd b020 	str.w	fp, [sp, #32]
   82f30:	e6db      	b.n	82cea <_vfiprintf_r+0x222>
   82f32:	46ac      	mov	ip, r5
   82f34:	4d51      	ldr	r5, [pc, #324]	; (8307c <_vfiprintf_r+0x5b4>)
   82f36:	f01a 0f20 	tst.w	sl, #32
   82f3a:	9004      	str	r0, [sp, #16]
   82f3c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f40:	950a      	str	r5, [sp, #40]	; 0x28
   82f42:	f000 80f0 	beq.w	83126 <_vfiprintf_r+0x65e>
   82f46:	9d08      	ldr	r5, [sp, #32]
   82f48:	1dea      	adds	r2, r5, #7
   82f4a:	f022 0207 	bic.w	r2, r2, #7
   82f4e:	f102 0b08 	add.w	fp, r2, #8
   82f52:	f8cd b020 	str.w	fp, [sp, #32]
   82f56:	e9d2 4500 	ldrd	r4, r5, [r2]
   82f5a:	f01a 0f01 	tst.w	sl, #1
   82f5e:	f000 82aa 	beq.w	834b6 <_vfiprintf_r+0x9ee>
   82f62:	ea54 0b05 	orrs.w	fp, r4, r5
   82f66:	f000 82a6 	beq.w	834b6 <_vfiprintf_r+0x9ee>
   82f6a:	2230      	movs	r2, #48	; 0x30
   82f6c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82f70:	f04a 0a02 	orr.w	sl, sl, #2
   82f74:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82f78:	2302      	movs	r3, #2
   82f7a:	e6b6      	b.n	82cea <_vfiprintf_r+0x222>
   82f7c:	9b08      	ldr	r3, [sp, #32]
   82f7e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f82:	681b      	ldr	r3, [r3, #0]
   82f84:	2401      	movs	r4, #1
   82f86:	f04f 0500 	mov.w	r5, #0
   82f8a:	f10b 0b04 	add.w	fp, fp, #4
   82f8e:	9004      	str	r0, [sp, #16]
   82f90:	9403      	str	r4, [sp, #12]
   82f92:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82f96:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82f9a:	f8cd b020 	str.w	fp, [sp, #32]
   82f9e:	9405      	str	r4, [sp, #20]
   82fa0:	af16      	add	r7, sp, #88	; 0x58
   82fa2:	f04f 0c00 	mov.w	ip, #0
   82fa6:	e6d0      	b.n	82d4a <_vfiprintf_r+0x282>
   82fa8:	f01a 0f20 	tst.w	sl, #32
   82fac:	9004      	str	r0, [sp, #16]
   82fae:	46ac      	mov	ip, r5
   82fb0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82fb4:	f47f af38 	bne.w	82e28 <_vfiprintf_r+0x360>
   82fb8:	f01a 0f10 	tst.w	sl, #16
   82fbc:	f040 82a7 	bne.w	8350e <_vfiprintf_r+0xa46>
   82fc0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82fc4:	f000 82a3 	beq.w	8350e <_vfiprintf_r+0xa46>
   82fc8:	f8dd b020 	ldr.w	fp, [sp, #32]
   82fcc:	f9bb 4000 	ldrsh.w	r4, [fp]
   82fd0:	f10b 0b04 	add.w	fp, fp, #4
   82fd4:	17e5      	asrs	r5, r4, #31
   82fd6:	4622      	mov	r2, r4
   82fd8:	462b      	mov	r3, r5
   82fda:	f8cd b020 	str.w	fp, [sp, #32]
   82fde:	e72d      	b.n	82e3c <_vfiprintf_r+0x374>
   82fe0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82fe4:	f898 3000 	ldrb.w	r3, [r8]
   82fe8:	e5db      	b.n	82ba2 <_vfiprintf_r+0xda>
   82fea:	f898 3000 	ldrb.w	r3, [r8]
   82fee:	4642      	mov	r2, r8
   82ff0:	2b6c      	cmp	r3, #108	; 0x6c
   82ff2:	bf03      	ittte	eq
   82ff4:	f108 0801 	addeq.w	r8, r8, #1
   82ff8:	f04a 0a20 	orreq.w	sl, sl, #32
   82ffc:	7853      	ldrbeq	r3, [r2, #1]
   82ffe:	f04a 0a10 	orrne.w	sl, sl, #16
   83002:	e5ce      	b.n	82ba2 <_vfiprintf_r+0xda>
   83004:	f01a 0f20 	tst.w	sl, #32
   83008:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8300c:	f000 82f7 	beq.w	835fe <_vfiprintf_r+0xb36>
   83010:	9c08      	ldr	r4, [sp, #32]
   83012:	6821      	ldr	r1, [r4, #0]
   83014:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83016:	17e5      	asrs	r5, r4, #31
   83018:	462b      	mov	r3, r5
   8301a:	9d08      	ldr	r5, [sp, #32]
   8301c:	4622      	mov	r2, r4
   8301e:	3504      	adds	r5, #4
   83020:	9508      	str	r5, [sp, #32]
   83022:	e9c1 2300 	strd	r2, r3, [r1]
   83026:	e582      	b.n	82b2e <_vfiprintf_r+0x66>
   83028:	9c08      	ldr	r4, [sp, #32]
   8302a:	46ac      	mov	ip, r5
   8302c:	6827      	ldr	r7, [r4, #0]
   8302e:	f04f 0500 	mov.w	r5, #0
   83032:	9004      	str	r0, [sp, #16]
   83034:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83038:	3404      	adds	r4, #4
   8303a:	2f00      	cmp	r7, #0
   8303c:	f000 8332 	beq.w	836a4 <_vfiprintf_r+0xbdc>
   83040:	f1bc 0f00 	cmp.w	ip, #0
   83044:	4638      	mov	r0, r7
   83046:	f2c0 8307 	blt.w	83658 <_vfiprintf_r+0xb90>
   8304a:	4662      	mov	r2, ip
   8304c:	2100      	movs	r1, #0
   8304e:	f8cd c004 	str.w	ip, [sp, #4]
   83052:	f001 fc05 	bl	84860 <memchr>
   83056:	f8dd c004 	ldr.w	ip, [sp, #4]
   8305a:	2800      	cmp	r0, #0
   8305c:	f000 833a 	beq.w	836d4 <_vfiprintf_r+0xc0c>
   83060:	1bc0      	subs	r0, r0, r7
   83062:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83066:	4560      	cmp	r0, ip
   83068:	bfa8      	it	ge
   8306a:	4660      	movge	r0, ip
   8306c:	9005      	str	r0, [sp, #20]
   8306e:	9408      	str	r4, [sp, #32]
   83070:	9507      	str	r5, [sp, #28]
   83072:	f04f 0c00 	mov.w	ip, #0
   83076:	e65b      	b.n	82d30 <_vfiprintf_r+0x268>
   83078:	00085b28 	.word	0x00085b28
   8307c:	00085ae8 	.word	0x00085ae8
   83080:	9b08      	ldr	r3, [sp, #32]
   83082:	f8dd b020 	ldr.w	fp, [sp, #32]
   83086:	9004      	str	r0, [sp, #16]
   83088:	48b2      	ldr	r0, [pc, #712]	; (83354 <_vfiprintf_r+0x88c>)
   8308a:	681c      	ldr	r4, [r3, #0]
   8308c:	2230      	movs	r2, #48	; 0x30
   8308e:	2378      	movs	r3, #120	; 0x78
   83090:	f10b 0b04 	add.w	fp, fp, #4
   83094:	46ac      	mov	ip, r5
   83096:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8309a:	f04a 0a02 	orr.w	sl, sl, #2
   8309e:	f8cd b020 	str.w	fp, [sp, #32]
   830a2:	2500      	movs	r5, #0
   830a4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   830a8:	900a      	str	r0, [sp, #40]	; 0x28
   830aa:	2302      	movs	r3, #2
   830ac:	e61d      	b.n	82cea <_vfiprintf_r+0x222>
   830ae:	f04a 0a20 	orr.w	sl, sl, #32
   830b2:	f898 3000 	ldrb.w	r3, [r8]
   830b6:	e574      	b.n	82ba2 <_vfiprintf_r+0xda>
   830b8:	f8dd b020 	ldr.w	fp, [sp, #32]
   830bc:	f8db 0000 	ldr.w	r0, [fp]
   830c0:	f10b 0304 	add.w	r3, fp, #4
   830c4:	2800      	cmp	r0, #0
   830c6:	f6ff adf7 	blt.w	82cb8 <_vfiprintf_r+0x1f0>
   830ca:	9308      	str	r3, [sp, #32]
   830cc:	f898 3000 	ldrb.w	r3, [r8]
   830d0:	e567      	b.n	82ba2 <_vfiprintf_r+0xda>
   830d2:	f898 3000 	ldrb.w	r3, [r8]
   830d6:	212b      	movs	r1, #43	; 0x2b
   830d8:	e563      	b.n	82ba2 <_vfiprintf_r+0xda>
   830da:	f898 3000 	ldrb.w	r3, [r8]
   830de:	f108 0401 	add.w	r4, r8, #1
   830e2:	2b2a      	cmp	r3, #42	; 0x2a
   830e4:	f000 8305 	beq.w	836f2 <_vfiprintf_r+0xc2a>
   830e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   830ec:	2a09      	cmp	r2, #9
   830ee:	bf98      	it	ls
   830f0:	2500      	movls	r5, #0
   830f2:	f200 82fa 	bhi.w	836ea <_vfiprintf_r+0xc22>
   830f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   830fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   830fe:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83102:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83106:	2a09      	cmp	r2, #9
   83108:	d9f5      	bls.n	830f6 <_vfiprintf_r+0x62e>
   8310a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8310e:	46a0      	mov	r8, r4
   83110:	e549      	b.n	82ba6 <_vfiprintf_r+0xde>
   83112:	4c90      	ldr	r4, [pc, #576]	; (83354 <_vfiprintf_r+0x88c>)
   83114:	f01a 0f20 	tst.w	sl, #32
   83118:	9004      	str	r0, [sp, #16]
   8311a:	46ac      	mov	ip, r5
   8311c:	940a      	str	r4, [sp, #40]	; 0x28
   8311e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83122:	f47f af10 	bne.w	82f46 <_vfiprintf_r+0x47e>
   83126:	f01a 0f10 	tst.w	sl, #16
   8312a:	f040 81ea 	bne.w	83502 <_vfiprintf_r+0xa3a>
   8312e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83132:	f000 81e6 	beq.w	83502 <_vfiprintf_r+0xa3a>
   83136:	f8dd b020 	ldr.w	fp, [sp, #32]
   8313a:	2500      	movs	r5, #0
   8313c:	f8bb 4000 	ldrh.w	r4, [fp]
   83140:	f10b 0b04 	add.w	fp, fp, #4
   83144:	f8cd b020 	str.w	fp, [sp, #32]
   83148:	e707      	b.n	82f5a <_vfiprintf_r+0x492>
   8314a:	f898 3000 	ldrb.w	r3, [r8]
   8314e:	2900      	cmp	r1, #0
   83150:	f47f ad27 	bne.w	82ba2 <_vfiprintf_r+0xda>
   83154:	2120      	movs	r1, #32
   83156:	e524      	b.n	82ba2 <_vfiprintf_r+0xda>
   83158:	f04a 0a01 	orr.w	sl, sl, #1
   8315c:	f898 3000 	ldrb.w	r3, [r8]
   83160:	e51f      	b.n	82ba2 <_vfiprintf_r+0xda>
   83162:	9004      	str	r0, [sp, #16]
   83164:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83168:	2b00      	cmp	r3, #0
   8316a:	f000 80f9 	beq.w	83360 <_vfiprintf_r+0x898>
   8316e:	2501      	movs	r5, #1
   83170:	f04f 0b00 	mov.w	fp, #0
   83174:	9503      	str	r5, [sp, #12]
   83176:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8317a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8317e:	9505      	str	r5, [sp, #20]
   83180:	af16      	add	r7, sp, #88	; 0x58
   83182:	e70e      	b.n	82fa2 <_vfiprintf_r+0x4da>
   83184:	9806      	ldr	r0, [sp, #24]
   83186:	9902      	ldr	r1, [sp, #8]
   83188:	aa13      	add	r2, sp, #76	; 0x4c
   8318a:	f7ff fc61 	bl	82a50 <__sprint_r.part.0>
   8318e:	2800      	cmp	r0, #0
   83190:	f040 80ed 	bne.w	8336e <_vfiprintf_r+0x8a6>
   83194:	9814      	ldr	r0, [sp, #80]	; 0x50
   83196:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83198:	1c43      	adds	r3, r0, #1
   8319a:	46cc      	mov	ip, r9
   8319c:	e5fe      	b.n	82d9c <_vfiprintf_r+0x2d4>
   8319e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   831a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   831a2:	1c59      	adds	r1, r3, #1
   831a4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   831a8:	b168      	cbz	r0, 831c6 <_vfiprintf_r+0x6fe>
   831aa:	3201      	adds	r2, #1
   831ac:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   831b0:	2301      	movs	r3, #1
   831b2:	2907      	cmp	r1, #7
   831b4:	9215      	str	r2, [sp, #84]	; 0x54
   831b6:	9114      	str	r1, [sp, #80]	; 0x50
   831b8:	e886 0009 	stmia.w	r6, {r0, r3}
   831bc:	f300 8160 	bgt.w	83480 <_vfiprintf_r+0x9b8>
   831c0:	460b      	mov	r3, r1
   831c2:	3608      	adds	r6, #8
   831c4:	3101      	adds	r1, #1
   831c6:	9c07      	ldr	r4, [sp, #28]
   831c8:	b164      	cbz	r4, 831e4 <_vfiprintf_r+0x71c>
   831ca:	3202      	adds	r2, #2
   831cc:	a812      	add	r0, sp, #72	; 0x48
   831ce:	2302      	movs	r3, #2
   831d0:	2907      	cmp	r1, #7
   831d2:	9215      	str	r2, [sp, #84]	; 0x54
   831d4:	9114      	str	r1, [sp, #80]	; 0x50
   831d6:	e886 0009 	stmia.w	r6, {r0, r3}
   831da:	f300 8157 	bgt.w	8348c <_vfiprintf_r+0x9c4>
   831de:	460b      	mov	r3, r1
   831e0:	3608      	adds	r6, #8
   831e2:	3101      	adds	r1, #1
   831e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   831e6:	2d80      	cmp	r5, #128	; 0x80
   831e8:	f000 8101 	beq.w	833ee <_vfiprintf_r+0x926>
   831ec:	9d05      	ldr	r5, [sp, #20]
   831ee:	ebc5 040c 	rsb	r4, r5, ip
   831f2:	2c00      	cmp	r4, #0
   831f4:	dd2f      	ble.n	83256 <_vfiprintf_r+0x78e>
   831f6:	2c10      	cmp	r4, #16
   831f8:	4d57      	ldr	r5, [pc, #348]	; (83358 <_vfiprintf_r+0x890>)
   831fa:	dd22      	ble.n	83242 <_vfiprintf_r+0x77a>
   831fc:	4630      	mov	r0, r6
   831fe:	f04f 0b10 	mov.w	fp, #16
   83202:	462e      	mov	r6, r5
   83204:	4625      	mov	r5, r4
   83206:	9c06      	ldr	r4, [sp, #24]
   83208:	e006      	b.n	83218 <_vfiprintf_r+0x750>
   8320a:	f103 0c02 	add.w	ip, r3, #2
   8320e:	3008      	adds	r0, #8
   83210:	460b      	mov	r3, r1
   83212:	3d10      	subs	r5, #16
   83214:	2d10      	cmp	r5, #16
   83216:	dd10      	ble.n	8323a <_vfiprintf_r+0x772>
   83218:	1c59      	adds	r1, r3, #1
   8321a:	3210      	adds	r2, #16
   8321c:	2907      	cmp	r1, #7
   8321e:	9215      	str	r2, [sp, #84]	; 0x54
   83220:	e880 0840 	stmia.w	r0, {r6, fp}
   83224:	9114      	str	r1, [sp, #80]	; 0x50
   83226:	ddf0      	ble.n	8320a <_vfiprintf_r+0x742>
   83228:	2a00      	cmp	r2, #0
   8322a:	d163      	bne.n	832f4 <_vfiprintf_r+0x82c>
   8322c:	3d10      	subs	r5, #16
   8322e:	2d10      	cmp	r5, #16
   83230:	f04f 0c01 	mov.w	ip, #1
   83234:	4613      	mov	r3, r2
   83236:	4648      	mov	r0, r9
   83238:	dcee      	bgt.n	83218 <_vfiprintf_r+0x750>
   8323a:	462c      	mov	r4, r5
   8323c:	4661      	mov	r1, ip
   8323e:	4635      	mov	r5, r6
   83240:	4606      	mov	r6, r0
   83242:	4422      	add	r2, r4
   83244:	2907      	cmp	r1, #7
   83246:	9215      	str	r2, [sp, #84]	; 0x54
   83248:	6035      	str	r5, [r6, #0]
   8324a:	6074      	str	r4, [r6, #4]
   8324c:	9114      	str	r1, [sp, #80]	; 0x50
   8324e:	f300 80c1 	bgt.w	833d4 <_vfiprintf_r+0x90c>
   83252:	3608      	adds	r6, #8
   83254:	3101      	adds	r1, #1
   83256:	9d05      	ldr	r5, [sp, #20]
   83258:	2907      	cmp	r1, #7
   8325a:	442a      	add	r2, r5
   8325c:	9215      	str	r2, [sp, #84]	; 0x54
   8325e:	6037      	str	r7, [r6, #0]
   83260:	6075      	str	r5, [r6, #4]
   83262:	9114      	str	r1, [sp, #80]	; 0x50
   83264:	f340 80c1 	ble.w	833ea <_vfiprintf_r+0x922>
   83268:	2a00      	cmp	r2, #0
   8326a:	f040 8130 	bne.w	834ce <_vfiprintf_r+0xa06>
   8326e:	9214      	str	r2, [sp, #80]	; 0x50
   83270:	464e      	mov	r6, r9
   83272:	f01a 0f04 	tst.w	sl, #4
   83276:	f000 808b 	beq.w	83390 <_vfiprintf_r+0x8c8>
   8327a:	9d04      	ldr	r5, [sp, #16]
   8327c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83280:	ebcb 0405 	rsb	r4, fp, r5
   83284:	2c00      	cmp	r4, #0
   83286:	f340 8083 	ble.w	83390 <_vfiprintf_r+0x8c8>
   8328a:	2c10      	cmp	r4, #16
   8328c:	f340 821e 	ble.w	836cc <_vfiprintf_r+0xc04>
   83290:	9914      	ldr	r1, [sp, #80]	; 0x50
   83292:	4d32      	ldr	r5, [pc, #200]	; (8335c <_vfiprintf_r+0x894>)
   83294:	2710      	movs	r7, #16
   83296:	f8dd a018 	ldr.w	sl, [sp, #24]
   8329a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8329e:	e005      	b.n	832ac <_vfiprintf_r+0x7e4>
   832a0:	1c88      	adds	r0, r1, #2
   832a2:	3608      	adds	r6, #8
   832a4:	4619      	mov	r1, r3
   832a6:	3c10      	subs	r4, #16
   832a8:	2c10      	cmp	r4, #16
   832aa:	dd10      	ble.n	832ce <_vfiprintf_r+0x806>
   832ac:	1c4b      	adds	r3, r1, #1
   832ae:	3210      	adds	r2, #16
   832b0:	2b07      	cmp	r3, #7
   832b2:	9215      	str	r2, [sp, #84]	; 0x54
   832b4:	e886 00a0 	stmia.w	r6, {r5, r7}
   832b8:	9314      	str	r3, [sp, #80]	; 0x50
   832ba:	ddf1      	ble.n	832a0 <_vfiprintf_r+0x7d8>
   832bc:	2a00      	cmp	r2, #0
   832be:	d17d      	bne.n	833bc <_vfiprintf_r+0x8f4>
   832c0:	3c10      	subs	r4, #16
   832c2:	2c10      	cmp	r4, #16
   832c4:	f04f 0001 	mov.w	r0, #1
   832c8:	4611      	mov	r1, r2
   832ca:	464e      	mov	r6, r9
   832cc:	dcee      	bgt.n	832ac <_vfiprintf_r+0x7e4>
   832ce:	4422      	add	r2, r4
   832d0:	2807      	cmp	r0, #7
   832d2:	9215      	str	r2, [sp, #84]	; 0x54
   832d4:	6035      	str	r5, [r6, #0]
   832d6:	6074      	str	r4, [r6, #4]
   832d8:	9014      	str	r0, [sp, #80]	; 0x50
   832da:	dd59      	ble.n	83390 <_vfiprintf_r+0x8c8>
   832dc:	2a00      	cmp	r2, #0
   832de:	d14f      	bne.n	83380 <_vfiprintf_r+0x8b8>
   832e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   832e2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   832e6:	9d04      	ldr	r5, [sp, #16]
   832e8:	45ab      	cmp	fp, r5
   832ea:	bfac      	ite	ge
   832ec:	445c      	addge	r4, fp
   832ee:	1964      	addlt	r4, r4, r5
   832f0:	9409      	str	r4, [sp, #36]	; 0x24
   832f2:	e05e      	b.n	833b2 <_vfiprintf_r+0x8ea>
   832f4:	4620      	mov	r0, r4
   832f6:	9902      	ldr	r1, [sp, #8]
   832f8:	aa13      	add	r2, sp, #76	; 0x4c
   832fa:	f7ff fba9 	bl	82a50 <__sprint_r.part.0>
   832fe:	2800      	cmp	r0, #0
   83300:	d135      	bne.n	8336e <_vfiprintf_r+0x8a6>
   83302:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83304:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83306:	f103 0c01 	add.w	ip, r3, #1
   8330a:	4648      	mov	r0, r9
   8330c:	e781      	b.n	83212 <_vfiprintf_r+0x74a>
   8330e:	08e0      	lsrs	r0, r4, #3
   83310:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83314:	f004 0207 	and.w	r2, r4, #7
   83318:	08e9      	lsrs	r1, r5, #3
   8331a:	3230      	adds	r2, #48	; 0x30
   8331c:	ea50 0b01 	orrs.w	fp, r0, r1
   83320:	461f      	mov	r7, r3
   83322:	701a      	strb	r2, [r3, #0]
   83324:	4604      	mov	r4, r0
   83326:	460d      	mov	r5, r1
   83328:	f103 33ff 	add.w	r3, r3, #4294967295
   8332c:	d1ef      	bne.n	8330e <_vfiprintf_r+0x846>
   8332e:	f01a 0f01 	tst.w	sl, #1
   83332:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   83336:	4639      	mov	r1, r7
   83338:	f000 80b9 	beq.w	834ae <_vfiprintf_r+0x9e6>
   8333c:	2a30      	cmp	r2, #48	; 0x30
   8333e:	f43f acf4 	beq.w	82d2a <_vfiprintf_r+0x262>
   83342:	461f      	mov	r7, r3
   83344:	ebc7 0509 	rsb	r5, r7, r9
   83348:	2330      	movs	r3, #48	; 0x30
   8334a:	9505      	str	r5, [sp, #20]
   8334c:	f801 3c01 	strb.w	r3, [r1, #-1]
   83350:	e4ee      	b.n	82d30 <_vfiprintf_r+0x268>
   83352:	bf00      	nop
   83354:	00085afc 	.word	0x00085afc
   83358:	00085b18 	.word	0x00085b18
   8335c:	00085b28 	.word	0x00085b28
   83360:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83362:	b123      	cbz	r3, 8336e <_vfiprintf_r+0x8a6>
   83364:	9806      	ldr	r0, [sp, #24]
   83366:	9902      	ldr	r1, [sp, #8]
   83368:	aa13      	add	r2, sp, #76	; 0x4c
   8336a:	f7ff fb71 	bl	82a50 <__sprint_r.part.0>
   8336e:	9c02      	ldr	r4, [sp, #8]
   83370:	89a3      	ldrh	r3, [r4, #12]
   83372:	065b      	lsls	r3, r3, #25
   83374:	f53f ac98 	bmi.w	82ca8 <_vfiprintf_r+0x1e0>
   83378:	9809      	ldr	r0, [sp, #36]	; 0x24
   8337a:	b031      	add	sp, #196	; 0xc4
   8337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83380:	9806      	ldr	r0, [sp, #24]
   83382:	9902      	ldr	r1, [sp, #8]
   83384:	aa13      	add	r2, sp, #76	; 0x4c
   83386:	f7ff fb63 	bl	82a50 <__sprint_r.part.0>
   8338a:	2800      	cmp	r0, #0
   8338c:	d1ef      	bne.n	8336e <_vfiprintf_r+0x8a6>
   8338e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83390:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83392:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83396:	9d04      	ldr	r5, [sp, #16]
   83398:	45ab      	cmp	fp, r5
   8339a:	bfac      	ite	ge
   8339c:	445c      	addge	r4, fp
   8339e:	1964      	addlt	r4, r4, r5
   833a0:	9409      	str	r4, [sp, #36]	; 0x24
   833a2:	b132      	cbz	r2, 833b2 <_vfiprintf_r+0x8ea>
   833a4:	9806      	ldr	r0, [sp, #24]
   833a6:	9902      	ldr	r1, [sp, #8]
   833a8:	aa13      	add	r2, sp, #76	; 0x4c
   833aa:	f7ff fb51 	bl	82a50 <__sprint_r.part.0>
   833ae:	2800      	cmp	r0, #0
   833b0:	d1dd      	bne.n	8336e <_vfiprintf_r+0x8a6>
   833b2:	2000      	movs	r0, #0
   833b4:	9014      	str	r0, [sp, #80]	; 0x50
   833b6:	464e      	mov	r6, r9
   833b8:	f7ff bbb9 	b.w	82b2e <_vfiprintf_r+0x66>
   833bc:	4650      	mov	r0, sl
   833be:	4659      	mov	r1, fp
   833c0:	aa13      	add	r2, sp, #76	; 0x4c
   833c2:	f7ff fb45 	bl	82a50 <__sprint_r.part.0>
   833c6:	2800      	cmp	r0, #0
   833c8:	d1d1      	bne.n	8336e <_vfiprintf_r+0x8a6>
   833ca:	9914      	ldr	r1, [sp, #80]	; 0x50
   833cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833ce:	1c48      	adds	r0, r1, #1
   833d0:	464e      	mov	r6, r9
   833d2:	e768      	b.n	832a6 <_vfiprintf_r+0x7de>
   833d4:	2a00      	cmp	r2, #0
   833d6:	f040 80f7 	bne.w	835c8 <_vfiprintf_r+0xb00>
   833da:	9c05      	ldr	r4, [sp, #20]
   833dc:	2301      	movs	r3, #1
   833de:	9720      	str	r7, [sp, #128]	; 0x80
   833e0:	9421      	str	r4, [sp, #132]	; 0x84
   833e2:	9415      	str	r4, [sp, #84]	; 0x54
   833e4:	4622      	mov	r2, r4
   833e6:	9314      	str	r3, [sp, #80]	; 0x50
   833e8:	464e      	mov	r6, r9
   833ea:	3608      	adds	r6, #8
   833ec:	e741      	b.n	83272 <_vfiprintf_r+0x7aa>
   833ee:	9d04      	ldr	r5, [sp, #16]
   833f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   833f4:	ebcb 0405 	rsb	r4, fp, r5
   833f8:	2c00      	cmp	r4, #0
   833fa:	f77f aef7 	ble.w	831ec <_vfiprintf_r+0x724>
   833fe:	2c10      	cmp	r4, #16
   83400:	4da6      	ldr	r5, [pc, #664]	; (8369c <_vfiprintf_r+0xbd4>)
   83402:	f340 8170 	ble.w	836e6 <_vfiprintf_r+0xc1e>
   83406:	4629      	mov	r1, r5
   83408:	f04f 0b10 	mov.w	fp, #16
   8340c:	4625      	mov	r5, r4
   8340e:	4664      	mov	r4, ip
   83410:	46b4      	mov	ip, r6
   83412:	460e      	mov	r6, r1
   83414:	e006      	b.n	83424 <_vfiprintf_r+0x95c>
   83416:	1c98      	adds	r0, r3, #2
   83418:	f10c 0c08 	add.w	ip, ip, #8
   8341c:	460b      	mov	r3, r1
   8341e:	3d10      	subs	r5, #16
   83420:	2d10      	cmp	r5, #16
   83422:	dd0f      	ble.n	83444 <_vfiprintf_r+0x97c>
   83424:	1c59      	adds	r1, r3, #1
   83426:	3210      	adds	r2, #16
   83428:	2907      	cmp	r1, #7
   8342a:	9215      	str	r2, [sp, #84]	; 0x54
   8342c:	e88c 0840 	stmia.w	ip, {r6, fp}
   83430:	9114      	str	r1, [sp, #80]	; 0x50
   83432:	ddf0      	ble.n	83416 <_vfiprintf_r+0x94e>
   83434:	b9ba      	cbnz	r2, 83466 <_vfiprintf_r+0x99e>
   83436:	3d10      	subs	r5, #16
   83438:	2d10      	cmp	r5, #16
   8343a:	f04f 0001 	mov.w	r0, #1
   8343e:	4613      	mov	r3, r2
   83440:	46cc      	mov	ip, r9
   83442:	dcef      	bgt.n	83424 <_vfiprintf_r+0x95c>
   83444:	4633      	mov	r3, r6
   83446:	4666      	mov	r6, ip
   83448:	46a4      	mov	ip, r4
   8344a:	462c      	mov	r4, r5
   8344c:	461d      	mov	r5, r3
   8344e:	4422      	add	r2, r4
   83450:	2807      	cmp	r0, #7
   83452:	9215      	str	r2, [sp, #84]	; 0x54
   83454:	6035      	str	r5, [r6, #0]
   83456:	6074      	str	r4, [r6, #4]
   83458:	9014      	str	r0, [sp, #80]	; 0x50
   8345a:	f300 80af 	bgt.w	835bc <_vfiprintf_r+0xaf4>
   8345e:	3608      	adds	r6, #8
   83460:	1c41      	adds	r1, r0, #1
   83462:	4603      	mov	r3, r0
   83464:	e6c2      	b.n	831ec <_vfiprintf_r+0x724>
   83466:	9806      	ldr	r0, [sp, #24]
   83468:	9902      	ldr	r1, [sp, #8]
   8346a:	aa13      	add	r2, sp, #76	; 0x4c
   8346c:	f7ff faf0 	bl	82a50 <__sprint_r.part.0>
   83470:	2800      	cmp	r0, #0
   83472:	f47f af7c 	bne.w	8336e <_vfiprintf_r+0x8a6>
   83476:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83478:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8347a:	1c58      	adds	r0, r3, #1
   8347c:	46cc      	mov	ip, r9
   8347e:	e7ce      	b.n	8341e <_vfiprintf_r+0x956>
   83480:	2a00      	cmp	r2, #0
   83482:	d179      	bne.n	83578 <_vfiprintf_r+0xab0>
   83484:	4619      	mov	r1, r3
   83486:	464e      	mov	r6, r9
   83488:	4613      	mov	r3, r2
   8348a:	e69c      	b.n	831c6 <_vfiprintf_r+0x6fe>
   8348c:	2a00      	cmp	r2, #0
   8348e:	f040 8084 	bne.w	8359a <_vfiprintf_r+0xad2>
   83492:	2101      	movs	r1, #1
   83494:	4613      	mov	r3, r2
   83496:	464e      	mov	r6, r9
   83498:	e6a4      	b.n	831e4 <_vfiprintf_r+0x71c>
   8349a:	464f      	mov	r7, r9
   8349c:	e448      	b.n	82d30 <_vfiprintf_r+0x268>
   8349e:	2d00      	cmp	r5, #0
   834a0:	bf08      	it	eq
   834a2:	2c0a      	cmpeq	r4, #10
   834a4:	d246      	bcs.n	83534 <_vfiprintf_r+0xa6c>
   834a6:	3430      	adds	r4, #48	; 0x30
   834a8:	af30      	add	r7, sp, #192	; 0xc0
   834aa:	f807 4d41 	strb.w	r4, [r7, #-65]!
   834ae:	ebc7 0309 	rsb	r3, r7, r9
   834b2:	9305      	str	r3, [sp, #20]
   834b4:	e43c      	b.n	82d30 <_vfiprintf_r+0x268>
   834b6:	2302      	movs	r3, #2
   834b8:	e417      	b.n	82cea <_vfiprintf_r+0x222>
   834ba:	2a00      	cmp	r2, #0
   834bc:	f040 80af 	bne.w	8361e <_vfiprintf_r+0xb56>
   834c0:	4613      	mov	r3, r2
   834c2:	2101      	movs	r1, #1
   834c4:	464e      	mov	r6, r9
   834c6:	e66d      	b.n	831a4 <_vfiprintf_r+0x6dc>
   834c8:	4644      	mov	r4, r8
   834ca:	f7ff bb58 	b.w	82b7e <_vfiprintf_r+0xb6>
   834ce:	9806      	ldr	r0, [sp, #24]
   834d0:	9902      	ldr	r1, [sp, #8]
   834d2:	aa13      	add	r2, sp, #76	; 0x4c
   834d4:	f7ff fabc 	bl	82a50 <__sprint_r.part.0>
   834d8:	2800      	cmp	r0, #0
   834da:	f47f af48 	bne.w	8336e <_vfiprintf_r+0x8a6>
   834de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   834e0:	464e      	mov	r6, r9
   834e2:	e6c6      	b.n	83272 <_vfiprintf_r+0x7aa>
   834e4:	9d08      	ldr	r5, [sp, #32]
   834e6:	682c      	ldr	r4, [r5, #0]
   834e8:	3504      	adds	r5, #4
   834ea:	9508      	str	r5, [sp, #32]
   834ec:	2500      	movs	r5, #0
   834ee:	f7ff bbfc 	b.w	82cea <_vfiprintf_r+0x222>
   834f2:	9d08      	ldr	r5, [sp, #32]
   834f4:	2301      	movs	r3, #1
   834f6:	682c      	ldr	r4, [r5, #0]
   834f8:	3504      	adds	r5, #4
   834fa:	9508      	str	r5, [sp, #32]
   834fc:	2500      	movs	r5, #0
   834fe:	f7ff bbf4 	b.w	82cea <_vfiprintf_r+0x222>
   83502:	9d08      	ldr	r5, [sp, #32]
   83504:	682c      	ldr	r4, [r5, #0]
   83506:	3504      	adds	r5, #4
   83508:	9508      	str	r5, [sp, #32]
   8350a:	2500      	movs	r5, #0
   8350c:	e525      	b.n	82f5a <_vfiprintf_r+0x492>
   8350e:	9d08      	ldr	r5, [sp, #32]
   83510:	682c      	ldr	r4, [r5, #0]
   83512:	3504      	adds	r5, #4
   83514:	9508      	str	r5, [sp, #32]
   83516:	17e5      	asrs	r5, r4, #31
   83518:	4622      	mov	r2, r4
   8351a:	462b      	mov	r3, r5
   8351c:	e48e      	b.n	82e3c <_vfiprintf_r+0x374>
   8351e:	9806      	ldr	r0, [sp, #24]
   83520:	9902      	ldr	r1, [sp, #8]
   83522:	aa13      	add	r2, sp, #76	; 0x4c
   83524:	f7ff fa94 	bl	82a50 <__sprint_r.part.0>
   83528:	2800      	cmp	r0, #0
   8352a:	f47f af20 	bne.w	8336e <_vfiprintf_r+0x8a6>
   8352e:	464e      	mov	r6, r9
   83530:	f7ff bb9a 	b.w	82c68 <_vfiprintf_r+0x1a0>
   83534:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   83538:	9603      	str	r6, [sp, #12]
   8353a:	465e      	mov	r6, fp
   8353c:	46e3      	mov	fp, ip
   8353e:	4620      	mov	r0, r4
   83540:	4629      	mov	r1, r5
   83542:	220a      	movs	r2, #10
   83544:	2300      	movs	r3, #0
   83546:	f001 fe2f 	bl	851a8 <__aeabi_uldivmod>
   8354a:	3230      	adds	r2, #48	; 0x30
   8354c:	7032      	strb	r2, [r6, #0]
   8354e:	4620      	mov	r0, r4
   83550:	4629      	mov	r1, r5
   83552:	220a      	movs	r2, #10
   83554:	2300      	movs	r3, #0
   83556:	f001 fe27 	bl	851a8 <__aeabi_uldivmod>
   8355a:	4604      	mov	r4, r0
   8355c:	460d      	mov	r5, r1
   8355e:	ea54 0005 	orrs.w	r0, r4, r5
   83562:	4637      	mov	r7, r6
   83564:	f106 36ff 	add.w	r6, r6, #4294967295
   83568:	d1e9      	bne.n	8353e <_vfiprintf_r+0xa76>
   8356a:	ebc7 0309 	rsb	r3, r7, r9
   8356e:	46dc      	mov	ip, fp
   83570:	9e03      	ldr	r6, [sp, #12]
   83572:	9305      	str	r3, [sp, #20]
   83574:	f7ff bbdc 	b.w	82d30 <_vfiprintf_r+0x268>
   83578:	9806      	ldr	r0, [sp, #24]
   8357a:	9902      	ldr	r1, [sp, #8]
   8357c:	aa13      	add	r2, sp, #76	; 0x4c
   8357e:	f8cd c004 	str.w	ip, [sp, #4]
   83582:	f7ff fa65 	bl	82a50 <__sprint_r.part.0>
   83586:	f8dd c004 	ldr.w	ip, [sp, #4]
   8358a:	2800      	cmp	r0, #0
   8358c:	f47f aeef 	bne.w	8336e <_vfiprintf_r+0x8a6>
   83590:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83592:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83594:	1c59      	adds	r1, r3, #1
   83596:	464e      	mov	r6, r9
   83598:	e615      	b.n	831c6 <_vfiprintf_r+0x6fe>
   8359a:	9806      	ldr	r0, [sp, #24]
   8359c:	9902      	ldr	r1, [sp, #8]
   8359e:	aa13      	add	r2, sp, #76	; 0x4c
   835a0:	f8cd c004 	str.w	ip, [sp, #4]
   835a4:	f7ff fa54 	bl	82a50 <__sprint_r.part.0>
   835a8:	f8dd c004 	ldr.w	ip, [sp, #4]
   835ac:	2800      	cmp	r0, #0
   835ae:	f47f aede 	bne.w	8336e <_vfiprintf_r+0x8a6>
   835b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   835b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835b6:	1c59      	adds	r1, r3, #1
   835b8:	464e      	mov	r6, r9
   835ba:	e613      	b.n	831e4 <_vfiprintf_r+0x71c>
   835bc:	2a00      	cmp	r2, #0
   835be:	d156      	bne.n	8366e <_vfiprintf_r+0xba6>
   835c0:	2101      	movs	r1, #1
   835c2:	4613      	mov	r3, r2
   835c4:	464e      	mov	r6, r9
   835c6:	e611      	b.n	831ec <_vfiprintf_r+0x724>
   835c8:	9806      	ldr	r0, [sp, #24]
   835ca:	9902      	ldr	r1, [sp, #8]
   835cc:	aa13      	add	r2, sp, #76	; 0x4c
   835ce:	f7ff fa3f 	bl	82a50 <__sprint_r.part.0>
   835d2:	2800      	cmp	r0, #0
   835d4:	f47f aecb 	bne.w	8336e <_vfiprintf_r+0x8a6>
   835d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   835da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835dc:	3101      	adds	r1, #1
   835de:	464e      	mov	r6, r9
   835e0:	e639      	b.n	83256 <_vfiprintf_r+0x78e>
   835e2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   835e6:	4264      	negs	r4, r4
   835e8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   835ec:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   835f0:	f8cd b01c 	str.w	fp, [sp, #28]
   835f4:	f8cd c014 	str.w	ip, [sp, #20]
   835f8:	2301      	movs	r3, #1
   835fa:	f7ff bb7e 	b.w	82cfa <_vfiprintf_r+0x232>
   835fe:	f01a 0f10 	tst.w	sl, #16
   83602:	d11d      	bne.n	83640 <_vfiprintf_r+0xb78>
   83604:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83608:	d058      	beq.n	836bc <_vfiprintf_r+0xbf4>
   8360a:	9d08      	ldr	r5, [sp, #32]
   8360c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   83610:	682b      	ldr	r3, [r5, #0]
   83612:	3504      	adds	r5, #4
   83614:	9508      	str	r5, [sp, #32]
   83616:	f8a3 b000 	strh.w	fp, [r3]
   8361a:	f7ff ba88 	b.w	82b2e <_vfiprintf_r+0x66>
   8361e:	9806      	ldr	r0, [sp, #24]
   83620:	9902      	ldr	r1, [sp, #8]
   83622:	aa13      	add	r2, sp, #76	; 0x4c
   83624:	f8cd c004 	str.w	ip, [sp, #4]
   83628:	f7ff fa12 	bl	82a50 <__sprint_r.part.0>
   8362c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83630:	2800      	cmp	r0, #0
   83632:	f47f ae9c 	bne.w	8336e <_vfiprintf_r+0x8a6>
   83636:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83638:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8363a:	1c59      	adds	r1, r3, #1
   8363c:	464e      	mov	r6, r9
   8363e:	e5b1      	b.n	831a4 <_vfiprintf_r+0x6dc>
   83640:	f8dd b020 	ldr.w	fp, [sp, #32]
   83644:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83646:	f8db 3000 	ldr.w	r3, [fp]
   8364a:	f10b 0b04 	add.w	fp, fp, #4
   8364e:	f8cd b020 	str.w	fp, [sp, #32]
   83652:	601c      	str	r4, [r3, #0]
   83654:	f7ff ba6b 	b.w	82b2e <_vfiprintf_r+0x66>
   83658:	9408      	str	r4, [sp, #32]
   8365a:	f7ff f9c9 	bl	829f0 <strlen>
   8365e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   83662:	9005      	str	r0, [sp, #20]
   83664:	9407      	str	r4, [sp, #28]
   83666:	f04f 0c00 	mov.w	ip, #0
   8366a:	f7ff bb61 	b.w	82d30 <_vfiprintf_r+0x268>
   8366e:	9806      	ldr	r0, [sp, #24]
   83670:	9902      	ldr	r1, [sp, #8]
   83672:	aa13      	add	r2, sp, #76	; 0x4c
   83674:	f8cd c004 	str.w	ip, [sp, #4]
   83678:	f7ff f9ea 	bl	82a50 <__sprint_r.part.0>
   8367c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83680:	2800      	cmp	r0, #0
   83682:	f47f ae74 	bne.w	8336e <_vfiprintf_r+0x8a6>
   83686:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83688:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8368a:	1c59      	adds	r1, r3, #1
   8368c:	464e      	mov	r6, r9
   8368e:	e5ad      	b.n	831ec <_vfiprintf_r+0x724>
   83690:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83692:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83694:	3301      	adds	r3, #1
   83696:	4d02      	ldr	r5, [pc, #8]	; (836a0 <_vfiprintf_r+0xbd8>)
   83698:	f7ff bb9a 	b.w	82dd0 <_vfiprintf_r+0x308>
   8369c:	00085b18 	.word	0x00085b18
   836a0:	00085b28 	.word	0x00085b28
   836a4:	f1bc 0f06 	cmp.w	ip, #6
   836a8:	bf34      	ite	cc
   836aa:	4663      	movcc	r3, ip
   836ac:	2306      	movcs	r3, #6
   836ae:	9408      	str	r4, [sp, #32]
   836b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   836b4:	9305      	str	r3, [sp, #20]
   836b6:	9403      	str	r4, [sp, #12]
   836b8:	4f16      	ldr	r7, [pc, #88]	; (83714 <_vfiprintf_r+0xc4c>)
   836ba:	e472      	b.n	82fa2 <_vfiprintf_r+0x4da>
   836bc:	9c08      	ldr	r4, [sp, #32]
   836be:	9d09      	ldr	r5, [sp, #36]	; 0x24
   836c0:	6823      	ldr	r3, [r4, #0]
   836c2:	3404      	adds	r4, #4
   836c4:	9408      	str	r4, [sp, #32]
   836c6:	601d      	str	r5, [r3, #0]
   836c8:	f7ff ba31 	b.w	82b2e <_vfiprintf_r+0x66>
   836cc:	9814      	ldr	r0, [sp, #80]	; 0x50
   836ce:	4d12      	ldr	r5, [pc, #72]	; (83718 <_vfiprintf_r+0xc50>)
   836d0:	3001      	adds	r0, #1
   836d2:	e5fc      	b.n	832ce <_vfiprintf_r+0x806>
   836d4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   836d8:	f8cd c014 	str.w	ip, [sp, #20]
   836dc:	9507      	str	r5, [sp, #28]
   836de:	9408      	str	r4, [sp, #32]
   836e0:	4684      	mov	ip, r0
   836e2:	f7ff bb25 	b.w	82d30 <_vfiprintf_r+0x268>
   836e6:	4608      	mov	r0, r1
   836e8:	e6b1      	b.n	8344e <_vfiprintf_r+0x986>
   836ea:	46a0      	mov	r8, r4
   836ec:	2500      	movs	r5, #0
   836ee:	f7ff ba5a 	b.w	82ba6 <_vfiprintf_r+0xde>
   836f2:	f8dd b020 	ldr.w	fp, [sp, #32]
   836f6:	f898 3001 	ldrb.w	r3, [r8, #1]
   836fa:	f8db 5000 	ldr.w	r5, [fp]
   836fe:	f10b 0204 	add.w	r2, fp, #4
   83702:	2d00      	cmp	r5, #0
   83704:	9208      	str	r2, [sp, #32]
   83706:	46a0      	mov	r8, r4
   83708:	f6bf aa4b 	bge.w	82ba2 <_vfiprintf_r+0xda>
   8370c:	f04f 35ff 	mov.w	r5, #4294967295
   83710:	f7ff ba47 	b.w	82ba2 <_vfiprintf_r+0xda>
   83714:	00085b10 	.word	0x00085b10
   83718:	00085b28 	.word	0x00085b28

0008371c <__sbprintf>:
   8371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83720:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   83722:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83726:	4688      	mov	r8, r1
   83728:	9719      	str	r7, [sp, #100]	; 0x64
   8372a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8372e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   83732:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   83736:	9707      	str	r7, [sp, #28]
   83738:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8373c:	ac1a      	add	r4, sp, #104	; 0x68
   8373e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83742:	f02a 0a02 	bic.w	sl, sl, #2
   83746:	2600      	movs	r6, #0
   83748:	4669      	mov	r1, sp
   8374a:	9400      	str	r4, [sp, #0]
   8374c:	9404      	str	r4, [sp, #16]
   8374e:	9502      	str	r5, [sp, #8]
   83750:	9505      	str	r5, [sp, #20]
   83752:	f8ad a00c 	strh.w	sl, [sp, #12]
   83756:	f8ad 900e 	strh.w	r9, [sp, #14]
   8375a:	9709      	str	r7, [sp, #36]	; 0x24
   8375c:	9606      	str	r6, [sp, #24]
   8375e:	4605      	mov	r5, r0
   83760:	f7ff f9b2 	bl	82ac8 <_vfiprintf_r>
   83764:	1e04      	subs	r4, r0, #0
   83766:	db07      	blt.n	83778 <__sbprintf+0x5c>
   83768:	4628      	mov	r0, r5
   8376a:	4669      	mov	r1, sp
   8376c:	f000 f97e 	bl	83a6c <_fflush_r>
   83770:	42b0      	cmp	r0, r6
   83772:	bf18      	it	ne
   83774:	f04f 34ff 	movne.w	r4, #4294967295
   83778:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8377c:	065b      	lsls	r3, r3, #25
   8377e:	d505      	bpl.n	8378c <__sbprintf+0x70>
   83780:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   83784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83788:	f8a8 300c 	strh.w	r3, [r8, #12]
   8378c:	4620      	mov	r0, r4
   8378e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83796:	bf00      	nop

00083798 <__swbuf_r>:
   83798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8379a:	460d      	mov	r5, r1
   8379c:	4614      	mov	r4, r2
   8379e:	4607      	mov	r7, r0
   837a0:	b110      	cbz	r0, 837a8 <__swbuf_r+0x10>
   837a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837a4:	2b00      	cmp	r3, #0
   837a6:	d048      	beq.n	8383a <__swbuf_r+0xa2>
   837a8:	89a2      	ldrh	r2, [r4, #12]
   837aa:	69a0      	ldr	r0, [r4, #24]
   837ac:	b293      	uxth	r3, r2
   837ae:	60a0      	str	r0, [r4, #8]
   837b0:	0718      	lsls	r0, r3, #28
   837b2:	d538      	bpl.n	83826 <__swbuf_r+0x8e>
   837b4:	6926      	ldr	r6, [r4, #16]
   837b6:	2e00      	cmp	r6, #0
   837b8:	d035      	beq.n	83826 <__swbuf_r+0x8e>
   837ba:	0499      	lsls	r1, r3, #18
   837bc:	b2ed      	uxtb	r5, r5
   837be:	d515      	bpl.n	837ec <__swbuf_r+0x54>
   837c0:	6823      	ldr	r3, [r4, #0]
   837c2:	6962      	ldr	r2, [r4, #20]
   837c4:	1b9e      	subs	r6, r3, r6
   837c6:	4296      	cmp	r6, r2
   837c8:	da1c      	bge.n	83804 <__swbuf_r+0x6c>
   837ca:	3601      	adds	r6, #1
   837cc:	68a2      	ldr	r2, [r4, #8]
   837ce:	1c59      	adds	r1, r3, #1
   837d0:	3a01      	subs	r2, #1
   837d2:	60a2      	str	r2, [r4, #8]
   837d4:	6021      	str	r1, [r4, #0]
   837d6:	701d      	strb	r5, [r3, #0]
   837d8:	6963      	ldr	r3, [r4, #20]
   837da:	42b3      	cmp	r3, r6
   837dc:	d01a      	beq.n	83814 <__swbuf_r+0x7c>
   837de:	89a3      	ldrh	r3, [r4, #12]
   837e0:	07db      	lsls	r3, r3, #31
   837e2:	d501      	bpl.n	837e8 <__swbuf_r+0x50>
   837e4:	2d0a      	cmp	r5, #10
   837e6:	d015      	beq.n	83814 <__swbuf_r+0x7c>
   837e8:	4628      	mov	r0, r5
   837ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   837ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   837f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   837f6:	6663      	str	r3, [r4, #100]	; 0x64
   837f8:	6823      	ldr	r3, [r4, #0]
   837fa:	81a2      	strh	r2, [r4, #12]
   837fc:	6962      	ldr	r2, [r4, #20]
   837fe:	1b9e      	subs	r6, r3, r6
   83800:	4296      	cmp	r6, r2
   83802:	dbe2      	blt.n	837ca <__swbuf_r+0x32>
   83804:	4638      	mov	r0, r7
   83806:	4621      	mov	r1, r4
   83808:	f000 f930 	bl	83a6c <_fflush_r>
   8380c:	b940      	cbnz	r0, 83820 <__swbuf_r+0x88>
   8380e:	6823      	ldr	r3, [r4, #0]
   83810:	2601      	movs	r6, #1
   83812:	e7db      	b.n	837cc <__swbuf_r+0x34>
   83814:	4638      	mov	r0, r7
   83816:	4621      	mov	r1, r4
   83818:	f000 f928 	bl	83a6c <_fflush_r>
   8381c:	2800      	cmp	r0, #0
   8381e:	d0e3      	beq.n	837e8 <__swbuf_r+0x50>
   83820:	f04f 30ff 	mov.w	r0, #4294967295
   83824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83826:	4638      	mov	r0, r7
   83828:	4621      	mov	r1, r4
   8382a:	f000 f809 	bl	83840 <__swsetup_r>
   8382e:	2800      	cmp	r0, #0
   83830:	d1f6      	bne.n	83820 <__swbuf_r+0x88>
   83832:	89a2      	ldrh	r2, [r4, #12]
   83834:	6926      	ldr	r6, [r4, #16]
   83836:	b293      	uxth	r3, r2
   83838:	e7bf      	b.n	837ba <__swbuf_r+0x22>
   8383a:	f000 f933 	bl	83aa4 <__sinit>
   8383e:	e7b3      	b.n	837a8 <__swbuf_r+0x10>

00083840 <__swsetup_r>:
   83840:	4b2f      	ldr	r3, [pc, #188]	; (83900 <__swsetup_r+0xc0>)
   83842:	b570      	push	{r4, r5, r6, lr}
   83844:	4606      	mov	r6, r0
   83846:	6818      	ldr	r0, [r3, #0]
   83848:	460c      	mov	r4, r1
   8384a:	b110      	cbz	r0, 83852 <__swsetup_r+0x12>
   8384c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8384e:	2a00      	cmp	r2, #0
   83850:	d036      	beq.n	838c0 <__swsetup_r+0x80>
   83852:	89a5      	ldrh	r5, [r4, #12]
   83854:	b2ab      	uxth	r3, r5
   83856:	0719      	lsls	r1, r3, #28
   83858:	d50c      	bpl.n	83874 <__swsetup_r+0x34>
   8385a:	6922      	ldr	r2, [r4, #16]
   8385c:	b1aa      	cbz	r2, 8388a <__swsetup_r+0x4a>
   8385e:	f013 0101 	ands.w	r1, r3, #1
   83862:	d01e      	beq.n	838a2 <__swsetup_r+0x62>
   83864:	6963      	ldr	r3, [r4, #20]
   83866:	2100      	movs	r1, #0
   83868:	425b      	negs	r3, r3
   8386a:	61a3      	str	r3, [r4, #24]
   8386c:	60a1      	str	r1, [r4, #8]
   8386e:	b1f2      	cbz	r2, 838ae <__swsetup_r+0x6e>
   83870:	2000      	movs	r0, #0
   83872:	bd70      	pop	{r4, r5, r6, pc}
   83874:	06da      	lsls	r2, r3, #27
   83876:	d53a      	bpl.n	838ee <__swsetup_r+0xae>
   83878:	075b      	lsls	r3, r3, #29
   8387a:	d424      	bmi.n	838c6 <__swsetup_r+0x86>
   8387c:	6922      	ldr	r2, [r4, #16]
   8387e:	f045 0308 	orr.w	r3, r5, #8
   83882:	81a3      	strh	r3, [r4, #12]
   83884:	b29b      	uxth	r3, r3
   83886:	2a00      	cmp	r2, #0
   83888:	d1e9      	bne.n	8385e <__swsetup_r+0x1e>
   8388a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8388e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83892:	d0e4      	beq.n	8385e <__swsetup_r+0x1e>
   83894:	4630      	mov	r0, r6
   83896:	4621      	mov	r1, r4
   83898:	f000 fcce 	bl	84238 <__smakebuf_r>
   8389c:	89a3      	ldrh	r3, [r4, #12]
   8389e:	6922      	ldr	r2, [r4, #16]
   838a0:	e7dd      	b.n	8385e <__swsetup_r+0x1e>
   838a2:	0798      	lsls	r0, r3, #30
   838a4:	bf58      	it	pl
   838a6:	6961      	ldrpl	r1, [r4, #20]
   838a8:	60a1      	str	r1, [r4, #8]
   838aa:	2a00      	cmp	r2, #0
   838ac:	d1e0      	bne.n	83870 <__swsetup_r+0x30>
   838ae:	89a3      	ldrh	r3, [r4, #12]
   838b0:	061a      	lsls	r2, r3, #24
   838b2:	d5dd      	bpl.n	83870 <__swsetup_r+0x30>
   838b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   838b8:	81a3      	strh	r3, [r4, #12]
   838ba:	f04f 30ff 	mov.w	r0, #4294967295
   838be:	bd70      	pop	{r4, r5, r6, pc}
   838c0:	f000 f8f0 	bl	83aa4 <__sinit>
   838c4:	e7c5      	b.n	83852 <__swsetup_r+0x12>
   838c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   838c8:	b149      	cbz	r1, 838de <__swsetup_r+0x9e>
   838ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
   838ce:	4299      	cmp	r1, r3
   838d0:	d003      	beq.n	838da <__swsetup_r+0x9a>
   838d2:	4630      	mov	r0, r6
   838d4:	f000 fa2a 	bl	83d2c <_free_r>
   838d8:	89a5      	ldrh	r5, [r4, #12]
   838da:	2300      	movs	r3, #0
   838dc:	6323      	str	r3, [r4, #48]	; 0x30
   838de:	6922      	ldr	r2, [r4, #16]
   838e0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   838e4:	2100      	movs	r1, #0
   838e6:	b2ad      	uxth	r5, r5
   838e8:	6022      	str	r2, [r4, #0]
   838ea:	6061      	str	r1, [r4, #4]
   838ec:	e7c7      	b.n	8387e <__swsetup_r+0x3e>
   838ee:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   838f2:	2309      	movs	r3, #9
   838f4:	6033      	str	r3, [r6, #0]
   838f6:	f04f 30ff 	mov.w	r0, #4294967295
   838fa:	81a5      	strh	r5, [r4, #12]
   838fc:	bd70      	pop	{r4, r5, r6, pc}
   838fe:	bf00      	nop
   83900:	20070588 	.word	0x20070588

00083904 <register_fini>:
   83904:	4b02      	ldr	r3, [pc, #8]	; (83910 <register_fini+0xc>)
   83906:	b113      	cbz	r3, 8390e <register_fini+0xa>
   83908:	4802      	ldr	r0, [pc, #8]	; (83914 <register_fini+0x10>)
   8390a:	f000 b805 	b.w	83918 <atexit>
   8390e:	4770      	bx	lr
   83910:	00000000 	.word	0x00000000
   83914:	00083ba1 	.word	0x00083ba1

00083918 <atexit>:
   83918:	4601      	mov	r1, r0
   8391a:	2000      	movs	r0, #0
   8391c:	4602      	mov	r2, r0
   8391e:	4603      	mov	r3, r0
   83920:	f001 bb46 	b.w	84fb0 <__register_exitproc>

00083924 <__sflush_r>:
   83924:	898b      	ldrh	r3, [r1, #12]
   83926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8392a:	b29a      	uxth	r2, r3
   8392c:	460d      	mov	r5, r1
   8392e:	0711      	lsls	r1, r2, #28
   83930:	4680      	mov	r8, r0
   83932:	d43c      	bmi.n	839ae <__sflush_r+0x8a>
   83934:	686a      	ldr	r2, [r5, #4]
   83936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8393a:	2a00      	cmp	r2, #0
   8393c:	81ab      	strh	r3, [r5, #12]
   8393e:	dd59      	ble.n	839f4 <__sflush_r+0xd0>
   83940:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83942:	2c00      	cmp	r4, #0
   83944:	d04b      	beq.n	839de <__sflush_r+0xba>
   83946:	b29b      	uxth	r3, r3
   83948:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8394c:	2100      	movs	r1, #0
   8394e:	b292      	uxth	r2, r2
   83950:	f8d8 6000 	ldr.w	r6, [r8]
   83954:	f8c8 1000 	str.w	r1, [r8]
   83958:	2a00      	cmp	r2, #0
   8395a:	d04f      	beq.n	839fc <__sflush_r+0xd8>
   8395c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8395e:	075f      	lsls	r7, r3, #29
   83960:	d505      	bpl.n	8396e <__sflush_r+0x4a>
   83962:	6869      	ldr	r1, [r5, #4]
   83964:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83966:	1a52      	subs	r2, r2, r1
   83968:	b10b      	cbz	r3, 8396e <__sflush_r+0x4a>
   8396a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8396c:	1ad2      	subs	r2, r2, r3
   8396e:	4640      	mov	r0, r8
   83970:	69e9      	ldr	r1, [r5, #28]
   83972:	2300      	movs	r3, #0
   83974:	47a0      	blx	r4
   83976:	1c44      	adds	r4, r0, #1
   83978:	d04a      	beq.n	83a10 <__sflush_r+0xec>
   8397a:	89ab      	ldrh	r3, [r5, #12]
   8397c:	692a      	ldr	r2, [r5, #16]
   8397e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83982:	b29b      	uxth	r3, r3
   83984:	2100      	movs	r1, #0
   83986:	602a      	str	r2, [r5, #0]
   83988:	04da      	lsls	r2, r3, #19
   8398a:	81ab      	strh	r3, [r5, #12]
   8398c:	6069      	str	r1, [r5, #4]
   8398e:	d44c      	bmi.n	83a2a <__sflush_r+0x106>
   83990:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83992:	f8c8 6000 	str.w	r6, [r8]
   83996:	b311      	cbz	r1, 839de <__sflush_r+0xba>
   83998:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8399c:	4299      	cmp	r1, r3
   8399e:	d002      	beq.n	839a6 <__sflush_r+0x82>
   839a0:	4640      	mov	r0, r8
   839a2:	f000 f9c3 	bl	83d2c <_free_r>
   839a6:	2000      	movs	r0, #0
   839a8:	6328      	str	r0, [r5, #48]	; 0x30
   839aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839ae:	692e      	ldr	r6, [r5, #16]
   839b0:	b1ae      	cbz	r6, 839de <__sflush_r+0xba>
   839b2:	0791      	lsls	r1, r2, #30
   839b4:	682c      	ldr	r4, [r5, #0]
   839b6:	bf0c      	ite	eq
   839b8:	696b      	ldreq	r3, [r5, #20]
   839ba:	2300      	movne	r3, #0
   839bc:	602e      	str	r6, [r5, #0]
   839be:	1ba4      	subs	r4, r4, r6
   839c0:	60ab      	str	r3, [r5, #8]
   839c2:	e00a      	b.n	839da <__sflush_r+0xb6>
   839c4:	4632      	mov	r2, r6
   839c6:	4623      	mov	r3, r4
   839c8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   839ca:	4640      	mov	r0, r8
   839cc:	69e9      	ldr	r1, [r5, #28]
   839ce:	47b8      	blx	r7
   839d0:	2800      	cmp	r0, #0
   839d2:	ebc0 0404 	rsb	r4, r0, r4
   839d6:	4406      	add	r6, r0
   839d8:	dd04      	ble.n	839e4 <__sflush_r+0xc0>
   839da:	2c00      	cmp	r4, #0
   839dc:	dcf2      	bgt.n	839c4 <__sflush_r+0xa0>
   839de:	2000      	movs	r0, #0
   839e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839e4:	89ab      	ldrh	r3, [r5, #12]
   839e6:	f04f 30ff 	mov.w	r0, #4294967295
   839ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839ee:	81ab      	strh	r3, [r5, #12]
   839f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839f4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   839f6:	2a00      	cmp	r2, #0
   839f8:	dca2      	bgt.n	83940 <__sflush_r+0x1c>
   839fa:	e7f0      	b.n	839de <__sflush_r+0xba>
   839fc:	2301      	movs	r3, #1
   839fe:	4640      	mov	r0, r8
   83a00:	69e9      	ldr	r1, [r5, #28]
   83a02:	47a0      	blx	r4
   83a04:	1c43      	adds	r3, r0, #1
   83a06:	4602      	mov	r2, r0
   83a08:	d01e      	beq.n	83a48 <__sflush_r+0x124>
   83a0a:	89ab      	ldrh	r3, [r5, #12]
   83a0c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83a0e:	e7a6      	b.n	8395e <__sflush_r+0x3a>
   83a10:	f8d8 3000 	ldr.w	r3, [r8]
   83a14:	b95b      	cbnz	r3, 83a2e <__sflush_r+0x10a>
   83a16:	89aa      	ldrh	r2, [r5, #12]
   83a18:	6929      	ldr	r1, [r5, #16]
   83a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83a1e:	b292      	uxth	r2, r2
   83a20:	606b      	str	r3, [r5, #4]
   83a22:	04d3      	lsls	r3, r2, #19
   83a24:	81aa      	strh	r2, [r5, #12]
   83a26:	6029      	str	r1, [r5, #0]
   83a28:	d5b2      	bpl.n	83990 <__sflush_r+0x6c>
   83a2a:	6528      	str	r0, [r5, #80]	; 0x50
   83a2c:	e7b0      	b.n	83990 <__sflush_r+0x6c>
   83a2e:	2b1d      	cmp	r3, #29
   83a30:	d001      	beq.n	83a36 <__sflush_r+0x112>
   83a32:	2b16      	cmp	r3, #22
   83a34:	d113      	bne.n	83a5e <__sflush_r+0x13a>
   83a36:	89a9      	ldrh	r1, [r5, #12]
   83a38:	692b      	ldr	r3, [r5, #16]
   83a3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   83a3e:	2200      	movs	r2, #0
   83a40:	81a9      	strh	r1, [r5, #12]
   83a42:	602b      	str	r3, [r5, #0]
   83a44:	606a      	str	r2, [r5, #4]
   83a46:	e7a3      	b.n	83990 <__sflush_r+0x6c>
   83a48:	f8d8 3000 	ldr.w	r3, [r8]
   83a4c:	2b00      	cmp	r3, #0
   83a4e:	d0dc      	beq.n	83a0a <__sflush_r+0xe6>
   83a50:	2b1d      	cmp	r3, #29
   83a52:	d001      	beq.n	83a58 <__sflush_r+0x134>
   83a54:	2b16      	cmp	r3, #22
   83a56:	d1c5      	bne.n	839e4 <__sflush_r+0xc0>
   83a58:	f8c8 6000 	str.w	r6, [r8]
   83a5c:	e7bf      	b.n	839de <__sflush_r+0xba>
   83a5e:	89ab      	ldrh	r3, [r5, #12]
   83a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a64:	81ab      	strh	r3, [r5, #12]
   83a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a6a:	bf00      	nop

00083a6c <_fflush_r>:
   83a6c:	b510      	push	{r4, lr}
   83a6e:	4604      	mov	r4, r0
   83a70:	b082      	sub	sp, #8
   83a72:	b108      	cbz	r0, 83a78 <_fflush_r+0xc>
   83a74:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a76:	b153      	cbz	r3, 83a8e <_fflush_r+0x22>
   83a78:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83a7c:	b908      	cbnz	r0, 83a82 <_fflush_r+0x16>
   83a7e:	b002      	add	sp, #8
   83a80:	bd10      	pop	{r4, pc}
   83a82:	4620      	mov	r0, r4
   83a84:	b002      	add	sp, #8
   83a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83a8a:	f7ff bf4b 	b.w	83924 <__sflush_r>
   83a8e:	9101      	str	r1, [sp, #4]
   83a90:	f000 f808 	bl	83aa4 <__sinit>
   83a94:	9901      	ldr	r1, [sp, #4]
   83a96:	e7ef      	b.n	83a78 <_fflush_r+0xc>

00083a98 <_cleanup_r>:
   83a98:	4901      	ldr	r1, [pc, #4]	; (83aa0 <_cleanup_r+0x8>)
   83a9a:	f000 bb9f 	b.w	841dc <_fwalk>
   83a9e:	bf00      	nop
   83aa0:	000850fd 	.word	0x000850fd

00083aa4 <__sinit>:
   83aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83aa8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83aaa:	b083      	sub	sp, #12
   83aac:	4607      	mov	r7, r0
   83aae:	2c00      	cmp	r4, #0
   83ab0:	d165      	bne.n	83b7e <__sinit+0xda>
   83ab2:	687d      	ldr	r5, [r7, #4]
   83ab4:	4833      	ldr	r0, [pc, #204]	; (83b84 <__sinit+0xe0>)
   83ab6:	2304      	movs	r3, #4
   83ab8:	2103      	movs	r1, #3
   83aba:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83abe:	63f8      	str	r0, [r7, #60]	; 0x3c
   83ac0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83ac4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83ac8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83acc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83ad0:	81ab      	strh	r3, [r5, #12]
   83ad2:	602c      	str	r4, [r5, #0]
   83ad4:	606c      	str	r4, [r5, #4]
   83ad6:	60ac      	str	r4, [r5, #8]
   83ad8:	666c      	str	r4, [r5, #100]	; 0x64
   83ada:	81ec      	strh	r4, [r5, #14]
   83adc:	612c      	str	r4, [r5, #16]
   83ade:	616c      	str	r4, [r5, #20]
   83ae0:	61ac      	str	r4, [r5, #24]
   83ae2:	4621      	mov	r1, r4
   83ae4:	2208      	movs	r2, #8
   83ae6:	f7fe fea3 	bl	82830 <memset>
   83aea:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83b88 <__sinit+0xe4>
   83aee:	68be      	ldr	r6, [r7, #8]
   83af0:	f8df a098 	ldr.w	sl, [pc, #152]	; 83b8c <__sinit+0xe8>
   83af4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83b90 <__sinit+0xec>
   83af8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83b94 <__sinit+0xf0>
   83afc:	2301      	movs	r3, #1
   83afe:	2209      	movs	r2, #9
   83b00:	61ed      	str	r5, [r5, #28]
   83b02:	f8c5 b020 	str.w	fp, [r5, #32]
   83b06:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83b0a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83b0e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83b12:	4621      	mov	r1, r4
   83b14:	81f3      	strh	r3, [r6, #14]
   83b16:	81b2      	strh	r2, [r6, #12]
   83b18:	6034      	str	r4, [r6, #0]
   83b1a:	6074      	str	r4, [r6, #4]
   83b1c:	60b4      	str	r4, [r6, #8]
   83b1e:	6674      	str	r4, [r6, #100]	; 0x64
   83b20:	6134      	str	r4, [r6, #16]
   83b22:	6174      	str	r4, [r6, #20]
   83b24:	61b4      	str	r4, [r6, #24]
   83b26:	2208      	movs	r2, #8
   83b28:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83b2c:	9301      	str	r3, [sp, #4]
   83b2e:	f7fe fe7f 	bl	82830 <memset>
   83b32:	68fd      	ldr	r5, [r7, #12]
   83b34:	2012      	movs	r0, #18
   83b36:	2202      	movs	r2, #2
   83b38:	61f6      	str	r6, [r6, #28]
   83b3a:	f8c6 b020 	str.w	fp, [r6, #32]
   83b3e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83b42:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83b46:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83b4a:	4621      	mov	r1, r4
   83b4c:	81a8      	strh	r0, [r5, #12]
   83b4e:	81ea      	strh	r2, [r5, #14]
   83b50:	602c      	str	r4, [r5, #0]
   83b52:	606c      	str	r4, [r5, #4]
   83b54:	60ac      	str	r4, [r5, #8]
   83b56:	666c      	str	r4, [r5, #100]	; 0x64
   83b58:	612c      	str	r4, [r5, #16]
   83b5a:	616c      	str	r4, [r5, #20]
   83b5c:	61ac      	str	r4, [r5, #24]
   83b5e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83b62:	2208      	movs	r2, #8
   83b64:	f7fe fe64 	bl	82830 <memset>
   83b68:	9b01      	ldr	r3, [sp, #4]
   83b6a:	61ed      	str	r5, [r5, #28]
   83b6c:	f8c5 b020 	str.w	fp, [r5, #32]
   83b70:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83b74:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83b78:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   83b7e:	b003      	add	sp, #12
   83b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b84:	00083a99 	.word	0x00083a99
   83b88:	00084e99 	.word	0x00084e99
   83b8c:	00084ebd 	.word	0x00084ebd
   83b90:	00084ef5 	.word	0x00084ef5
   83b94:	00084f15 	.word	0x00084f15

00083b98 <__sfp_lock_acquire>:
   83b98:	4770      	bx	lr
   83b9a:	bf00      	nop

00083b9c <__sfp_lock_release>:
   83b9c:	4770      	bx	lr
   83b9e:	bf00      	nop

00083ba0 <__libc_fini_array>:
   83ba0:	b538      	push	{r3, r4, r5, lr}
   83ba2:	4d09      	ldr	r5, [pc, #36]	; (83bc8 <__libc_fini_array+0x28>)
   83ba4:	4c09      	ldr	r4, [pc, #36]	; (83bcc <__libc_fini_array+0x2c>)
   83ba6:	1b64      	subs	r4, r4, r5
   83ba8:	10a4      	asrs	r4, r4, #2
   83baa:	bf18      	it	ne
   83bac:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83bb0:	d005      	beq.n	83bbe <__libc_fini_array+0x1e>
   83bb2:	3c01      	subs	r4, #1
   83bb4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83bb8:	4798      	blx	r3
   83bba:	2c00      	cmp	r4, #0
   83bbc:	d1f9      	bne.n	83bb2 <__libc_fini_array+0x12>
   83bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83bc2:	f001 bfc3 	b.w	85b4c <_fini>
   83bc6:	bf00      	nop
   83bc8:	00085b58 	.word	0x00085b58
   83bcc:	00085b5c 	.word	0x00085b5c

00083bd0 <_fputwc_r>:
   83bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bd4:	8993      	ldrh	r3, [r2, #12]
   83bd6:	460f      	mov	r7, r1
   83bd8:	0499      	lsls	r1, r3, #18
   83bda:	b082      	sub	sp, #8
   83bdc:	4614      	mov	r4, r2
   83bde:	4680      	mov	r8, r0
   83be0:	d406      	bmi.n	83bf0 <_fputwc_r+0x20>
   83be2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83be4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83bec:	81a3      	strh	r3, [r4, #12]
   83bee:	6662      	str	r2, [r4, #100]	; 0x64
   83bf0:	f000 fb1c 	bl	8422c <__locale_mb_cur_max>
   83bf4:	2801      	cmp	r0, #1
   83bf6:	d03e      	beq.n	83c76 <_fputwc_r+0xa6>
   83bf8:	463a      	mov	r2, r7
   83bfa:	4640      	mov	r0, r8
   83bfc:	a901      	add	r1, sp, #4
   83bfe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83c02:	f001 f98b 	bl	84f1c <_wcrtomb_r>
   83c06:	1c42      	adds	r2, r0, #1
   83c08:	4606      	mov	r6, r0
   83c0a:	d02d      	beq.n	83c68 <_fputwc_r+0x98>
   83c0c:	2800      	cmp	r0, #0
   83c0e:	d03a      	beq.n	83c86 <_fputwc_r+0xb6>
   83c10:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83c14:	2500      	movs	r5, #0
   83c16:	e009      	b.n	83c2c <_fputwc_r+0x5c>
   83c18:	6823      	ldr	r3, [r4, #0]
   83c1a:	7019      	strb	r1, [r3, #0]
   83c1c:	6823      	ldr	r3, [r4, #0]
   83c1e:	3301      	adds	r3, #1
   83c20:	6023      	str	r3, [r4, #0]
   83c22:	3501      	adds	r5, #1
   83c24:	42b5      	cmp	r5, r6
   83c26:	d22e      	bcs.n	83c86 <_fputwc_r+0xb6>
   83c28:	ab01      	add	r3, sp, #4
   83c2a:	5ce9      	ldrb	r1, [r5, r3]
   83c2c:	68a3      	ldr	r3, [r4, #8]
   83c2e:	3b01      	subs	r3, #1
   83c30:	2b00      	cmp	r3, #0
   83c32:	60a3      	str	r3, [r4, #8]
   83c34:	daf0      	bge.n	83c18 <_fputwc_r+0x48>
   83c36:	69a2      	ldr	r2, [r4, #24]
   83c38:	4293      	cmp	r3, r2
   83c3a:	db06      	blt.n	83c4a <_fputwc_r+0x7a>
   83c3c:	6823      	ldr	r3, [r4, #0]
   83c3e:	7019      	strb	r1, [r3, #0]
   83c40:	6823      	ldr	r3, [r4, #0]
   83c42:	7819      	ldrb	r1, [r3, #0]
   83c44:	3301      	adds	r3, #1
   83c46:	290a      	cmp	r1, #10
   83c48:	d1ea      	bne.n	83c20 <_fputwc_r+0x50>
   83c4a:	4640      	mov	r0, r8
   83c4c:	4622      	mov	r2, r4
   83c4e:	f7ff fda3 	bl	83798 <__swbuf_r>
   83c52:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83c56:	4258      	negs	r0, r3
   83c58:	4158      	adcs	r0, r3
   83c5a:	2800      	cmp	r0, #0
   83c5c:	d0e1      	beq.n	83c22 <_fputwc_r+0x52>
   83c5e:	f04f 30ff 	mov.w	r0, #4294967295
   83c62:	b002      	add	sp, #8
   83c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c68:	89a3      	ldrh	r3, [r4, #12]
   83c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83c6e:	81a3      	strh	r3, [r4, #12]
   83c70:	b002      	add	sp, #8
   83c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c76:	1e7b      	subs	r3, r7, #1
   83c78:	2bfe      	cmp	r3, #254	; 0xfe
   83c7a:	d8bd      	bhi.n	83bf8 <_fputwc_r+0x28>
   83c7c:	b2f9      	uxtb	r1, r7
   83c7e:	4606      	mov	r6, r0
   83c80:	f88d 1004 	strb.w	r1, [sp, #4]
   83c84:	e7c6      	b.n	83c14 <_fputwc_r+0x44>
   83c86:	4638      	mov	r0, r7
   83c88:	b002      	add	sp, #8
   83c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c8e:	bf00      	nop

00083c90 <_malloc_trim_r>:
   83c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c92:	4d23      	ldr	r5, [pc, #140]	; (83d20 <_malloc_trim_r+0x90>)
   83c94:	460f      	mov	r7, r1
   83c96:	4604      	mov	r4, r0
   83c98:	f000 ff08 	bl	84aac <__malloc_lock>
   83c9c:	68ab      	ldr	r3, [r5, #8]
   83c9e:	685e      	ldr	r6, [r3, #4]
   83ca0:	f026 0603 	bic.w	r6, r6, #3
   83ca4:	1bf1      	subs	r1, r6, r7
   83ca6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83caa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83cae:	f021 010f 	bic.w	r1, r1, #15
   83cb2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83cb6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83cba:	db07      	blt.n	83ccc <_malloc_trim_r+0x3c>
   83cbc:	4620      	mov	r0, r4
   83cbe:	2100      	movs	r1, #0
   83cc0:	f001 f8d8 	bl	84e74 <_sbrk_r>
   83cc4:	68ab      	ldr	r3, [r5, #8]
   83cc6:	4433      	add	r3, r6
   83cc8:	4298      	cmp	r0, r3
   83cca:	d004      	beq.n	83cd6 <_malloc_trim_r+0x46>
   83ccc:	4620      	mov	r0, r4
   83cce:	f000 feef 	bl	84ab0 <__malloc_unlock>
   83cd2:	2000      	movs	r0, #0
   83cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cd6:	4620      	mov	r0, r4
   83cd8:	4279      	negs	r1, r7
   83cda:	f001 f8cb 	bl	84e74 <_sbrk_r>
   83cde:	3001      	adds	r0, #1
   83ce0:	d00d      	beq.n	83cfe <_malloc_trim_r+0x6e>
   83ce2:	4b10      	ldr	r3, [pc, #64]	; (83d24 <_malloc_trim_r+0x94>)
   83ce4:	68aa      	ldr	r2, [r5, #8]
   83ce6:	6819      	ldr	r1, [r3, #0]
   83ce8:	1bf6      	subs	r6, r6, r7
   83cea:	f046 0601 	orr.w	r6, r6, #1
   83cee:	4620      	mov	r0, r4
   83cf0:	1bc9      	subs	r1, r1, r7
   83cf2:	6056      	str	r6, [r2, #4]
   83cf4:	6019      	str	r1, [r3, #0]
   83cf6:	f000 fedb 	bl	84ab0 <__malloc_unlock>
   83cfa:	2001      	movs	r0, #1
   83cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cfe:	4620      	mov	r0, r4
   83d00:	2100      	movs	r1, #0
   83d02:	f001 f8b7 	bl	84e74 <_sbrk_r>
   83d06:	68ab      	ldr	r3, [r5, #8]
   83d08:	1ac2      	subs	r2, r0, r3
   83d0a:	2a0f      	cmp	r2, #15
   83d0c:	ddde      	ble.n	83ccc <_malloc_trim_r+0x3c>
   83d0e:	4d06      	ldr	r5, [pc, #24]	; (83d28 <_malloc_trim_r+0x98>)
   83d10:	4904      	ldr	r1, [pc, #16]	; (83d24 <_malloc_trim_r+0x94>)
   83d12:	682d      	ldr	r5, [r5, #0]
   83d14:	f042 0201 	orr.w	r2, r2, #1
   83d18:	1b40      	subs	r0, r0, r5
   83d1a:	605a      	str	r2, [r3, #4]
   83d1c:	6008      	str	r0, [r1, #0]
   83d1e:	e7d5      	b.n	83ccc <_malloc_trim_r+0x3c>
   83d20:	200705b0 	.word	0x200705b0
   83d24:	20070b00 	.word	0x20070b00
   83d28:	200709bc 	.word	0x200709bc

00083d2c <_free_r>:
   83d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d30:	460d      	mov	r5, r1
   83d32:	4606      	mov	r6, r0
   83d34:	2900      	cmp	r1, #0
   83d36:	d055      	beq.n	83de4 <_free_r+0xb8>
   83d38:	f000 feb8 	bl	84aac <__malloc_lock>
   83d3c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83d40:	f8df c170 	ldr.w	ip, [pc, #368]	; 83eb4 <_free_r+0x188>
   83d44:	f1a5 0408 	sub.w	r4, r5, #8
   83d48:	f021 0301 	bic.w	r3, r1, #1
   83d4c:	18e2      	adds	r2, r4, r3
   83d4e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83d52:	6857      	ldr	r7, [r2, #4]
   83d54:	4290      	cmp	r0, r2
   83d56:	f027 0703 	bic.w	r7, r7, #3
   83d5a:	d068      	beq.n	83e2e <_free_r+0x102>
   83d5c:	f011 0101 	ands.w	r1, r1, #1
   83d60:	6057      	str	r7, [r2, #4]
   83d62:	d032      	beq.n	83dca <_free_r+0x9e>
   83d64:	2100      	movs	r1, #0
   83d66:	19d0      	adds	r0, r2, r7
   83d68:	6840      	ldr	r0, [r0, #4]
   83d6a:	07c0      	lsls	r0, r0, #31
   83d6c:	d406      	bmi.n	83d7c <_free_r+0x50>
   83d6e:	443b      	add	r3, r7
   83d70:	6890      	ldr	r0, [r2, #8]
   83d72:	2900      	cmp	r1, #0
   83d74:	d04d      	beq.n	83e12 <_free_r+0xe6>
   83d76:	68d2      	ldr	r2, [r2, #12]
   83d78:	60c2      	str	r2, [r0, #12]
   83d7a:	6090      	str	r0, [r2, #8]
   83d7c:	f043 0201 	orr.w	r2, r3, #1
   83d80:	6062      	str	r2, [r4, #4]
   83d82:	50e3      	str	r3, [r4, r3]
   83d84:	b9e1      	cbnz	r1, 83dc0 <_free_r+0x94>
   83d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d8a:	d32d      	bcc.n	83de8 <_free_r+0xbc>
   83d8c:	0a5a      	lsrs	r2, r3, #9
   83d8e:	2a04      	cmp	r2, #4
   83d90:	d869      	bhi.n	83e66 <_free_r+0x13a>
   83d92:	0998      	lsrs	r0, r3, #6
   83d94:	3038      	adds	r0, #56	; 0x38
   83d96:	0041      	lsls	r1, r0, #1
   83d98:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83d9c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83da0:	4944      	ldr	r1, [pc, #272]	; (83eb4 <_free_r+0x188>)
   83da2:	4562      	cmp	r2, ip
   83da4:	d065      	beq.n	83e72 <_free_r+0x146>
   83da6:	6851      	ldr	r1, [r2, #4]
   83da8:	f021 0103 	bic.w	r1, r1, #3
   83dac:	428b      	cmp	r3, r1
   83dae:	d202      	bcs.n	83db6 <_free_r+0x8a>
   83db0:	6892      	ldr	r2, [r2, #8]
   83db2:	4594      	cmp	ip, r2
   83db4:	d1f7      	bne.n	83da6 <_free_r+0x7a>
   83db6:	68d3      	ldr	r3, [r2, #12]
   83db8:	60e3      	str	r3, [r4, #12]
   83dba:	60a2      	str	r2, [r4, #8]
   83dbc:	609c      	str	r4, [r3, #8]
   83dbe:	60d4      	str	r4, [r2, #12]
   83dc0:	4630      	mov	r0, r6
   83dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83dc6:	f000 be73 	b.w	84ab0 <__malloc_unlock>
   83dca:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83dce:	f10c 0808 	add.w	r8, ip, #8
   83dd2:	1b64      	subs	r4, r4, r5
   83dd4:	68a0      	ldr	r0, [r4, #8]
   83dd6:	442b      	add	r3, r5
   83dd8:	4540      	cmp	r0, r8
   83dda:	d042      	beq.n	83e62 <_free_r+0x136>
   83ddc:	68e5      	ldr	r5, [r4, #12]
   83dde:	60c5      	str	r5, [r0, #12]
   83de0:	60a8      	str	r0, [r5, #8]
   83de2:	e7c0      	b.n	83d66 <_free_r+0x3a>
   83de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83de8:	08db      	lsrs	r3, r3, #3
   83dea:	109a      	asrs	r2, r3, #2
   83dec:	2001      	movs	r0, #1
   83dee:	4090      	lsls	r0, r2
   83df0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83df4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83df8:	689a      	ldr	r2, [r3, #8]
   83dfa:	4301      	orrs	r1, r0
   83dfc:	60a2      	str	r2, [r4, #8]
   83dfe:	60e3      	str	r3, [r4, #12]
   83e00:	f8cc 1004 	str.w	r1, [ip, #4]
   83e04:	4630      	mov	r0, r6
   83e06:	609c      	str	r4, [r3, #8]
   83e08:	60d4      	str	r4, [r2, #12]
   83e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83e0e:	f000 be4f 	b.w	84ab0 <__malloc_unlock>
   83e12:	4d29      	ldr	r5, [pc, #164]	; (83eb8 <_free_r+0x18c>)
   83e14:	42a8      	cmp	r0, r5
   83e16:	d1ae      	bne.n	83d76 <_free_r+0x4a>
   83e18:	f043 0201 	orr.w	r2, r3, #1
   83e1c:	f8cc 4014 	str.w	r4, [ip, #20]
   83e20:	f8cc 4010 	str.w	r4, [ip, #16]
   83e24:	60e0      	str	r0, [r4, #12]
   83e26:	60a0      	str	r0, [r4, #8]
   83e28:	6062      	str	r2, [r4, #4]
   83e2a:	50e3      	str	r3, [r4, r3]
   83e2c:	e7c8      	b.n	83dc0 <_free_r+0x94>
   83e2e:	441f      	add	r7, r3
   83e30:	07cb      	lsls	r3, r1, #31
   83e32:	d407      	bmi.n	83e44 <_free_r+0x118>
   83e34:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83e38:	1a64      	subs	r4, r4, r1
   83e3a:	68e3      	ldr	r3, [r4, #12]
   83e3c:	68a2      	ldr	r2, [r4, #8]
   83e3e:	440f      	add	r7, r1
   83e40:	60d3      	str	r3, [r2, #12]
   83e42:	609a      	str	r2, [r3, #8]
   83e44:	4b1d      	ldr	r3, [pc, #116]	; (83ebc <_free_r+0x190>)
   83e46:	f047 0201 	orr.w	r2, r7, #1
   83e4a:	681b      	ldr	r3, [r3, #0]
   83e4c:	6062      	str	r2, [r4, #4]
   83e4e:	429f      	cmp	r7, r3
   83e50:	f8cc 4008 	str.w	r4, [ip, #8]
   83e54:	d3b4      	bcc.n	83dc0 <_free_r+0x94>
   83e56:	4b1a      	ldr	r3, [pc, #104]	; (83ec0 <_free_r+0x194>)
   83e58:	4630      	mov	r0, r6
   83e5a:	6819      	ldr	r1, [r3, #0]
   83e5c:	f7ff ff18 	bl	83c90 <_malloc_trim_r>
   83e60:	e7ae      	b.n	83dc0 <_free_r+0x94>
   83e62:	2101      	movs	r1, #1
   83e64:	e77f      	b.n	83d66 <_free_r+0x3a>
   83e66:	2a14      	cmp	r2, #20
   83e68:	d80b      	bhi.n	83e82 <_free_r+0x156>
   83e6a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83e6e:	0041      	lsls	r1, r0, #1
   83e70:	e792      	b.n	83d98 <_free_r+0x6c>
   83e72:	1080      	asrs	r0, r0, #2
   83e74:	2501      	movs	r5, #1
   83e76:	4085      	lsls	r5, r0
   83e78:	6848      	ldr	r0, [r1, #4]
   83e7a:	4613      	mov	r3, r2
   83e7c:	4328      	orrs	r0, r5
   83e7e:	6048      	str	r0, [r1, #4]
   83e80:	e79a      	b.n	83db8 <_free_r+0x8c>
   83e82:	2a54      	cmp	r2, #84	; 0x54
   83e84:	d803      	bhi.n	83e8e <_free_r+0x162>
   83e86:	0b18      	lsrs	r0, r3, #12
   83e88:	306e      	adds	r0, #110	; 0x6e
   83e8a:	0041      	lsls	r1, r0, #1
   83e8c:	e784      	b.n	83d98 <_free_r+0x6c>
   83e8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83e92:	d803      	bhi.n	83e9c <_free_r+0x170>
   83e94:	0bd8      	lsrs	r0, r3, #15
   83e96:	3077      	adds	r0, #119	; 0x77
   83e98:	0041      	lsls	r1, r0, #1
   83e9a:	e77d      	b.n	83d98 <_free_r+0x6c>
   83e9c:	f240 5154 	movw	r1, #1364	; 0x554
   83ea0:	428a      	cmp	r2, r1
   83ea2:	d803      	bhi.n	83eac <_free_r+0x180>
   83ea4:	0c98      	lsrs	r0, r3, #18
   83ea6:	307c      	adds	r0, #124	; 0x7c
   83ea8:	0041      	lsls	r1, r0, #1
   83eaa:	e775      	b.n	83d98 <_free_r+0x6c>
   83eac:	21fc      	movs	r1, #252	; 0xfc
   83eae:	207e      	movs	r0, #126	; 0x7e
   83eb0:	e772      	b.n	83d98 <_free_r+0x6c>
   83eb2:	bf00      	nop
   83eb4:	200705b0 	.word	0x200705b0
   83eb8:	200705b8 	.word	0x200705b8
   83ebc:	200709b8 	.word	0x200709b8
   83ec0:	20070afc 	.word	0x20070afc

00083ec4 <__sfvwrite_r>:
   83ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ec8:	6893      	ldr	r3, [r2, #8]
   83eca:	b083      	sub	sp, #12
   83ecc:	4616      	mov	r6, r2
   83ece:	4681      	mov	r9, r0
   83ed0:	460c      	mov	r4, r1
   83ed2:	b32b      	cbz	r3, 83f20 <__sfvwrite_r+0x5c>
   83ed4:	898b      	ldrh	r3, [r1, #12]
   83ed6:	0719      	lsls	r1, r3, #28
   83ed8:	d526      	bpl.n	83f28 <__sfvwrite_r+0x64>
   83eda:	6922      	ldr	r2, [r4, #16]
   83edc:	b322      	cbz	r2, 83f28 <__sfvwrite_r+0x64>
   83ede:	f003 0202 	and.w	r2, r3, #2
   83ee2:	b292      	uxth	r2, r2
   83ee4:	6835      	ldr	r5, [r6, #0]
   83ee6:	2a00      	cmp	r2, #0
   83ee8:	d02c      	beq.n	83f44 <__sfvwrite_r+0x80>
   83eea:	f04f 0a00 	mov.w	sl, #0
   83eee:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 841d8 <__sfvwrite_r+0x314>
   83ef2:	46d0      	mov	r8, sl
   83ef4:	45d8      	cmp	r8, fp
   83ef6:	bf34      	ite	cc
   83ef8:	4643      	movcc	r3, r8
   83efa:	465b      	movcs	r3, fp
   83efc:	4652      	mov	r2, sl
   83efe:	4648      	mov	r0, r9
   83f00:	f1b8 0f00 	cmp.w	r8, #0
   83f04:	d04f      	beq.n	83fa6 <__sfvwrite_r+0xe2>
   83f06:	69e1      	ldr	r1, [r4, #28]
   83f08:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83f0a:	47b8      	blx	r7
   83f0c:	2800      	cmp	r0, #0
   83f0e:	dd56      	ble.n	83fbe <__sfvwrite_r+0xfa>
   83f10:	68b3      	ldr	r3, [r6, #8]
   83f12:	4482      	add	sl, r0
   83f14:	1a1b      	subs	r3, r3, r0
   83f16:	ebc0 0808 	rsb	r8, r0, r8
   83f1a:	60b3      	str	r3, [r6, #8]
   83f1c:	2b00      	cmp	r3, #0
   83f1e:	d1e9      	bne.n	83ef4 <__sfvwrite_r+0x30>
   83f20:	2000      	movs	r0, #0
   83f22:	b003      	add	sp, #12
   83f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f28:	4648      	mov	r0, r9
   83f2a:	4621      	mov	r1, r4
   83f2c:	f7ff fc88 	bl	83840 <__swsetup_r>
   83f30:	2800      	cmp	r0, #0
   83f32:	f040 8148 	bne.w	841c6 <__sfvwrite_r+0x302>
   83f36:	89a3      	ldrh	r3, [r4, #12]
   83f38:	6835      	ldr	r5, [r6, #0]
   83f3a:	f003 0202 	and.w	r2, r3, #2
   83f3e:	b292      	uxth	r2, r2
   83f40:	2a00      	cmp	r2, #0
   83f42:	d1d2      	bne.n	83eea <__sfvwrite_r+0x26>
   83f44:	f013 0a01 	ands.w	sl, r3, #1
   83f48:	d142      	bne.n	83fd0 <__sfvwrite_r+0x10c>
   83f4a:	46d0      	mov	r8, sl
   83f4c:	f1b8 0f00 	cmp.w	r8, #0
   83f50:	d023      	beq.n	83f9a <__sfvwrite_r+0xd6>
   83f52:	059a      	lsls	r2, r3, #22
   83f54:	68a7      	ldr	r7, [r4, #8]
   83f56:	d576      	bpl.n	84046 <__sfvwrite_r+0x182>
   83f58:	45b8      	cmp	r8, r7
   83f5a:	f0c0 80a4 	bcc.w	840a6 <__sfvwrite_r+0x1e2>
   83f5e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83f62:	f040 80b2 	bne.w	840ca <__sfvwrite_r+0x206>
   83f66:	6820      	ldr	r0, [r4, #0]
   83f68:	46bb      	mov	fp, r7
   83f6a:	4651      	mov	r1, sl
   83f6c:	465a      	mov	r2, fp
   83f6e:	f000 fd37 	bl	849e0 <memmove>
   83f72:	68a2      	ldr	r2, [r4, #8]
   83f74:	6821      	ldr	r1, [r4, #0]
   83f76:	1bd2      	subs	r2, r2, r7
   83f78:	eb01 030b 	add.w	r3, r1, fp
   83f7c:	60a2      	str	r2, [r4, #8]
   83f7e:	6023      	str	r3, [r4, #0]
   83f80:	4642      	mov	r2, r8
   83f82:	68b3      	ldr	r3, [r6, #8]
   83f84:	4492      	add	sl, r2
   83f86:	1a9b      	subs	r3, r3, r2
   83f88:	ebc2 0808 	rsb	r8, r2, r8
   83f8c:	60b3      	str	r3, [r6, #8]
   83f8e:	2b00      	cmp	r3, #0
   83f90:	d0c6      	beq.n	83f20 <__sfvwrite_r+0x5c>
   83f92:	89a3      	ldrh	r3, [r4, #12]
   83f94:	f1b8 0f00 	cmp.w	r8, #0
   83f98:	d1db      	bne.n	83f52 <__sfvwrite_r+0x8e>
   83f9a:	f8d5 a000 	ldr.w	sl, [r5]
   83f9e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83fa2:	3508      	adds	r5, #8
   83fa4:	e7d2      	b.n	83f4c <__sfvwrite_r+0x88>
   83fa6:	f8d5 a000 	ldr.w	sl, [r5]
   83faa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83fae:	3508      	adds	r5, #8
   83fb0:	e7a0      	b.n	83ef4 <__sfvwrite_r+0x30>
   83fb2:	4648      	mov	r0, r9
   83fb4:	4621      	mov	r1, r4
   83fb6:	f7ff fd59 	bl	83a6c <_fflush_r>
   83fba:	2800      	cmp	r0, #0
   83fbc:	d059      	beq.n	84072 <__sfvwrite_r+0x1ae>
   83fbe:	89a3      	ldrh	r3, [r4, #12]
   83fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83fc4:	f04f 30ff 	mov.w	r0, #4294967295
   83fc8:	81a3      	strh	r3, [r4, #12]
   83fca:	b003      	add	sp, #12
   83fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fd0:	4692      	mov	sl, r2
   83fd2:	9201      	str	r2, [sp, #4]
   83fd4:	4693      	mov	fp, r2
   83fd6:	4690      	mov	r8, r2
   83fd8:	f1b8 0f00 	cmp.w	r8, #0
   83fdc:	d02b      	beq.n	84036 <__sfvwrite_r+0x172>
   83fde:	9f01      	ldr	r7, [sp, #4]
   83fe0:	2f00      	cmp	r7, #0
   83fe2:	d064      	beq.n	840ae <__sfvwrite_r+0x1ea>
   83fe4:	6820      	ldr	r0, [r4, #0]
   83fe6:	6921      	ldr	r1, [r4, #16]
   83fe8:	45c2      	cmp	sl, r8
   83fea:	bf34      	ite	cc
   83fec:	4653      	movcc	r3, sl
   83fee:	4643      	movcs	r3, r8
   83ff0:	4288      	cmp	r0, r1
   83ff2:	461f      	mov	r7, r3
   83ff4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83ff8:	6962      	ldr	r2, [r4, #20]
   83ffa:	d903      	bls.n	84004 <__sfvwrite_r+0x140>
   83ffc:	4494      	add	ip, r2
   83ffe:	4563      	cmp	r3, ip
   84000:	f300 80ae 	bgt.w	84160 <__sfvwrite_r+0x29c>
   84004:	4293      	cmp	r3, r2
   84006:	db36      	blt.n	84076 <__sfvwrite_r+0x1b2>
   84008:	4613      	mov	r3, r2
   8400a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8400c:	4648      	mov	r0, r9
   8400e:	69e1      	ldr	r1, [r4, #28]
   84010:	465a      	mov	r2, fp
   84012:	47b8      	blx	r7
   84014:	1e07      	subs	r7, r0, #0
   84016:	ddd2      	ble.n	83fbe <__sfvwrite_r+0xfa>
   84018:	ebba 0a07 	subs.w	sl, sl, r7
   8401c:	d03a      	beq.n	84094 <__sfvwrite_r+0x1d0>
   8401e:	68b3      	ldr	r3, [r6, #8]
   84020:	44bb      	add	fp, r7
   84022:	1bdb      	subs	r3, r3, r7
   84024:	ebc7 0808 	rsb	r8, r7, r8
   84028:	60b3      	str	r3, [r6, #8]
   8402a:	2b00      	cmp	r3, #0
   8402c:	f43f af78 	beq.w	83f20 <__sfvwrite_r+0x5c>
   84030:	f1b8 0f00 	cmp.w	r8, #0
   84034:	d1d3      	bne.n	83fde <__sfvwrite_r+0x11a>
   84036:	2700      	movs	r7, #0
   84038:	f8d5 b000 	ldr.w	fp, [r5]
   8403c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84040:	9701      	str	r7, [sp, #4]
   84042:	3508      	adds	r5, #8
   84044:	e7c8      	b.n	83fd8 <__sfvwrite_r+0x114>
   84046:	6820      	ldr	r0, [r4, #0]
   84048:	6923      	ldr	r3, [r4, #16]
   8404a:	4298      	cmp	r0, r3
   8404c:	d802      	bhi.n	84054 <__sfvwrite_r+0x190>
   8404e:	6963      	ldr	r3, [r4, #20]
   84050:	4598      	cmp	r8, r3
   84052:	d272      	bcs.n	8413a <__sfvwrite_r+0x276>
   84054:	45b8      	cmp	r8, r7
   84056:	bf38      	it	cc
   84058:	4647      	movcc	r7, r8
   8405a:	463a      	mov	r2, r7
   8405c:	4651      	mov	r1, sl
   8405e:	f000 fcbf 	bl	849e0 <memmove>
   84062:	68a3      	ldr	r3, [r4, #8]
   84064:	6822      	ldr	r2, [r4, #0]
   84066:	1bdb      	subs	r3, r3, r7
   84068:	443a      	add	r2, r7
   8406a:	60a3      	str	r3, [r4, #8]
   8406c:	6022      	str	r2, [r4, #0]
   8406e:	2b00      	cmp	r3, #0
   84070:	d09f      	beq.n	83fb2 <__sfvwrite_r+0xee>
   84072:	463a      	mov	r2, r7
   84074:	e785      	b.n	83f82 <__sfvwrite_r+0xbe>
   84076:	461a      	mov	r2, r3
   84078:	4659      	mov	r1, fp
   8407a:	9300      	str	r3, [sp, #0]
   8407c:	f000 fcb0 	bl	849e0 <memmove>
   84080:	9b00      	ldr	r3, [sp, #0]
   84082:	68a1      	ldr	r1, [r4, #8]
   84084:	6822      	ldr	r2, [r4, #0]
   84086:	1ac9      	subs	r1, r1, r3
   84088:	ebba 0a07 	subs.w	sl, sl, r7
   8408c:	4413      	add	r3, r2
   8408e:	60a1      	str	r1, [r4, #8]
   84090:	6023      	str	r3, [r4, #0]
   84092:	d1c4      	bne.n	8401e <__sfvwrite_r+0x15a>
   84094:	4648      	mov	r0, r9
   84096:	4621      	mov	r1, r4
   84098:	f7ff fce8 	bl	83a6c <_fflush_r>
   8409c:	2800      	cmp	r0, #0
   8409e:	d18e      	bne.n	83fbe <__sfvwrite_r+0xfa>
   840a0:	f8cd a004 	str.w	sl, [sp, #4]
   840a4:	e7bb      	b.n	8401e <__sfvwrite_r+0x15a>
   840a6:	6820      	ldr	r0, [r4, #0]
   840a8:	4647      	mov	r7, r8
   840aa:	46c3      	mov	fp, r8
   840ac:	e75d      	b.n	83f6a <__sfvwrite_r+0xa6>
   840ae:	4658      	mov	r0, fp
   840b0:	210a      	movs	r1, #10
   840b2:	4642      	mov	r2, r8
   840b4:	f000 fbd4 	bl	84860 <memchr>
   840b8:	2800      	cmp	r0, #0
   840ba:	d07f      	beq.n	841bc <__sfvwrite_r+0x2f8>
   840bc:	f100 0a01 	add.w	sl, r0, #1
   840c0:	2701      	movs	r7, #1
   840c2:	ebcb 0a0a 	rsb	sl, fp, sl
   840c6:	9701      	str	r7, [sp, #4]
   840c8:	e78c      	b.n	83fe4 <__sfvwrite_r+0x120>
   840ca:	6822      	ldr	r2, [r4, #0]
   840cc:	6921      	ldr	r1, [r4, #16]
   840ce:	6967      	ldr	r7, [r4, #20]
   840d0:	ebc1 0c02 	rsb	ip, r1, r2
   840d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   840d8:	f10c 0201 	add.w	r2, ip, #1
   840dc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   840e0:	4442      	add	r2, r8
   840e2:	107f      	asrs	r7, r7, #1
   840e4:	4297      	cmp	r7, r2
   840e6:	bf34      	ite	cc
   840e8:	4617      	movcc	r7, r2
   840ea:	463a      	movcs	r2, r7
   840ec:	055b      	lsls	r3, r3, #21
   840ee:	d54f      	bpl.n	84190 <__sfvwrite_r+0x2cc>
   840f0:	4611      	mov	r1, r2
   840f2:	4648      	mov	r0, r9
   840f4:	f8cd c000 	str.w	ip, [sp]
   840f8:	f000 f916 	bl	84328 <_malloc_r>
   840fc:	f8dd c000 	ldr.w	ip, [sp]
   84100:	4683      	mov	fp, r0
   84102:	2800      	cmp	r0, #0
   84104:	d062      	beq.n	841cc <__sfvwrite_r+0x308>
   84106:	4662      	mov	r2, ip
   84108:	6921      	ldr	r1, [r4, #16]
   8410a:	f8cd c000 	str.w	ip, [sp]
   8410e:	f000 fbf1 	bl	848f4 <memcpy>
   84112:	89a2      	ldrh	r2, [r4, #12]
   84114:	f8dd c000 	ldr.w	ip, [sp]
   84118:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8411c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84120:	81a2      	strh	r2, [r4, #12]
   84122:	eb0b 000c 	add.w	r0, fp, ip
   84126:	ebcc 0207 	rsb	r2, ip, r7
   8412a:	f8c4 b010 	str.w	fp, [r4, #16]
   8412e:	6167      	str	r7, [r4, #20]
   84130:	6020      	str	r0, [r4, #0]
   84132:	60a2      	str	r2, [r4, #8]
   84134:	4647      	mov	r7, r8
   84136:	46c3      	mov	fp, r8
   84138:	e717      	b.n	83f6a <__sfvwrite_r+0xa6>
   8413a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8413e:	4590      	cmp	r8, r2
   84140:	bf38      	it	cc
   84142:	4642      	movcc	r2, r8
   84144:	fb92 f2f3 	sdiv	r2, r2, r3
   84148:	fb02 f303 	mul.w	r3, r2, r3
   8414c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8414e:	4648      	mov	r0, r9
   84150:	69e1      	ldr	r1, [r4, #28]
   84152:	4652      	mov	r2, sl
   84154:	47b8      	blx	r7
   84156:	2800      	cmp	r0, #0
   84158:	f77f af31 	ble.w	83fbe <__sfvwrite_r+0xfa>
   8415c:	4602      	mov	r2, r0
   8415e:	e710      	b.n	83f82 <__sfvwrite_r+0xbe>
   84160:	4662      	mov	r2, ip
   84162:	4659      	mov	r1, fp
   84164:	f8cd c000 	str.w	ip, [sp]
   84168:	f000 fc3a 	bl	849e0 <memmove>
   8416c:	f8dd c000 	ldr.w	ip, [sp]
   84170:	6823      	ldr	r3, [r4, #0]
   84172:	4648      	mov	r0, r9
   84174:	4463      	add	r3, ip
   84176:	6023      	str	r3, [r4, #0]
   84178:	4621      	mov	r1, r4
   8417a:	f8cd c000 	str.w	ip, [sp]
   8417e:	f7ff fc75 	bl	83a6c <_fflush_r>
   84182:	f8dd c000 	ldr.w	ip, [sp]
   84186:	2800      	cmp	r0, #0
   84188:	f47f af19 	bne.w	83fbe <__sfvwrite_r+0xfa>
   8418c:	4667      	mov	r7, ip
   8418e:	e743      	b.n	84018 <__sfvwrite_r+0x154>
   84190:	4648      	mov	r0, r9
   84192:	f8cd c000 	str.w	ip, [sp]
   84196:	f000 fc8d 	bl	84ab4 <_realloc_r>
   8419a:	f8dd c000 	ldr.w	ip, [sp]
   8419e:	4683      	mov	fp, r0
   841a0:	2800      	cmp	r0, #0
   841a2:	d1be      	bne.n	84122 <__sfvwrite_r+0x25e>
   841a4:	4648      	mov	r0, r9
   841a6:	6921      	ldr	r1, [r4, #16]
   841a8:	f7ff fdc0 	bl	83d2c <_free_r>
   841ac:	89a3      	ldrh	r3, [r4, #12]
   841ae:	220c      	movs	r2, #12
   841b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   841b4:	b29b      	uxth	r3, r3
   841b6:	f8c9 2000 	str.w	r2, [r9]
   841ba:	e701      	b.n	83fc0 <__sfvwrite_r+0xfc>
   841bc:	2701      	movs	r7, #1
   841be:	f108 0a01 	add.w	sl, r8, #1
   841c2:	9701      	str	r7, [sp, #4]
   841c4:	e70e      	b.n	83fe4 <__sfvwrite_r+0x120>
   841c6:	f04f 30ff 	mov.w	r0, #4294967295
   841ca:	e6aa      	b.n	83f22 <__sfvwrite_r+0x5e>
   841cc:	230c      	movs	r3, #12
   841ce:	f8c9 3000 	str.w	r3, [r9]
   841d2:	89a3      	ldrh	r3, [r4, #12]
   841d4:	e6f4      	b.n	83fc0 <__sfvwrite_r+0xfc>
   841d6:	bf00      	nop
   841d8:	7ffffc00 	.word	0x7ffffc00

000841dc <_fwalk>:
   841dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   841e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   841e4:	4688      	mov	r8, r1
   841e6:	d019      	beq.n	8421c <_fwalk+0x40>
   841e8:	2600      	movs	r6, #0
   841ea:	687d      	ldr	r5, [r7, #4]
   841ec:	68bc      	ldr	r4, [r7, #8]
   841ee:	3d01      	subs	r5, #1
   841f0:	d40e      	bmi.n	84210 <_fwalk+0x34>
   841f2:	89a3      	ldrh	r3, [r4, #12]
   841f4:	3d01      	subs	r5, #1
   841f6:	2b01      	cmp	r3, #1
   841f8:	d906      	bls.n	84208 <_fwalk+0x2c>
   841fa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   841fe:	4620      	mov	r0, r4
   84200:	3301      	adds	r3, #1
   84202:	d001      	beq.n	84208 <_fwalk+0x2c>
   84204:	47c0      	blx	r8
   84206:	4306      	orrs	r6, r0
   84208:	1c6b      	adds	r3, r5, #1
   8420a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8420e:	d1f0      	bne.n	841f2 <_fwalk+0x16>
   84210:	683f      	ldr	r7, [r7, #0]
   84212:	2f00      	cmp	r7, #0
   84214:	d1e9      	bne.n	841ea <_fwalk+0xe>
   84216:	4630      	mov	r0, r6
   84218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8421c:	463e      	mov	r6, r7
   8421e:	4630      	mov	r0, r6
   84220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084224 <__locale_charset>:
   84224:	4800      	ldr	r0, [pc, #0]	; (84228 <__locale_charset+0x4>)
   84226:	4770      	bx	lr
   84228:	2007058c 	.word	0x2007058c

0008422c <__locale_mb_cur_max>:
   8422c:	4b01      	ldr	r3, [pc, #4]	; (84234 <__locale_mb_cur_max+0x8>)
   8422e:	6818      	ldr	r0, [r3, #0]
   84230:	4770      	bx	lr
   84232:	bf00      	nop
   84234:	200705ac 	.word	0x200705ac

00084238 <__smakebuf_r>:
   84238:	b5f0      	push	{r4, r5, r6, r7, lr}
   8423a:	898b      	ldrh	r3, [r1, #12]
   8423c:	b091      	sub	sp, #68	; 0x44
   8423e:	b29a      	uxth	r2, r3
   84240:	0796      	lsls	r6, r2, #30
   84242:	460c      	mov	r4, r1
   84244:	4605      	mov	r5, r0
   84246:	d437      	bmi.n	842b8 <__smakebuf_r+0x80>
   84248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8424c:	2900      	cmp	r1, #0
   8424e:	db17      	blt.n	84280 <__smakebuf_r+0x48>
   84250:	aa01      	add	r2, sp, #4
   84252:	f000 ff5b 	bl	8510c <_fstat_r>
   84256:	2800      	cmp	r0, #0
   84258:	db10      	blt.n	8427c <__smakebuf_r+0x44>
   8425a:	9b02      	ldr	r3, [sp, #8]
   8425c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84260:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84264:	424f      	negs	r7, r1
   84266:	414f      	adcs	r7, r1
   84268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8426c:	d02c      	beq.n	842c8 <__smakebuf_r+0x90>
   8426e:	89a3      	ldrh	r3, [r4, #12]
   84270:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84278:	81a3      	strh	r3, [r4, #12]
   8427a:	e00b      	b.n	84294 <__smakebuf_r+0x5c>
   8427c:	89a3      	ldrh	r3, [r4, #12]
   8427e:	b29a      	uxth	r2, r3
   84280:	f012 0f80 	tst.w	r2, #128	; 0x80
   84284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84288:	81a3      	strh	r3, [r4, #12]
   8428a:	bf14      	ite	ne
   8428c:	2640      	movne	r6, #64	; 0x40
   8428e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84292:	2700      	movs	r7, #0
   84294:	4628      	mov	r0, r5
   84296:	4631      	mov	r1, r6
   84298:	f000 f846 	bl	84328 <_malloc_r>
   8429c:	89a3      	ldrh	r3, [r4, #12]
   8429e:	2800      	cmp	r0, #0
   842a0:	d029      	beq.n	842f6 <__smakebuf_r+0xbe>
   842a2:	4a1b      	ldr	r2, [pc, #108]	; (84310 <__smakebuf_r+0xd8>)
   842a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   842a8:	63ea      	str	r2, [r5, #60]	; 0x3c
   842aa:	81a3      	strh	r3, [r4, #12]
   842ac:	6020      	str	r0, [r4, #0]
   842ae:	6120      	str	r0, [r4, #16]
   842b0:	6166      	str	r6, [r4, #20]
   842b2:	b9a7      	cbnz	r7, 842de <__smakebuf_r+0xa6>
   842b4:	b011      	add	sp, #68	; 0x44
   842b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   842b8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   842bc:	2201      	movs	r2, #1
   842be:	600b      	str	r3, [r1, #0]
   842c0:	610b      	str	r3, [r1, #16]
   842c2:	614a      	str	r2, [r1, #20]
   842c4:	b011      	add	sp, #68	; 0x44
   842c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   842c8:	4a12      	ldr	r2, [pc, #72]	; (84314 <__smakebuf_r+0xdc>)
   842ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   842cc:	4293      	cmp	r3, r2
   842ce:	d1ce      	bne.n	8426e <__smakebuf_r+0x36>
   842d0:	89a3      	ldrh	r3, [r4, #12]
   842d2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   842d6:	4333      	orrs	r3, r6
   842d8:	81a3      	strh	r3, [r4, #12]
   842da:	64e6      	str	r6, [r4, #76]	; 0x4c
   842dc:	e7da      	b.n	84294 <__smakebuf_r+0x5c>
   842de:	4628      	mov	r0, r5
   842e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   842e4:	f000 ff26 	bl	85134 <_isatty_r>
   842e8:	2800      	cmp	r0, #0
   842ea:	d0e3      	beq.n	842b4 <__smakebuf_r+0x7c>
   842ec:	89a3      	ldrh	r3, [r4, #12]
   842ee:	f043 0301 	orr.w	r3, r3, #1
   842f2:	81a3      	strh	r3, [r4, #12]
   842f4:	e7de      	b.n	842b4 <__smakebuf_r+0x7c>
   842f6:	059a      	lsls	r2, r3, #22
   842f8:	d4dc      	bmi.n	842b4 <__smakebuf_r+0x7c>
   842fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   842fe:	f043 0302 	orr.w	r3, r3, #2
   84302:	2101      	movs	r1, #1
   84304:	81a3      	strh	r3, [r4, #12]
   84306:	6022      	str	r2, [r4, #0]
   84308:	6122      	str	r2, [r4, #16]
   8430a:	6161      	str	r1, [r4, #20]
   8430c:	e7d2      	b.n	842b4 <__smakebuf_r+0x7c>
   8430e:	bf00      	nop
   84310:	00083a99 	.word	0x00083a99
   84314:	00084ef5 	.word	0x00084ef5

00084318 <malloc>:
   84318:	4b02      	ldr	r3, [pc, #8]	; (84324 <malloc+0xc>)
   8431a:	4601      	mov	r1, r0
   8431c:	6818      	ldr	r0, [r3, #0]
   8431e:	f000 b803 	b.w	84328 <_malloc_r>
   84322:	bf00      	nop
   84324:	20070588 	.word	0x20070588

00084328 <_malloc_r>:
   84328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8432c:	f101 050b 	add.w	r5, r1, #11
   84330:	2d16      	cmp	r5, #22
   84332:	b083      	sub	sp, #12
   84334:	4606      	mov	r6, r0
   84336:	d927      	bls.n	84388 <_malloc_r+0x60>
   84338:	f035 0507 	bics.w	r5, r5, #7
   8433c:	d427      	bmi.n	8438e <_malloc_r+0x66>
   8433e:	42a9      	cmp	r1, r5
   84340:	d825      	bhi.n	8438e <_malloc_r+0x66>
   84342:	4630      	mov	r0, r6
   84344:	f000 fbb2 	bl	84aac <__malloc_lock>
   84348:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8434c:	d226      	bcs.n	8439c <_malloc_r+0x74>
   8434e:	4fc1      	ldr	r7, [pc, #772]	; (84654 <_malloc_r+0x32c>)
   84350:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84354:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84358:	68dc      	ldr	r4, [r3, #12]
   8435a:	429c      	cmp	r4, r3
   8435c:	f000 81d2 	beq.w	84704 <_malloc_r+0x3dc>
   84360:	6863      	ldr	r3, [r4, #4]
   84362:	68e2      	ldr	r2, [r4, #12]
   84364:	f023 0303 	bic.w	r3, r3, #3
   84368:	4423      	add	r3, r4
   8436a:	6858      	ldr	r0, [r3, #4]
   8436c:	68a1      	ldr	r1, [r4, #8]
   8436e:	f040 0501 	orr.w	r5, r0, #1
   84372:	60ca      	str	r2, [r1, #12]
   84374:	4630      	mov	r0, r6
   84376:	6091      	str	r1, [r2, #8]
   84378:	605d      	str	r5, [r3, #4]
   8437a:	f000 fb99 	bl	84ab0 <__malloc_unlock>
   8437e:	3408      	adds	r4, #8
   84380:	4620      	mov	r0, r4
   84382:	b003      	add	sp, #12
   84384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84388:	2510      	movs	r5, #16
   8438a:	42a9      	cmp	r1, r5
   8438c:	d9d9      	bls.n	84342 <_malloc_r+0x1a>
   8438e:	2400      	movs	r4, #0
   84390:	230c      	movs	r3, #12
   84392:	4620      	mov	r0, r4
   84394:	6033      	str	r3, [r6, #0]
   84396:	b003      	add	sp, #12
   84398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8439c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   843a0:	f000 8089 	beq.w	844b6 <_malloc_r+0x18e>
   843a4:	f1bc 0f04 	cmp.w	ip, #4
   843a8:	f200 8160 	bhi.w	8466c <_malloc_r+0x344>
   843ac:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   843b0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   843b4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   843b8:	4fa6      	ldr	r7, [pc, #664]	; (84654 <_malloc_r+0x32c>)
   843ba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   843be:	68cc      	ldr	r4, [r1, #12]
   843c0:	42a1      	cmp	r1, r4
   843c2:	d105      	bne.n	843d0 <_malloc_r+0xa8>
   843c4:	e00c      	b.n	843e0 <_malloc_r+0xb8>
   843c6:	2b00      	cmp	r3, #0
   843c8:	da79      	bge.n	844be <_malloc_r+0x196>
   843ca:	68e4      	ldr	r4, [r4, #12]
   843cc:	42a1      	cmp	r1, r4
   843ce:	d007      	beq.n	843e0 <_malloc_r+0xb8>
   843d0:	6862      	ldr	r2, [r4, #4]
   843d2:	f022 0203 	bic.w	r2, r2, #3
   843d6:	1b53      	subs	r3, r2, r5
   843d8:	2b0f      	cmp	r3, #15
   843da:	ddf4      	ble.n	843c6 <_malloc_r+0x9e>
   843dc:	f10c 3cff 	add.w	ip, ip, #4294967295
   843e0:	f10c 0c01 	add.w	ip, ip, #1
   843e4:	4b9b      	ldr	r3, [pc, #620]	; (84654 <_malloc_r+0x32c>)
   843e6:	693c      	ldr	r4, [r7, #16]
   843e8:	f103 0e08 	add.w	lr, r3, #8
   843ec:	4574      	cmp	r4, lr
   843ee:	f000 817e 	beq.w	846ee <_malloc_r+0x3c6>
   843f2:	6861      	ldr	r1, [r4, #4]
   843f4:	f021 0103 	bic.w	r1, r1, #3
   843f8:	1b4a      	subs	r2, r1, r5
   843fa:	2a0f      	cmp	r2, #15
   843fc:	f300 8164 	bgt.w	846c8 <_malloc_r+0x3a0>
   84400:	2a00      	cmp	r2, #0
   84402:	f8c3 e014 	str.w	lr, [r3, #20]
   84406:	f8c3 e010 	str.w	lr, [r3, #16]
   8440a:	da69      	bge.n	844e0 <_malloc_r+0x1b8>
   8440c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84410:	f080 813a 	bcs.w	84688 <_malloc_r+0x360>
   84414:	08c9      	lsrs	r1, r1, #3
   84416:	108a      	asrs	r2, r1, #2
   84418:	f04f 0801 	mov.w	r8, #1
   8441c:	fa08 f802 	lsl.w	r8, r8, r2
   84420:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84424:	685a      	ldr	r2, [r3, #4]
   84426:	6888      	ldr	r0, [r1, #8]
   84428:	ea48 0202 	orr.w	r2, r8, r2
   8442c:	60a0      	str	r0, [r4, #8]
   8442e:	60e1      	str	r1, [r4, #12]
   84430:	605a      	str	r2, [r3, #4]
   84432:	608c      	str	r4, [r1, #8]
   84434:	60c4      	str	r4, [r0, #12]
   84436:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8443a:	2001      	movs	r0, #1
   8443c:	4098      	lsls	r0, r3
   8443e:	4290      	cmp	r0, r2
   84440:	d85b      	bhi.n	844fa <_malloc_r+0x1d2>
   84442:	4202      	tst	r2, r0
   84444:	d106      	bne.n	84454 <_malloc_r+0x12c>
   84446:	f02c 0c03 	bic.w	ip, ip, #3
   8444a:	0040      	lsls	r0, r0, #1
   8444c:	4202      	tst	r2, r0
   8444e:	f10c 0c04 	add.w	ip, ip, #4
   84452:	d0fa      	beq.n	8444a <_malloc_r+0x122>
   84454:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84458:	4644      	mov	r4, r8
   8445a:	46e1      	mov	r9, ip
   8445c:	68e3      	ldr	r3, [r4, #12]
   8445e:	429c      	cmp	r4, r3
   84460:	d107      	bne.n	84472 <_malloc_r+0x14a>
   84462:	e146      	b.n	846f2 <_malloc_r+0x3ca>
   84464:	2a00      	cmp	r2, #0
   84466:	f280 8157 	bge.w	84718 <_malloc_r+0x3f0>
   8446a:	68db      	ldr	r3, [r3, #12]
   8446c:	429c      	cmp	r4, r3
   8446e:	f000 8140 	beq.w	846f2 <_malloc_r+0x3ca>
   84472:	6859      	ldr	r1, [r3, #4]
   84474:	f021 0103 	bic.w	r1, r1, #3
   84478:	1b4a      	subs	r2, r1, r5
   8447a:	2a0f      	cmp	r2, #15
   8447c:	ddf2      	ble.n	84464 <_malloc_r+0x13c>
   8447e:	461c      	mov	r4, r3
   84480:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84484:	68d9      	ldr	r1, [r3, #12]
   84486:	f045 0901 	orr.w	r9, r5, #1
   8448a:	f042 0801 	orr.w	r8, r2, #1
   8448e:	441d      	add	r5, r3
   84490:	f8c3 9004 	str.w	r9, [r3, #4]
   84494:	4630      	mov	r0, r6
   84496:	f8cc 100c 	str.w	r1, [ip, #12]
   8449a:	f8c1 c008 	str.w	ip, [r1, #8]
   8449e:	617d      	str	r5, [r7, #20]
   844a0:	613d      	str	r5, [r7, #16]
   844a2:	f8c5 e00c 	str.w	lr, [r5, #12]
   844a6:	f8c5 e008 	str.w	lr, [r5, #8]
   844aa:	f8c5 8004 	str.w	r8, [r5, #4]
   844ae:	50aa      	str	r2, [r5, r2]
   844b0:	f000 fafe 	bl	84ab0 <__malloc_unlock>
   844b4:	e764      	b.n	84380 <_malloc_r+0x58>
   844b6:	217e      	movs	r1, #126	; 0x7e
   844b8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   844bc:	e77c      	b.n	843b8 <_malloc_r+0x90>
   844be:	4422      	add	r2, r4
   844c0:	6850      	ldr	r0, [r2, #4]
   844c2:	68e3      	ldr	r3, [r4, #12]
   844c4:	68a1      	ldr	r1, [r4, #8]
   844c6:	f040 0501 	orr.w	r5, r0, #1
   844ca:	60cb      	str	r3, [r1, #12]
   844cc:	4630      	mov	r0, r6
   844ce:	6099      	str	r1, [r3, #8]
   844d0:	6055      	str	r5, [r2, #4]
   844d2:	f000 faed 	bl	84ab0 <__malloc_unlock>
   844d6:	3408      	adds	r4, #8
   844d8:	4620      	mov	r0, r4
   844da:	b003      	add	sp, #12
   844dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844e0:	4421      	add	r1, r4
   844e2:	684b      	ldr	r3, [r1, #4]
   844e4:	4630      	mov	r0, r6
   844e6:	f043 0301 	orr.w	r3, r3, #1
   844ea:	604b      	str	r3, [r1, #4]
   844ec:	f000 fae0 	bl	84ab0 <__malloc_unlock>
   844f0:	3408      	adds	r4, #8
   844f2:	4620      	mov	r0, r4
   844f4:	b003      	add	sp, #12
   844f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844fa:	68bc      	ldr	r4, [r7, #8]
   844fc:	6863      	ldr	r3, [r4, #4]
   844fe:	f023 0903 	bic.w	r9, r3, #3
   84502:	45a9      	cmp	r9, r5
   84504:	d304      	bcc.n	84510 <_malloc_r+0x1e8>
   84506:	ebc5 0309 	rsb	r3, r5, r9
   8450a:	2b0f      	cmp	r3, #15
   8450c:	f300 8091 	bgt.w	84632 <_malloc_r+0x30a>
   84510:	4b51      	ldr	r3, [pc, #324]	; (84658 <_malloc_r+0x330>)
   84512:	4a52      	ldr	r2, [pc, #328]	; (8465c <_malloc_r+0x334>)
   84514:	6819      	ldr	r1, [r3, #0]
   84516:	6813      	ldr	r3, [r2, #0]
   84518:	eb05 0a01 	add.w	sl, r5, r1
   8451c:	3301      	adds	r3, #1
   8451e:	eb04 0b09 	add.w	fp, r4, r9
   84522:	f000 8161 	beq.w	847e8 <_malloc_r+0x4c0>
   84526:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8452a:	f10a 0a0f 	add.w	sl, sl, #15
   8452e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   84532:	f02a 0a0f 	bic.w	sl, sl, #15
   84536:	4630      	mov	r0, r6
   84538:	4651      	mov	r1, sl
   8453a:	9201      	str	r2, [sp, #4]
   8453c:	f000 fc9a 	bl	84e74 <_sbrk_r>
   84540:	f1b0 3fff 	cmp.w	r0, #4294967295
   84544:	4680      	mov	r8, r0
   84546:	9a01      	ldr	r2, [sp, #4]
   84548:	f000 8101 	beq.w	8474e <_malloc_r+0x426>
   8454c:	4583      	cmp	fp, r0
   8454e:	f200 80fb 	bhi.w	84748 <_malloc_r+0x420>
   84552:	f8df c114 	ldr.w	ip, [pc, #276]	; 84668 <_malloc_r+0x340>
   84556:	45c3      	cmp	fp, r8
   84558:	f8dc 3000 	ldr.w	r3, [ip]
   8455c:	4453      	add	r3, sl
   8455e:	f8cc 3000 	str.w	r3, [ip]
   84562:	f000 814a 	beq.w	847fa <_malloc_r+0x4d2>
   84566:	6812      	ldr	r2, [r2, #0]
   84568:	493c      	ldr	r1, [pc, #240]	; (8465c <_malloc_r+0x334>)
   8456a:	3201      	adds	r2, #1
   8456c:	bf1b      	ittet	ne
   8456e:	ebcb 0b08 	rsbne	fp, fp, r8
   84572:	445b      	addne	r3, fp
   84574:	f8c1 8000 	streq.w	r8, [r1]
   84578:	f8cc 3000 	strne.w	r3, [ip]
   8457c:	f018 0307 	ands.w	r3, r8, #7
   84580:	f000 8114 	beq.w	847ac <_malloc_r+0x484>
   84584:	f1c3 0208 	rsb	r2, r3, #8
   84588:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   8458c:	4490      	add	r8, r2
   8458e:	3308      	adds	r3, #8
   84590:	44c2      	add	sl, r8
   84592:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   84596:	ebca 0a03 	rsb	sl, sl, r3
   8459a:	4651      	mov	r1, sl
   8459c:	4630      	mov	r0, r6
   8459e:	f8cd c004 	str.w	ip, [sp, #4]
   845a2:	f000 fc67 	bl	84e74 <_sbrk_r>
   845a6:	1c43      	adds	r3, r0, #1
   845a8:	f8dd c004 	ldr.w	ip, [sp, #4]
   845ac:	f000 8135 	beq.w	8481a <_malloc_r+0x4f2>
   845b0:	ebc8 0200 	rsb	r2, r8, r0
   845b4:	4452      	add	r2, sl
   845b6:	f042 0201 	orr.w	r2, r2, #1
   845ba:	f8dc 3000 	ldr.w	r3, [ip]
   845be:	42bc      	cmp	r4, r7
   845c0:	4453      	add	r3, sl
   845c2:	f8c7 8008 	str.w	r8, [r7, #8]
   845c6:	f8cc 3000 	str.w	r3, [ip]
   845ca:	f8c8 2004 	str.w	r2, [r8, #4]
   845ce:	f8df a098 	ldr.w	sl, [pc, #152]	; 84668 <_malloc_r+0x340>
   845d2:	d015      	beq.n	84600 <_malloc_r+0x2d8>
   845d4:	f1b9 0f0f 	cmp.w	r9, #15
   845d8:	f240 80eb 	bls.w	847b2 <_malloc_r+0x48a>
   845dc:	6861      	ldr	r1, [r4, #4]
   845de:	f1a9 020c 	sub.w	r2, r9, #12
   845e2:	f022 0207 	bic.w	r2, r2, #7
   845e6:	f001 0101 	and.w	r1, r1, #1
   845ea:	ea42 0e01 	orr.w	lr, r2, r1
   845ee:	2005      	movs	r0, #5
   845f0:	18a1      	adds	r1, r4, r2
   845f2:	2a0f      	cmp	r2, #15
   845f4:	f8c4 e004 	str.w	lr, [r4, #4]
   845f8:	6048      	str	r0, [r1, #4]
   845fa:	6088      	str	r0, [r1, #8]
   845fc:	f200 8111 	bhi.w	84822 <_malloc_r+0x4fa>
   84600:	4a17      	ldr	r2, [pc, #92]	; (84660 <_malloc_r+0x338>)
   84602:	68bc      	ldr	r4, [r7, #8]
   84604:	6811      	ldr	r1, [r2, #0]
   84606:	428b      	cmp	r3, r1
   84608:	bf88      	it	hi
   8460a:	6013      	strhi	r3, [r2, #0]
   8460c:	4a15      	ldr	r2, [pc, #84]	; (84664 <_malloc_r+0x33c>)
   8460e:	6811      	ldr	r1, [r2, #0]
   84610:	428b      	cmp	r3, r1
   84612:	bf88      	it	hi
   84614:	6013      	strhi	r3, [r2, #0]
   84616:	6862      	ldr	r2, [r4, #4]
   84618:	f022 0203 	bic.w	r2, r2, #3
   8461c:	4295      	cmp	r5, r2
   8461e:	ebc5 0302 	rsb	r3, r5, r2
   84622:	d801      	bhi.n	84628 <_malloc_r+0x300>
   84624:	2b0f      	cmp	r3, #15
   84626:	dc04      	bgt.n	84632 <_malloc_r+0x30a>
   84628:	4630      	mov	r0, r6
   8462a:	f000 fa41 	bl	84ab0 <__malloc_unlock>
   8462e:	2400      	movs	r4, #0
   84630:	e6a6      	b.n	84380 <_malloc_r+0x58>
   84632:	f045 0201 	orr.w	r2, r5, #1
   84636:	f043 0301 	orr.w	r3, r3, #1
   8463a:	4425      	add	r5, r4
   8463c:	6062      	str	r2, [r4, #4]
   8463e:	4630      	mov	r0, r6
   84640:	60bd      	str	r5, [r7, #8]
   84642:	606b      	str	r3, [r5, #4]
   84644:	f000 fa34 	bl	84ab0 <__malloc_unlock>
   84648:	3408      	adds	r4, #8
   8464a:	4620      	mov	r0, r4
   8464c:	b003      	add	sp, #12
   8464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84652:	bf00      	nop
   84654:	200705b0 	.word	0x200705b0
   84658:	20070afc 	.word	0x20070afc
   8465c:	200709bc 	.word	0x200709bc
   84660:	20070af8 	.word	0x20070af8
   84664:	20070af4 	.word	0x20070af4
   84668:	20070b00 	.word	0x20070b00
   8466c:	f1bc 0f14 	cmp.w	ip, #20
   84670:	d961      	bls.n	84736 <_malloc_r+0x40e>
   84672:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84676:	f200 808f 	bhi.w	84798 <_malloc_r+0x470>
   8467a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8467e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   84682:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84686:	e697      	b.n	843b8 <_malloc_r+0x90>
   84688:	0a4b      	lsrs	r3, r1, #9
   8468a:	2b04      	cmp	r3, #4
   8468c:	d958      	bls.n	84740 <_malloc_r+0x418>
   8468e:	2b14      	cmp	r3, #20
   84690:	f200 80ad 	bhi.w	847ee <_malloc_r+0x4c6>
   84694:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   84698:	0050      	lsls	r0, r2, #1
   8469a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8469e:	6883      	ldr	r3, [r0, #8]
   846a0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8485c <_malloc_r+0x534>
   846a4:	4283      	cmp	r3, r0
   846a6:	f000 808a 	beq.w	847be <_malloc_r+0x496>
   846aa:	685a      	ldr	r2, [r3, #4]
   846ac:	f022 0203 	bic.w	r2, r2, #3
   846b0:	4291      	cmp	r1, r2
   846b2:	d202      	bcs.n	846ba <_malloc_r+0x392>
   846b4:	689b      	ldr	r3, [r3, #8]
   846b6:	4298      	cmp	r0, r3
   846b8:	d1f7      	bne.n	846aa <_malloc_r+0x382>
   846ba:	68d9      	ldr	r1, [r3, #12]
   846bc:	687a      	ldr	r2, [r7, #4]
   846be:	60e1      	str	r1, [r4, #12]
   846c0:	60a3      	str	r3, [r4, #8]
   846c2:	608c      	str	r4, [r1, #8]
   846c4:	60dc      	str	r4, [r3, #12]
   846c6:	e6b6      	b.n	84436 <_malloc_r+0x10e>
   846c8:	f045 0701 	orr.w	r7, r5, #1
   846cc:	f042 0101 	orr.w	r1, r2, #1
   846d0:	4425      	add	r5, r4
   846d2:	6067      	str	r7, [r4, #4]
   846d4:	4630      	mov	r0, r6
   846d6:	615d      	str	r5, [r3, #20]
   846d8:	611d      	str	r5, [r3, #16]
   846da:	f8c5 e00c 	str.w	lr, [r5, #12]
   846de:	f8c5 e008 	str.w	lr, [r5, #8]
   846e2:	6069      	str	r1, [r5, #4]
   846e4:	50aa      	str	r2, [r5, r2]
   846e6:	3408      	adds	r4, #8
   846e8:	f000 f9e2 	bl	84ab0 <__malloc_unlock>
   846ec:	e648      	b.n	84380 <_malloc_r+0x58>
   846ee:	685a      	ldr	r2, [r3, #4]
   846f0:	e6a1      	b.n	84436 <_malloc_r+0x10e>
   846f2:	f109 0901 	add.w	r9, r9, #1
   846f6:	f019 0f03 	tst.w	r9, #3
   846fa:	f104 0408 	add.w	r4, r4, #8
   846fe:	f47f aead 	bne.w	8445c <_malloc_r+0x134>
   84702:	e02d      	b.n	84760 <_malloc_r+0x438>
   84704:	f104 0308 	add.w	r3, r4, #8
   84708:	6964      	ldr	r4, [r4, #20]
   8470a:	42a3      	cmp	r3, r4
   8470c:	bf08      	it	eq
   8470e:	f10c 0c02 	addeq.w	ip, ip, #2
   84712:	f43f ae67 	beq.w	843e4 <_malloc_r+0xbc>
   84716:	e623      	b.n	84360 <_malloc_r+0x38>
   84718:	4419      	add	r1, r3
   8471a:	6848      	ldr	r0, [r1, #4]
   8471c:	461c      	mov	r4, r3
   8471e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   84722:	68db      	ldr	r3, [r3, #12]
   84724:	f040 0501 	orr.w	r5, r0, #1
   84728:	604d      	str	r5, [r1, #4]
   8472a:	4630      	mov	r0, r6
   8472c:	60d3      	str	r3, [r2, #12]
   8472e:	609a      	str	r2, [r3, #8]
   84730:	f000 f9be 	bl	84ab0 <__malloc_unlock>
   84734:	e624      	b.n	84380 <_malloc_r+0x58>
   84736:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8473a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8473e:	e63b      	b.n	843b8 <_malloc_r+0x90>
   84740:	098a      	lsrs	r2, r1, #6
   84742:	3238      	adds	r2, #56	; 0x38
   84744:	0050      	lsls	r0, r2, #1
   84746:	e7a8      	b.n	8469a <_malloc_r+0x372>
   84748:	42bc      	cmp	r4, r7
   8474a:	f43f af02 	beq.w	84552 <_malloc_r+0x22a>
   8474e:	68bc      	ldr	r4, [r7, #8]
   84750:	6862      	ldr	r2, [r4, #4]
   84752:	f022 0203 	bic.w	r2, r2, #3
   84756:	e761      	b.n	8461c <_malloc_r+0x2f4>
   84758:	f8d8 8000 	ldr.w	r8, [r8]
   8475c:	4598      	cmp	r8, r3
   8475e:	d17a      	bne.n	84856 <_malloc_r+0x52e>
   84760:	f01c 0f03 	tst.w	ip, #3
   84764:	f1a8 0308 	sub.w	r3, r8, #8
   84768:	f10c 3cff 	add.w	ip, ip, #4294967295
   8476c:	d1f4      	bne.n	84758 <_malloc_r+0x430>
   8476e:	687b      	ldr	r3, [r7, #4]
   84770:	ea23 0300 	bic.w	r3, r3, r0
   84774:	607b      	str	r3, [r7, #4]
   84776:	0040      	lsls	r0, r0, #1
   84778:	4298      	cmp	r0, r3
   8477a:	f63f aebe 	bhi.w	844fa <_malloc_r+0x1d2>
   8477e:	2800      	cmp	r0, #0
   84780:	f43f aebb 	beq.w	844fa <_malloc_r+0x1d2>
   84784:	4203      	tst	r3, r0
   84786:	46cc      	mov	ip, r9
   84788:	f47f ae64 	bne.w	84454 <_malloc_r+0x12c>
   8478c:	0040      	lsls	r0, r0, #1
   8478e:	4203      	tst	r3, r0
   84790:	f10c 0c04 	add.w	ip, ip, #4
   84794:	d0fa      	beq.n	8478c <_malloc_r+0x464>
   84796:	e65d      	b.n	84454 <_malloc_r+0x12c>
   84798:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8479c:	d819      	bhi.n	847d2 <_malloc_r+0x4aa>
   8479e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   847a2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   847a6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   847aa:	e605      	b.n	843b8 <_malloc_r+0x90>
   847ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   847b0:	e6ee      	b.n	84590 <_malloc_r+0x268>
   847b2:	2301      	movs	r3, #1
   847b4:	f8c8 3004 	str.w	r3, [r8, #4]
   847b8:	4644      	mov	r4, r8
   847ba:	2200      	movs	r2, #0
   847bc:	e72e      	b.n	8461c <_malloc_r+0x2f4>
   847be:	1092      	asrs	r2, r2, #2
   847c0:	2001      	movs	r0, #1
   847c2:	4090      	lsls	r0, r2
   847c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   847c8:	4619      	mov	r1, r3
   847ca:	4302      	orrs	r2, r0
   847cc:	f8c8 2004 	str.w	r2, [r8, #4]
   847d0:	e775      	b.n	846be <_malloc_r+0x396>
   847d2:	f240 5354 	movw	r3, #1364	; 0x554
   847d6:	459c      	cmp	ip, r3
   847d8:	d81b      	bhi.n	84812 <_malloc_r+0x4ea>
   847da:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   847de:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   847e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   847e6:	e5e7      	b.n	843b8 <_malloc_r+0x90>
   847e8:	f10a 0a10 	add.w	sl, sl, #16
   847ec:	e6a3      	b.n	84536 <_malloc_r+0x20e>
   847ee:	2b54      	cmp	r3, #84	; 0x54
   847f0:	d81f      	bhi.n	84832 <_malloc_r+0x50a>
   847f2:	0b0a      	lsrs	r2, r1, #12
   847f4:	326e      	adds	r2, #110	; 0x6e
   847f6:	0050      	lsls	r0, r2, #1
   847f8:	e74f      	b.n	8469a <_malloc_r+0x372>
   847fa:	f3cb 010b 	ubfx	r1, fp, #0, #12
   847fe:	2900      	cmp	r1, #0
   84800:	f47f aeb1 	bne.w	84566 <_malloc_r+0x23e>
   84804:	eb0a 0109 	add.w	r1, sl, r9
   84808:	68ba      	ldr	r2, [r7, #8]
   8480a:	f041 0101 	orr.w	r1, r1, #1
   8480e:	6051      	str	r1, [r2, #4]
   84810:	e6f6      	b.n	84600 <_malloc_r+0x2d8>
   84812:	21fc      	movs	r1, #252	; 0xfc
   84814:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   84818:	e5ce      	b.n	843b8 <_malloc_r+0x90>
   8481a:	2201      	movs	r2, #1
   8481c:	f04f 0a00 	mov.w	sl, #0
   84820:	e6cb      	b.n	845ba <_malloc_r+0x292>
   84822:	f104 0108 	add.w	r1, r4, #8
   84826:	4630      	mov	r0, r6
   84828:	f7ff fa80 	bl	83d2c <_free_r>
   8482c:	f8da 3000 	ldr.w	r3, [sl]
   84830:	e6e6      	b.n	84600 <_malloc_r+0x2d8>
   84832:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84836:	d803      	bhi.n	84840 <_malloc_r+0x518>
   84838:	0bca      	lsrs	r2, r1, #15
   8483a:	3277      	adds	r2, #119	; 0x77
   8483c:	0050      	lsls	r0, r2, #1
   8483e:	e72c      	b.n	8469a <_malloc_r+0x372>
   84840:	f240 5254 	movw	r2, #1364	; 0x554
   84844:	4293      	cmp	r3, r2
   84846:	d803      	bhi.n	84850 <_malloc_r+0x528>
   84848:	0c8a      	lsrs	r2, r1, #18
   8484a:	327c      	adds	r2, #124	; 0x7c
   8484c:	0050      	lsls	r0, r2, #1
   8484e:	e724      	b.n	8469a <_malloc_r+0x372>
   84850:	20fc      	movs	r0, #252	; 0xfc
   84852:	227e      	movs	r2, #126	; 0x7e
   84854:	e721      	b.n	8469a <_malloc_r+0x372>
   84856:	687b      	ldr	r3, [r7, #4]
   84858:	e78d      	b.n	84776 <_malloc_r+0x44e>
   8485a:	bf00      	nop
   8485c:	200705b0 	.word	0x200705b0

00084860 <memchr>:
   84860:	0783      	lsls	r3, r0, #30
   84862:	b470      	push	{r4, r5, r6}
   84864:	b2c9      	uxtb	r1, r1
   84866:	d040      	beq.n	848ea <memchr+0x8a>
   84868:	1e54      	subs	r4, r2, #1
   8486a:	b32a      	cbz	r2, 848b8 <memchr+0x58>
   8486c:	7803      	ldrb	r3, [r0, #0]
   8486e:	428b      	cmp	r3, r1
   84870:	d023      	beq.n	848ba <memchr+0x5a>
   84872:	1c43      	adds	r3, r0, #1
   84874:	e004      	b.n	84880 <memchr+0x20>
   84876:	b1fc      	cbz	r4, 848b8 <memchr+0x58>
   84878:	7805      	ldrb	r5, [r0, #0]
   8487a:	4614      	mov	r4, r2
   8487c:	428d      	cmp	r5, r1
   8487e:	d01c      	beq.n	848ba <memchr+0x5a>
   84880:	f013 0f03 	tst.w	r3, #3
   84884:	4618      	mov	r0, r3
   84886:	f104 32ff 	add.w	r2, r4, #4294967295
   8488a:	f103 0301 	add.w	r3, r3, #1
   8488e:	d1f2      	bne.n	84876 <memchr+0x16>
   84890:	2c03      	cmp	r4, #3
   84892:	d814      	bhi.n	848be <memchr+0x5e>
   84894:	1e65      	subs	r5, r4, #1
   84896:	b354      	cbz	r4, 848ee <memchr+0x8e>
   84898:	7803      	ldrb	r3, [r0, #0]
   8489a:	428b      	cmp	r3, r1
   8489c:	d00d      	beq.n	848ba <memchr+0x5a>
   8489e:	1c42      	adds	r2, r0, #1
   848a0:	2300      	movs	r3, #0
   848a2:	e002      	b.n	848aa <memchr+0x4a>
   848a4:	7804      	ldrb	r4, [r0, #0]
   848a6:	428c      	cmp	r4, r1
   848a8:	d007      	beq.n	848ba <memchr+0x5a>
   848aa:	42ab      	cmp	r3, r5
   848ac:	4610      	mov	r0, r2
   848ae:	f103 0301 	add.w	r3, r3, #1
   848b2:	f102 0201 	add.w	r2, r2, #1
   848b6:	d1f5      	bne.n	848a4 <memchr+0x44>
   848b8:	2000      	movs	r0, #0
   848ba:	bc70      	pop	{r4, r5, r6}
   848bc:	4770      	bx	lr
   848be:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   848c2:	4603      	mov	r3, r0
   848c4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   848c8:	681a      	ldr	r2, [r3, #0]
   848ca:	4618      	mov	r0, r3
   848cc:	4072      	eors	r2, r6
   848ce:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   848d2:	ea25 0202 	bic.w	r2, r5, r2
   848d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   848da:	f103 0304 	add.w	r3, r3, #4
   848de:	d1d9      	bne.n	84894 <memchr+0x34>
   848e0:	3c04      	subs	r4, #4
   848e2:	2c03      	cmp	r4, #3
   848e4:	4618      	mov	r0, r3
   848e6:	d8ef      	bhi.n	848c8 <memchr+0x68>
   848e8:	e7d4      	b.n	84894 <memchr+0x34>
   848ea:	4614      	mov	r4, r2
   848ec:	e7d0      	b.n	84890 <memchr+0x30>
   848ee:	4620      	mov	r0, r4
   848f0:	e7e3      	b.n	848ba <memchr+0x5a>
   848f2:	bf00      	nop

000848f4 <memcpy>:
   848f4:	4684      	mov	ip, r0
   848f6:	ea41 0300 	orr.w	r3, r1, r0
   848fa:	f013 0303 	ands.w	r3, r3, #3
   848fe:	d149      	bne.n	84994 <memcpy+0xa0>
   84900:	3a40      	subs	r2, #64	; 0x40
   84902:	d323      	bcc.n	8494c <memcpy+0x58>
   84904:	680b      	ldr	r3, [r1, #0]
   84906:	6003      	str	r3, [r0, #0]
   84908:	684b      	ldr	r3, [r1, #4]
   8490a:	6043      	str	r3, [r0, #4]
   8490c:	688b      	ldr	r3, [r1, #8]
   8490e:	6083      	str	r3, [r0, #8]
   84910:	68cb      	ldr	r3, [r1, #12]
   84912:	60c3      	str	r3, [r0, #12]
   84914:	690b      	ldr	r3, [r1, #16]
   84916:	6103      	str	r3, [r0, #16]
   84918:	694b      	ldr	r3, [r1, #20]
   8491a:	6143      	str	r3, [r0, #20]
   8491c:	698b      	ldr	r3, [r1, #24]
   8491e:	6183      	str	r3, [r0, #24]
   84920:	69cb      	ldr	r3, [r1, #28]
   84922:	61c3      	str	r3, [r0, #28]
   84924:	6a0b      	ldr	r3, [r1, #32]
   84926:	6203      	str	r3, [r0, #32]
   84928:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8492a:	6243      	str	r3, [r0, #36]	; 0x24
   8492c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8492e:	6283      	str	r3, [r0, #40]	; 0x28
   84930:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84932:	62c3      	str	r3, [r0, #44]	; 0x2c
   84934:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84936:	6303      	str	r3, [r0, #48]	; 0x30
   84938:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8493a:	6343      	str	r3, [r0, #52]	; 0x34
   8493c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8493e:	6383      	str	r3, [r0, #56]	; 0x38
   84940:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84942:	63c3      	str	r3, [r0, #60]	; 0x3c
   84944:	3040      	adds	r0, #64	; 0x40
   84946:	3140      	adds	r1, #64	; 0x40
   84948:	3a40      	subs	r2, #64	; 0x40
   8494a:	d2db      	bcs.n	84904 <memcpy+0x10>
   8494c:	3230      	adds	r2, #48	; 0x30
   8494e:	d30b      	bcc.n	84968 <memcpy+0x74>
   84950:	680b      	ldr	r3, [r1, #0]
   84952:	6003      	str	r3, [r0, #0]
   84954:	684b      	ldr	r3, [r1, #4]
   84956:	6043      	str	r3, [r0, #4]
   84958:	688b      	ldr	r3, [r1, #8]
   8495a:	6083      	str	r3, [r0, #8]
   8495c:	68cb      	ldr	r3, [r1, #12]
   8495e:	60c3      	str	r3, [r0, #12]
   84960:	3010      	adds	r0, #16
   84962:	3110      	adds	r1, #16
   84964:	3a10      	subs	r2, #16
   84966:	d2f3      	bcs.n	84950 <memcpy+0x5c>
   84968:	320c      	adds	r2, #12
   8496a:	d305      	bcc.n	84978 <memcpy+0x84>
   8496c:	f851 3b04 	ldr.w	r3, [r1], #4
   84970:	f840 3b04 	str.w	r3, [r0], #4
   84974:	3a04      	subs	r2, #4
   84976:	d2f9      	bcs.n	8496c <memcpy+0x78>
   84978:	3204      	adds	r2, #4
   8497a:	d008      	beq.n	8498e <memcpy+0x9a>
   8497c:	07d2      	lsls	r2, r2, #31
   8497e:	bf1c      	itt	ne
   84980:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84984:	f800 3b01 	strbne.w	r3, [r0], #1
   84988:	d301      	bcc.n	8498e <memcpy+0x9a>
   8498a:	880b      	ldrh	r3, [r1, #0]
   8498c:	8003      	strh	r3, [r0, #0]
   8498e:	4660      	mov	r0, ip
   84990:	4770      	bx	lr
   84992:	bf00      	nop
   84994:	2a08      	cmp	r2, #8
   84996:	d313      	bcc.n	849c0 <memcpy+0xcc>
   84998:	078b      	lsls	r3, r1, #30
   8499a:	d0b1      	beq.n	84900 <memcpy+0xc>
   8499c:	f010 0303 	ands.w	r3, r0, #3
   849a0:	d0ae      	beq.n	84900 <memcpy+0xc>
   849a2:	f1c3 0304 	rsb	r3, r3, #4
   849a6:	1ad2      	subs	r2, r2, r3
   849a8:	07db      	lsls	r3, r3, #31
   849aa:	bf1c      	itt	ne
   849ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   849b0:	f800 3b01 	strbne.w	r3, [r0], #1
   849b4:	d3a4      	bcc.n	84900 <memcpy+0xc>
   849b6:	f831 3b02 	ldrh.w	r3, [r1], #2
   849ba:	f820 3b02 	strh.w	r3, [r0], #2
   849be:	e79f      	b.n	84900 <memcpy+0xc>
   849c0:	3a04      	subs	r2, #4
   849c2:	d3d9      	bcc.n	84978 <memcpy+0x84>
   849c4:	3a01      	subs	r2, #1
   849c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   849ca:	f800 3b01 	strb.w	r3, [r0], #1
   849ce:	d2f9      	bcs.n	849c4 <memcpy+0xd0>
   849d0:	780b      	ldrb	r3, [r1, #0]
   849d2:	7003      	strb	r3, [r0, #0]
   849d4:	784b      	ldrb	r3, [r1, #1]
   849d6:	7043      	strb	r3, [r0, #1]
   849d8:	788b      	ldrb	r3, [r1, #2]
   849da:	7083      	strb	r3, [r0, #2]
   849dc:	4660      	mov	r0, ip
   849de:	4770      	bx	lr

000849e0 <memmove>:
   849e0:	4288      	cmp	r0, r1
   849e2:	b4f0      	push	{r4, r5, r6, r7}
   849e4:	d910      	bls.n	84a08 <memmove+0x28>
   849e6:	188c      	adds	r4, r1, r2
   849e8:	42a0      	cmp	r0, r4
   849ea:	d20d      	bcs.n	84a08 <memmove+0x28>
   849ec:	1885      	adds	r5, r0, r2
   849ee:	1e53      	subs	r3, r2, #1
   849f0:	b142      	cbz	r2, 84a04 <memmove+0x24>
   849f2:	4621      	mov	r1, r4
   849f4:	462a      	mov	r2, r5
   849f6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   849fa:	3b01      	subs	r3, #1
   849fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a00:	1c5c      	adds	r4, r3, #1
   84a02:	d1f8      	bne.n	849f6 <memmove+0x16>
   84a04:	bcf0      	pop	{r4, r5, r6, r7}
   84a06:	4770      	bx	lr
   84a08:	2a0f      	cmp	r2, #15
   84a0a:	d944      	bls.n	84a96 <memmove+0xb6>
   84a0c:	ea40 0301 	orr.w	r3, r0, r1
   84a10:	079b      	lsls	r3, r3, #30
   84a12:	d144      	bne.n	84a9e <memmove+0xbe>
   84a14:	f1a2 0710 	sub.w	r7, r2, #16
   84a18:	093f      	lsrs	r7, r7, #4
   84a1a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   84a1e:	3610      	adds	r6, #16
   84a20:	460c      	mov	r4, r1
   84a22:	4603      	mov	r3, r0
   84a24:	6825      	ldr	r5, [r4, #0]
   84a26:	3310      	adds	r3, #16
   84a28:	f843 5c10 	str.w	r5, [r3, #-16]
   84a2c:	6865      	ldr	r5, [r4, #4]
   84a2e:	3410      	adds	r4, #16
   84a30:	f843 5c0c 	str.w	r5, [r3, #-12]
   84a34:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84a38:	f843 5c08 	str.w	r5, [r3, #-8]
   84a3c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84a40:	f843 5c04 	str.w	r5, [r3, #-4]
   84a44:	42b3      	cmp	r3, r6
   84a46:	d1ed      	bne.n	84a24 <memmove+0x44>
   84a48:	1c7b      	adds	r3, r7, #1
   84a4a:	f002 0c0f 	and.w	ip, r2, #15
   84a4e:	011b      	lsls	r3, r3, #4
   84a50:	f1bc 0f03 	cmp.w	ip, #3
   84a54:	4419      	add	r1, r3
   84a56:	4403      	add	r3, r0
   84a58:	d923      	bls.n	84aa2 <memmove+0xc2>
   84a5a:	460e      	mov	r6, r1
   84a5c:	461d      	mov	r5, r3
   84a5e:	4664      	mov	r4, ip
   84a60:	f856 7b04 	ldr.w	r7, [r6], #4
   84a64:	3c04      	subs	r4, #4
   84a66:	2c03      	cmp	r4, #3
   84a68:	f845 7b04 	str.w	r7, [r5], #4
   84a6c:	d8f8      	bhi.n	84a60 <memmove+0x80>
   84a6e:	f1ac 0404 	sub.w	r4, ip, #4
   84a72:	f024 0403 	bic.w	r4, r4, #3
   84a76:	3404      	adds	r4, #4
   84a78:	f002 0203 	and.w	r2, r2, #3
   84a7c:	4423      	add	r3, r4
   84a7e:	4421      	add	r1, r4
   84a80:	2a00      	cmp	r2, #0
   84a82:	d0bf      	beq.n	84a04 <memmove+0x24>
   84a84:	441a      	add	r2, r3
   84a86:	f811 4b01 	ldrb.w	r4, [r1], #1
   84a8a:	f803 4b01 	strb.w	r4, [r3], #1
   84a8e:	4293      	cmp	r3, r2
   84a90:	d1f9      	bne.n	84a86 <memmove+0xa6>
   84a92:	bcf0      	pop	{r4, r5, r6, r7}
   84a94:	4770      	bx	lr
   84a96:	4603      	mov	r3, r0
   84a98:	2a00      	cmp	r2, #0
   84a9a:	d1f3      	bne.n	84a84 <memmove+0xa4>
   84a9c:	e7b2      	b.n	84a04 <memmove+0x24>
   84a9e:	4603      	mov	r3, r0
   84aa0:	e7f0      	b.n	84a84 <memmove+0xa4>
   84aa2:	4662      	mov	r2, ip
   84aa4:	2a00      	cmp	r2, #0
   84aa6:	d1ed      	bne.n	84a84 <memmove+0xa4>
   84aa8:	e7ac      	b.n	84a04 <memmove+0x24>
   84aaa:	bf00      	nop

00084aac <__malloc_lock>:
   84aac:	4770      	bx	lr
   84aae:	bf00      	nop

00084ab0 <__malloc_unlock>:
   84ab0:	4770      	bx	lr
   84ab2:	bf00      	nop

00084ab4 <_realloc_r>:
   84ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ab8:	460c      	mov	r4, r1
   84aba:	b083      	sub	sp, #12
   84abc:	4690      	mov	r8, r2
   84abe:	4681      	mov	r9, r0
   84ac0:	2900      	cmp	r1, #0
   84ac2:	f000 80ba 	beq.w	84c3a <_realloc_r+0x186>
   84ac6:	f7ff fff1 	bl	84aac <__malloc_lock>
   84aca:	f108 060b 	add.w	r6, r8, #11
   84ace:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ad2:	2e16      	cmp	r6, #22
   84ad4:	f023 0503 	bic.w	r5, r3, #3
   84ad8:	f1a4 0708 	sub.w	r7, r4, #8
   84adc:	d84b      	bhi.n	84b76 <_realloc_r+0xc2>
   84ade:	2110      	movs	r1, #16
   84ae0:	460e      	mov	r6, r1
   84ae2:	45b0      	cmp	r8, r6
   84ae4:	d84c      	bhi.n	84b80 <_realloc_r+0xcc>
   84ae6:	428d      	cmp	r5, r1
   84ae8:	da51      	bge.n	84b8e <_realloc_r+0xda>
   84aea:	f8df b384 	ldr.w	fp, [pc, #900]	; 84e70 <_realloc_r+0x3bc>
   84aee:	1978      	adds	r0, r7, r5
   84af0:	f8db e008 	ldr.w	lr, [fp, #8]
   84af4:	4586      	cmp	lr, r0
   84af6:	f000 80a6 	beq.w	84c46 <_realloc_r+0x192>
   84afa:	6842      	ldr	r2, [r0, #4]
   84afc:	f022 0c01 	bic.w	ip, r2, #1
   84b00:	4484      	add	ip, r0
   84b02:	f8dc c004 	ldr.w	ip, [ip, #4]
   84b06:	f01c 0f01 	tst.w	ip, #1
   84b0a:	d054      	beq.n	84bb6 <_realloc_r+0x102>
   84b0c:	2200      	movs	r2, #0
   84b0e:	4610      	mov	r0, r2
   84b10:	07db      	lsls	r3, r3, #31
   84b12:	d46f      	bmi.n	84bf4 <_realloc_r+0x140>
   84b14:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84b18:	ebc3 0a07 	rsb	sl, r3, r7
   84b1c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b20:	f023 0303 	bic.w	r3, r3, #3
   84b24:	442b      	add	r3, r5
   84b26:	2800      	cmp	r0, #0
   84b28:	d062      	beq.n	84bf0 <_realloc_r+0x13c>
   84b2a:	4570      	cmp	r0, lr
   84b2c:	f000 80e9 	beq.w	84d02 <_realloc_r+0x24e>
   84b30:	eb02 0e03 	add.w	lr, r2, r3
   84b34:	458e      	cmp	lr, r1
   84b36:	db5b      	blt.n	84bf0 <_realloc_r+0x13c>
   84b38:	68c3      	ldr	r3, [r0, #12]
   84b3a:	6882      	ldr	r2, [r0, #8]
   84b3c:	46d0      	mov	r8, sl
   84b3e:	60d3      	str	r3, [r2, #12]
   84b40:	609a      	str	r2, [r3, #8]
   84b42:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84b46:	f8da 300c 	ldr.w	r3, [sl, #12]
   84b4a:	1f2a      	subs	r2, r5, #4
   84b4c:	2a24      	cmp	r2, #36	; 0x24
   84b4e:	60cb      	str	r3, [r1, #12]
   84b50:	6099      	str	r1, [r3, #8]
   84b52:	f200 8123 	bhi.w	84d9c <_realloc_r+0x2e8>
   84b56:	2a13      	cmp	r2, #19
   84b58:	f240 80b0 	bls.w	84cbc <_realloc_r+0x208>
   84b5c:	6823      	ldr	r3, [r4, #0]
   84b5e:	2a1b      	cmp	r2, #27
   84b60:	f8ca 3008 	str.w	r3, [sl, #8]
   84b64:	6863      	ldr	r3, [r4, #4]
   84b66:	f8ca 300c 	str.w	r3, [sl, #12]
   84b6a:	f200 812b 	bhi.w	84dc4 <_realloc_r+0x310>
   84b6e:	3408      	adds	r4, #8
   84b70:	f10a 0310 	add.w	r3, sl, #16
   84b74:	e0a3      	b.n	84cbe <_realloc_r+0x20a>
   84b76:	f026 0607 	bic.w	r6, r6, #7
   84b7a:	2e00      	cmp	r6, #0
   84b7c:	4631      	mov	r1, r6
   84b7e:	dab0      	bge.n	84ae2 <_realloc_r+0x2e>
   84b80:	230c      	movs	r3, #12
   84b82:	2000      	movs	r0, #0
   84b84:	f8c9 3000 	str.w	r3, [r9]
   84b88:	b003      	add	sp, #12
   84b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b8e:	46a0      	mov	r8, r4
   84b90:	1baa      	subs	r2, r5, r6
   84b92:	2a0f      	cmp	r2, #15
   84b94:	f003 0301 	and.w	r3, r3, #1
   84b98:	d81a      	bhi.n	84bd0 <_realloc_r+0x11c>
   84b9a:	432b      	orrs	r3, r5
   84b9c:	607b      	str	r3, [r7, #4]
   84b9e:	443d      	add	r5, r7
   84ba0:	686b      	ldr	r3, [r5, #4]
   84ba2:	f043 0301 	orr.w	r3, r3, #1
   84ba6:	606b      	str	r3, [r5, #4]
   84ba8:	4648      	mov	r0, r9
   84baa:	f7ff ff81 	bl	84ab0 <__malloc_unlock>
   84bae:	4640      	mov	r0, r8
   84bb0:	b003      	add	sp, #12
   84bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bb6:	f022 0203 	bic.w	r2, r2, #3
   84bba:	eb02 0c05 	add.w	ip, r2, r5
   84bbe:	458c      	cmp	ip, r1
   84bc0:	dba6      	blt.n	84b10 <_realloc_r+0x5c>
   84bc2:	68c2      	ldr	r2, [r0, #12]
   84bc4:	6881      	ldr	r1, [r0, #8]
   84bc6:	46a0      	mov	r8, r4
   84bc8:	60ca      	str	r2, [r1, #12]
   84bca:	4665      	mov	r5, ip
   84bcc:	6091      	str	r1, [r2, #8]
   84bce:	e7df      	b.n	84b90 <_realloc_r+0xdc>
   84bd0:	19b9      	adds	r1, r7, r6
   84bd2:	4333      	orrs	r3, r6
   84bd4:	f042 0001 	orr.w	r0, r2, #1
   84bd8:	607b      	str	r3, [r7, #4]
   84bda:	440a      	add	r2, r1
   84bdc:	6048      	str	r0, [r1, #4]
   84bde:	6853      	ldr	r3, [r2, #4]
   84be0:	3108      	adds	r1, #8
   84be2:	f043 0301 	orr.w	r3, r3, #1
   84be6:	6053      	str	r3, [r2, #4]
   84be8:	4648      	mov	r0, r9
   84bea:	f7ff f89f 	bl	83d2c <_free_r>
   84bee:	e7db      	b.n	84ba8 <_realloc_r+0xf4>
   84bf0:	428b      	cmp	r3, r1
   84bf2:	da33      	bge.n	84c5c <_realloc_r+0x1a8>
   84bf4:	4641      	mov	r1, r8
   84bf6:	4648      	mov	r0, r9
   84bf8:	f7ff fb96 	bl	84328 <_malloc_r>
   84bfc:	4680      	mov	r8, r0
   84bfe:	2800      	cmp	r0, #0
   84c00:	d0d2      	beq.n	84ba8 <_realloc_r+0xf4>
   84c02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c06:	f1a0 0108 	sub.w	r1, r0, #8
   84c0a:	f023 0201 	bic.w	r2, r3, #1
   84c0e:	443a      	add	r2, r7
   84c10:	4291      	cmp	r1, r2
   84c12:	f000 80bc 	beq.w	84d8e <_realloc_r+0x2da>
   84c16:	1f2a      	subs	r2, r5, #4
   84c18:	2a24      	cmp	r2, #36	; 0x24
   84c1a:	d86e      	bhi.n	84cfa <_realloc_r+0x246>
   84c1c:	2a13      	cmp	r2, #19
   84c1e:	d842      	bhi.n	84ca6 <_realloc_r+0x1f2>
   84c20:	4603      	mov	r3, r0
   84c22:	4622      	mov	r2, r4
   84c24:	6811      	ldr	r1, [r2, #0]
   84c26:	6019      	str	r1, [r3, #0]
   84c28:	6851      	ldr	r1, [r2, #4]
   84c2a:	6059      	str	r1, [r3, #4]
   84c2c:	6892      	ldr	r2, [r2, #8]
   84c2e:	609a      	str	r2, [r3, #8]
   84c30:	4621      	mov	r1, r4
   84c32:	4648      	mov	r0, r9
   84c34:	f7ff f87a 	bl	83d2c <_free_r>
   84c38:	e7b6      	b.n	84ba8 <_realloc_r+0xf4>
   84c3a:	4611      	mov	r1, r2
   84c3c:	b003      	add	sp, #12
   84c3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c42:	f7ff bb71 	b.w	84328 <_malloc_r>
   84c46:	f8de 2004 	ldr.w	r2, [lr, #4]
   84c4a:	f106 0c10 	add.w	ip, r6, #16
   84c4e:	f022 0203 	bic.w	r2, r2, #3
   84c52:	1950      	adds	r0, r2, r5
   84c54:	4560      	cmp	r0, ip
   84c56:	da3d      	bge.n	84cd4 <_realloc_r+0x220>
   84c58:	4670      	mov	r0, lr
   84c5a:	e759      	b.n	84b10 <_realloc_r+0x5c>
   84c5c:	46d0      	mov	r8, sl
   84c5e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84c62:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c66:	1f2a      	subs	r2, r5, #4
   84c68:	2a24      	cmp	r2, #36	; 0x24
   84c6a:	60c1      	str	r1, [r0, #12]
   84c6c:	6088      	str	r0, [r1, #8]
   84c6e:	f200 80a0 	bhi.w	84db2 <_realloc_r+0x2fe>
   84c72:	2a13      	cmp	r2, #19
   84c74:	f240 809b 	bls.w	84dae <_realloc_r+0x2fa>
   84c78:	6821      	ldr	r1, [r4, #0]
   84c7a:	2a1b      	cmp	r2, #27
   84c7c:	f8ca 1008 	str.w	r1, [sl, #8]
   84c80:	6861      	ldr	r1, [r4, #4]
   84c82:	f8ca 100c 	str.w	r1, [sl, #12]
   84c86:	f200 80b2 	bhi.w	84dee <_realloc_r+0x33a>
   84c8a:	3408      	adds	r4, #8
   84c8c:	f10a 0210 	add.w	r2, sl, #16
   84c90:	6821      	ldr	r1, [r4, #0]
   84c92:	461d      	mov	r5, r3
   84c94:	6011      	str	r1, [r2, #0]
   84c96:	6861      	ldr	r1, [r4, #4]
   84c98:	4657      	mov	r7, sl
   84c9a:	6051      	str	r1, [r2, #4]
   84c9c:	68a3      	ldr	r3, [r4, #8]
   84c9e:	6093      	str	r3, [r2, #8]
   84ca0:	f8da 3004 	ldr.w	r3, [sl, #4]
   84ca4:	e774      	b.n	84b90 <_realloc_r+0xdc>
   84ca6:	6823      	ldr	r3, [r4, #0]
   84ca8:	2a1b      	cmp	r2, #27
   84caa:	6003      	str	r3, [r0, #0]
   84cac:	6863      	ldr	r3, [r4, #4]
   84cae:	6043      	str	r3, [r0, #4]
   84cb0:	d862      	bhi.n	84d78 <_realloc_r+0x2c4>
   84cb2:	f100 0308 	add.w	r3, r0, #8
   84cb6:	f104 0208 	add.w	r2, r4, #8
   84cba:	e7b3      	b.n	84c24 <_realloc_r+0x170>
   84cbc:	4643      	mov	r3, r8
   84cbe:	6822      	ldr	r2, [r4, #0]
   84cc0:	4675      	mov	r5, lr
   84cc2:	601a      	str	r2, [r3, #0]
   84cc4:	6862      	ldr	r2, [r4, #4]
   84cc6:	4657      	mov	r7, sl
   84cc8:	605a      	str	r2, [r3, #4]
   84cca:	68a2      	ldr	r2, [r4, #8]
   84ccc:	609a      	str	r2, [r3, #8]
   84cce:	f8da 3004 	ldr.w	r3, [sl, #4]
   84cd2:	e75d      	b.n	84b90 <_realloc_r+0xdc>
   84cd4:	1b83      	subs	r3, r0, r6
   84cd6:	4437      	add	r7, r6
   84cd8:	f043 0301 	orr.w	r3, r3, #1
   84cdc:	f8cb 7008 	str.w	r7, [fp, #8]
   84ce0:	607b      	str	r3, [r7, #4]
   84ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ce6:	4648      	mov	r0, r9
   84ce8:	f003 0301 	and.w	r3, r3, #1
   84cec:	431e      	orrs	r6, r3
   84cee:	f844 6c04 	str.w	r6, [r4, #-4]
   84cf2:	f7ff fedd 	bl	84ab0 <__malloc_unlock>
   84cf6:	4620      	mov	r0, r4
   84cf8:	e75a      	b.n	84bb0 <_realloc_r+0xfc>
   84cfa:	4621      	mov	r1, r4
   84cfc:	f7ff fe70 	bl	849e0 <memmove>
   84d00:	e796      	b.n	84c30 <_realloc_r+0x17c>
   84d02:	eb02 0c03 	add.w	ip, r2, r3
   84d06:	f106 0210 	add.w	r2, r6, #16
   84d0a:	4594      	cmp	ip, r2
   84d0c:	f6ff af70 	blt.w	84bf0 <_realloc_r+0x13c>
   84d10:	4657      	mov	r7, sl
   84d12:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84d16:	f8da 300c 	ldr.w	r3, [sl, #12]
   84d1a:	1f2a      	subs	r2, r5, #4
   84d1c:	2a24      	cmp	r2, #36	; 0x24
   84d1e:	60cb      	str	r3, [r1, #12]
   84d20:	6099      	str	r1, [r3, #8]
   84d22:	f200 8086 	bhi.w	84e32 <_realloc_r+0x37e>
   84d26:	2a13      	cmp	r2, #19
   84d28:	d977      	bls.n	84e1a <_realloc_r+0x366>
   84d2a:	6823      	ldr	r3, [r4, #0]
   84d2c:	2a1b      	cmp	r2, #27
   84d2e:	f8ca 3008 	str.w	r3, [sl, #8]
   84d32:	6863      	ldr	r3, [r4, #4]
   84d34:	f8ca 300c 	str.w	r3, [sl, #12]
   84d38:	f200 8084 	bhi.w	84e44 <_realloc_r+0x390>
   84d3c:	3408      	adds	r4, #8
   84d3e:	f10a 0310 	add.w	r3, sl, #16
   84d42:	6822      	ldr	r2, [r4, #0]
   84d44:	601a      	str	r2, [r3, #0]
   84d46:	6862      	ldr	r2, [r4, #4]
   84d48:	605a      	str	r2, [r3, #4]
   84d4a:	68a2      	ldr	r2, [r4, #8]
   84d4c:	609a      	str	r2, [r3, #8]
   84d4e:	ebc6 020c 	rsb	r2, r6, ip
   84d52:	eb0a 0306 	add.w	r3, sl, r6
   84d56:	f042 0201 	orr.w	r2, r2, #1
   84d5a:	f8cb 3008 	str.w	r3, [fp, #8]
   84d5e:	605a      	str	r2, [r3, #4]
   84d60:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d64:	4648      	mov	r0, r9
   84d66:	f003 0301 	and.w	r3, r3, #1
   84d6a:	431e      	orrs	r6, r3
   84d6c:	f8ca 6004 	str.w	r6, [sl, #4]
   84d70:	f7ff fe9e 	bl	84ab0 <__malloc_unlock>
   84d74:	4638      	mov	r0, r7
   84d76:	e71b      	b.n	84bb0 <_realloc_r+0xfc>
   84d78:	68a3      	ldr	r3, [r4, #8]
   84d7a:	2a24      	cmp	r2, #36	; 0x24
   84d7c:	6083      	str	r3, [r0, #8]
   84d7e:	68e3      	ldr	r3, [r4, #12]
   84d80:	60c3      	str	r3, [r0, #12]
   84d82:	d02b      	beq.n	84ddc <_realloc_r+0x328>
   84d84:	f100 0310 	add.w	r3, r0, #16
   84d88:	f104 0210 	add.w	r2, r4, #16
   84d8c:	e74a      	b.n	84c24 <_realloc_r+0x170>
   84d8e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84d92:	46a0      	mov	r8, r4
   84d94:	f022 0203 	bic.w	r2, r2, #3
   84d98:	4415      	add	r5, r2
   84d9a:	e6f9      	b.n	84b90 <_realloc_r+0xdc>
   84d9c:	4621      	mov	r1, r4
   84d9e:	4640      	mov	r0, r8
   84da0:	4675      	mov	r5, lr
   84da2:	4657      	mov	r7, sl
   84da4:	f7ff fe1c 	bl	849e0 <memmove>
   84da8:	f8da 3004 	ldr.w	r3, [sl, #4]
   84dac:	e6f0      	b.n	84b90 <_realloc_r+0xdc>
   84dae:	4642      	mov	r2, r8
   84db0:	e76e      	b.n	84c90 <_realloc_r+0x1dc>
   84db2:	4621      	mov	r1, r4
   84db4:	4640      	mov	r0, r8
   84db6:	461d      	mov	r5, r3
   84db8:	4657      	mov	r7, sl
   84dba:	f7ff fe11 	bl	849e0 <memmove>
   84dbe:	f8da 3004 	ldr.w	r3, [sl, #4]
   84dc2:	e6e5      	b.n	84b90 <_realloc_r+0xdc>
   84dc4:	68a3      	ldr	r3, [r4, #8]
   84dc6:	2a24      	cmp	r2, #36	; 0x24
   84dc8:	f8ca 3010 	str.w	r3, [sl, #16]
   84dcc:	68e3      	ldr	r3, [r4, #12]
   84dce:	f8ca 3014 	str.w	r3, [sl, #20]
   84dd2:	d018      	beq.n	84e06 <_realloc_r+0x352>
   84dd4:	3410      	adds	r4, #16
   84dd6:	f10a 0318 	add.w	r3, sl, #24
   84dda:	e770      	b.n	84cbe <_realloc_r+0x20a>
   84ddc:	6922      	ldr	r2, [r4, #16]
   84dde:	f100 0318 	add.w	r3, r0, #24
   84de2:	6102      	str	r2, [r0, #16]
   84de4:	6961      	ldr	r1, [r4, #20]
   84de6:	f104 0218 	add.w	r2, r4, #24
   84dea:	6141      	str	r1, [r0, #20]
   84dec:	e71a      	b.n	84c24 <_realloc_r+0x170>
   84dee:	68a1      	ldr	r1, [r4, #8]
   84df0:	2a24      	cmp	r2, #36	; 0x24
   84df2:	f8ca 1010 	str.w	r1, [sl, #16]
   84df6:	68e1      	ldr	r1, [r4, #12]
   84df8:	f8ca 1014 	str.w	r1, [sl, #20]
   84dfc:	d00f      	beq.n	84e1e <_realloc_r+0x36a>
   84dfe:	3410      	adds	r4, #16
   84e00:	f10a 0218 	add.w	r2, sl, #24
   84e04:	e744      	b.n	84c90 <_realloc_r+0x1dc>
   84e06:	6922      	ldr	r2, [r4, #16]
   84e08:	f10a 0320 	add.w	r3, sl, #32
   84e0c:	f8ca 2018 	str.w	r2, [sl, #24]
   84e10:	6962      	ldr	r2, [r4, #20]
   84e12:	3418      	adds	r4, #24
   84e14:	f8ca 201c 	str.w	r2, [sl, #28]
   84e18:	e751      	b.n	84cbe <_realloc_r+0x20a>
   84e1a:	463b      	mov	r3, r7
   84e1c:	e791      	b.n	84d42 <_realloc_r+0x28e>
   84e1e:	6921      	ldr	r1, [r4, #16]
   84e20:	f10a 0220 	add.w	r2, sl, #32
   84e24:	f8ca 1018 	str.w	r1, [sl, #24]
   84e28:	6961      	ldr	r1, [r4, #20]
   84e2a:	3418      	adds	r4, #24
   84e2c:	f8ca 101c 	str.w	r1, [sl, #28]
   84e30:	e72e      	b.n	84c90 <_realloc_r+0x1dc>
   84e32:	4621      	mov	r1, r4
   84e34:	4638      	mov	r0, r7
   84e36:	f8cd c004 	str.w	ip, [sp, #4]
   84e3a:	f7ff fdd1 	bl	849e0 <memmove>
   84e3e:	f8dd c004 	ldr.w	ip, [sp, #4]
   84e42:	e784      	b.n	84d4e <_realloc_r+0x29a>
   84e44:	68a3      	ldr	r3, [r4, #8]
   84e46:	2a24      	cmp	r2, #36	; 0x24
   84e48:	f8ca 3010 	str.w	r3, [sl, #16]
   84e4c:	68e3      	ldr	r3, [r4, #12]
   84e4e:	f8ca 3014 	str.w	r3, [sl, #20]
   84e52:	d003      	beq.n	84e5c <_realloc_r+0x3a8>
   84e54:	3410      	adds	r4, #16
   84e56:	f10a 0318 	add.w	r3, sl, #24
   84e5a:	e772      	b.n	84d42 <_realloc_r+0x28e>
   84e5c:	6922      	ldr	r2, [r4, #16]
   84e5e:	f10a 0320 	add.w	r3, sl, #32
   84e62:	f8ca 2018 	str.w	r2, [sl, #24]
   84e66:	6962      	ldr	r2, [r4, #20]
   84e68:	3418      	adds	r4, #24
   84e6a:	f8ca 201c 	str.w	r2, [sl, #28]
   84e6e:	e768      	b.n	84d42 <_realloc_r+0x28e>
   84e70:	200705b0 	.word	0x200705b0

00084e74 <_sbrk_r>:
   84e74:	b538      	push	{r3, r4, r5, lr}
   84e76:	4c07      	ldr	r4, [pc, #28]	; (84e94 <_sbrk_r+0x20>)
   84e78:	2300      	movs	r3, #0
   84e7a:	4605      	mov	r5, r0
   84e7c:	4608      	mov	r0, r1
   84e7e:	6023      	str	r3, [r4, #0]
   84e80:	f7fd fc72 	bl	82768 <_sbrk>
   84e84:	1c43      	adds	r3, r0, #1
   84e86:	d000      	beq.n	84e8a <_sbrk_r+0x16>
   84e88:	bd38      	pop	{r3, r4, r5, pc}
   84e8a:	6823      	ldr	r3, [r4, #0]
   84e8c:	2b00      	cmp	r3, #0
   84e8e:	d0fb      	beq.n	84e88 <_sbrk_r+0x14>
   84e90:	602b      	str	r3, [r5, #0]
   84e92:	bd38      	pop	{r3, r4, r5, pc}
   84e94:	20070bb0 	.word	0x20070bb0

00084e98 <__sread>:
   84e98:	b510      	push	{r4, lr}
   84e9a:	460c      	mov	r4, r1
   84e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ea0:	f000 f96e 	bl	85180 <_read_r>
   84ea4:	2800      	cmp	r0, #0
   84ea6:	db03      	blt.n	84eb0 <__sread+0x18>
   84ea8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84eaa:	4403      	add	r3, r0
   84eac:	6523      	str	r3, [r4, #80]	; 0x50
   84eae:	bd10      	pop	{r4, pc}
   84eb0:	89a3      	ldrh	r3, [r4, #12]
   84eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84eb6:	81a3      	strh	r3, [r4, #12]
   84eb8:	bd10      	pop	{r4, pc}
   84eba:	bf00      	nop

00084ebc <__swrite>:
   84ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ec0:	460c      	mov	r4, r1
   84ec2:	8989      	ldrh	r1, [r1, #12]
   84ec4:	461d      	mov	r5, r3
   84ec6:	05cb      	lsls	r3, r1, #23
   84ec8:	4616      	mov	r6, r2
   84eca:	4607      	mov	r7, r0
   84ecc:	d506      	bpl.n	84edc <__swrite+0x20>
   84ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84ed2:	2200      	movs	r2, #0
   84ed4:	2302      	movs	r3, #2
   84ed6:	f000 f93f 	bl	85158 <_lseek_r>
   84eda:	89a1      	ldrh	r1, [r4, #12]
   84edc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84ee0:	81a1      	strh	r1, [r4, #12]
   84ee2:	4638      	mov	r0, r7
   84ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84ee8:	4632      	mov	r2, r6
   84eea:	462b      	mov	r3, r5
   84eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84ef0:	f000 b84a 	b.w	84f88 <_write_r>

00084ef4 <__sseek>:
   84ef4:	b510      	push	{r4, lr}
   84ef6:	460c      	mov	r4, r1
   84ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84efc:	f000 f92c 	bl	85158 <_lseek_r>
   84f00:	89a3      	ldrh	r3, [r4, #12]
   84f02:	1c42      	adds	r2, r0, #1
   84f04:	bf0e      	itee	eq
   84f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84f0e:	6520      	strne	r0, [r4, #80]	; 0x50
   84f10:	81a3      	strh	r3, [r4, #12]
   84f12:	bd10      	pop	{r4, pc}

00084f14 <__sclose>:
   84f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f18:	f000 b89e 	b.w	85058 <_close_r>

00084f1c <_wcrtomb_r>:
   84f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f20:	461e      	mov	r6, r3
   84f22:	b086      	sub	sp, #24
   84f24:	460c      	mov	r4, r1
   84f26:	4605      	mov	r5, r0
   84f28:	4617      	mov	r7, r2
   84f2a:	4b0f      	ldr	r3, [pc, #60]	; (84f68 <_wcrtomb_r+0x4c>)
   84f2c:	b191      	cbz	r1, 84f54 <_wcrtomb_r+0x38>
   84f2e:	f8d3 8000 	ldr.w	r8, [r3]
   84f32:	f7ff f977 	bl	84224 <__locale_charset>
   84f36:	9600      	str	r6, [sp, #0]
   84f38:	4603      	mov	r3, r0
   84f3a:	4621      	mov	r1, r4
   84f3c:	463a      	mov	r2, r7
   84f3e:	4628      	mov	r0, r5
   84f40:	47c0      	blx	r8
   84f42:	1c43      	adds	r3, r0, #1
   84f44:	d103      	bne.n	84f4e <_wcrtomb_r+0x32>
   84f46:	2200      	movs	r2, #0
   84f48:	238a      	movs	r3, #138	; 0x8a
   84f4a:	6032      	str	r2, [r6, #0]
   84f4c:	602b      	str	r3, [r5, #0]
   84f4e:	b006      	add	sp, #24
   84f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f54:	681f      	ldr	r7, [r3, #0]
   84f56:	f7ff f965 	bl	84224 <__locale_charset>
   84f5a:	9600      	str	r6, [sp, #0]
   84f5c:	4603      	mov	r3, r0
   84f5e:	4622      	mov	r2, r4
   84f60:	4628      	mov	r0, r5
   84f62:	a903      	add	r1, sp, #12
   84f64:	47b8      	blx	r7
   84f66:	e7ec      	b.n	84f42 <_wcrtomb_r+0x26>
   84f68:	200709c0 	.word	0x200709c0

00084f6c <__ascii_wctomb>:
   84f6c:	b121      	cbz	r1, 84f78 <__ascii_wctomb+0xc>
   84f6e:	2aff      	cmp	r2, #255	; 0xff
   84f70:	d804      	bhi.n	84f7c <__ascii_wctomb+0x10>
   84f72:	700a      	strb	r2, [r1, #0]
   84f74:	2001      	movs	r0, #1
   84f76:	4770      	bx	lr
   84f78:	4608      	mov	r0, r1
   84f7a:	4770      	bx	lr
   84f7c:	238a      	movs	r3, #138	; 0x8a
   84f7e:	6003      	str	r3, [r0, #0]
   84f80:	f04f 30ff 	mov.w	r0, #4294967295
   84f84:	4770      	bx	lr
   84f86:	bf00      	nop

00084f88 <_write_r>:
   84f88:	b570      	push	{r4, r5, r6, lr}
   84f8a:	4c08      	ldr	r4, [pc, #32]	; (84fac <_write_r+0x24>)
   84f8c:	4606      	mov	r6, r0
   84f8e:	2500      	movs	r5, #0
   84f90:	4608      	mov	r0, r1
   84f92:	4611      	mov	r1, r2
   84f94:	461a      	mov	r2, r3
   84f96:	6025      	str	r5, [r4, #0]
   84f98:	f7fb f9aa 	bl	802f0 <_write>
   84f9c:	1c43      	adds	r3, r0, #1
   84f9e:	d000      	beq.n	84fa2 <_write_r+0x1a>
   84fa0:	bd70      	pop	{r4, r5, r6, pc}
   84fa2:	6823      	ldr	r3, [r4, #0]
   84fa4:	2b00      	cmp	r3, #0
   84fa6:	d0fb      	beq.n	84fa0 <_write_r+0x18>
   84fa8:	6033      	str	r3, [r6, #0]
   84faa:	bd70      	pop	{r4, r5, r6, pc}
   84fac:	20070bb0 	.word	0x20070bb0

00084fb0 <__register_exitproc>:
   84fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84fb2:	4c27      	ldr	r4, [pc, #156]	; (85050 <__register_exitproc+0xa0>)
   84fb4:	b085      	sub	sp, #20
   84fb6:	6826      	ldr	r6, [r4, #0]
   84fb8:	4607      	mov	r7, r0
   84fba:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84fbe:	2c00      	cmp	r4, #0
   84fc0:	d040      	beq.n	85044 <__register_exitproc+0x94>
   84fc2:	6865      	ldr	r5, [r4, #4]
   84fc4:	2d1f      	cmp	r5, #31
   84fc6:	dd1e      	ble.n	85006 <__register_exitproc+0x56>
   84fc8:	4822      	ldr	r0, [pc, #136]	; (85054 <__register_exitproc+0xa4>)
   84fca:	b918      	cbnz	r0, 84fd4 <__register_exitproc+0x24>
   84fcc:	f04f 30ff 	mov.w	r0, #4294967295
   84fd0:	b005      	add	sp, #20
   84fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84fd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84fd8:	9103      	str	r1, [sp, #12]
   84fda:	9202      	str	r2, [sp, #8]
   84fdc:	9301      	str	r3, [sp, #4]
   84fde:	f7ff f99b 	bl	84318 <malloc>
   84fe2:	9903      	ldr	r1, [sp, #12]
   84fe4:	4604      	mov	r4, r0
   84fe6:	9a02      	ldr	r2, [sp, #8]
   84fe8:	9b01      	ldr	r3, [sp, #4]
   84fea:	2800      	cmp	r0, #0
   84fec:	d0ee      	beq.n	84fcc <__register_exitproc+0x1c>
   84fee:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84ff2:	2000      	movs	r0, #0
   84ff4:	6025      	str	r5, [r4, #0]
   84ff6:	6060      	str	r0, [r4, #4]
   84ff8:	4605      	mov	r5, r0
   84ffa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84ffe:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85002:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85006:	b93f      	cbnz	r7, 85018 <__register_exitproc+0x68>
   85008:	1c6b      	adds	r3, r5, #1
   8500a:	2000      	movs	r0, #0
   8500c:	3502      	adds	r5, #2
   8500e:	6063      	str	r3, [r4, #4]
   85010:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85014:	b005      	add	sp, #20
   85016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85018:	2601      	movs	r6, #1
   8501a:	40ae      	lsls	r6, r5
   8501c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85020:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85024:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   85028:	2f02      	cmp	r7, #2
   8502a:	ea42 0206 	orr.w	r2, r2, r6
   8502e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85032:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85036:	d1e7      	bne.n	85008 <__register_exitproc+0x58>
   85038:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8503c:	431e      	orrs	r6, r3
   8503e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85042:	e7e1      	b.n	85008 <__register_exitproc+0x58>
   85044:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85048:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8504c:	e7b9      	b.n	84fc2 <__register_exitproc+0x12>
   8504e:	bf00      	nop
   85050:	00085ae4 	.word	0x00085ae4
   85054:	00084319 	.word	0x00084319

00085058 <_close_r>:
   85058:	b538      	push	{r3, r4, r5, lr}
   8505a:	4c07      	ldr	r4, [pc, #28]	; (85078 <_close_r+0x20>)
   8505c:	2300      	movs	r3, #0
   8505e:	4605      	mov	r5, r0
   85060:	4608      	mov	r0, r1
   85062:	6023      	str	r3, [r4, #0]
   85064:	f7fd fb9a 	bl	8279c <_close>
   85068:	1c43      	adds	r3, r0, #1
   8506a:	d000      	beq.n	8506e <_close_r+0x16>
   8506c:	bd38      	pop	{r3, r4, r5, pc}
   8506e:	6823      	ldr	r3, [r4, #0]
   85070:	2b00      	cmp	r3, #0
   85072:	d0fb      	beq.n	8506c <_close_r+0x14>
   85074:	602b      	str	r3, [r5, #0]
   85076:	bd38      	pop	{r3, r4, r5, pc}
   85078:	20070bb0 	.word	0x20070bb0

0008507c <_fclose_r>:
   8507c:	b570      	push	{r4, r5, r6, lr}
   8507e:	460c      	mov	r4, r1
   85080:	4605      	mov	r5, r0
   85082:	b131      	cbz	r1, 85092 <_fclose_r+0x16>
   85084:	b110      	cbz	r0, 8508c <_fclose_r+0x10>
   85086:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85088:	2b00      	cmp	r3, #0
   8508a:	d02f      	beq.n	850ec <_fclose_r+0x70>
   8508c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85090:	b90b      	cbnz	r3, 85096 <_fclose_r+0x1a>
   85092:	2000      	movs	r0, #0
   85094:	bd70      	pop	{r4, r5, r6, pc}
   85096:	4628      	mov	r0, r5
   85098:	4621      	mov	r1, r4
   8509a:	f7fe fce7 	bl	83a6c <_fflush_r>
   8509e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   850a0:	4606      	mov	r6, r0
   850a2:	b133      	cbz	r3, 850b2 <_fclose_r+0x36>
   850a4:	4628      	mov	r0, r5
   850a6:	69e1      	ldr	r1, [r4, #28]
   850a8:	4798      	blx	r3
   850aa:	2800      	cmp	r0, #0
   850ac:	bfb8      	it	lt
   850ae:	f04f 36ff 	movlt.w	r6, #4294967295
   850b2:	89a3      	ldrh	r3, [r4, #12]
   850b4:	061b      	lsls	r3, r3, #24
   850b6:	d41c      	bmi.n	850f2 <_fclose_r+0x76>
   850b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   850ba:	b141      	cbz	r1, 850ce <_fclose_r+0x52>
   850bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   850c0:	4299      	cmp	r1, r3
   850c2:	d002      	beq.n	850ca <_fclose_r+0x4e>
   850c4:	4628      	mov	r0, r5
   850c6:	f7fe fe31 	bl	83d2c <_free_r>
   850ca:	2300      	movs	r3, #0
   850cc:	6323      	str	r3, [r4, #48]	; 0x30
   850ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
   850d0:	b121      	cbz	r1, 850dc <_fclose_r+0x60>
   850d2:	4628      	mov	r0, r5
   850d4:	f7fe fe2a 	bl	83d2c <_free_r>
   850d8:	2300      	movs	r3, #0
   850da:	6463      	str	r3, [r4, #68]	; 0x44
   850dc:	f7fe fd5c 	bl	83b98 <__sfp_lock_acquire>
   850e0:	2300      	movs	r3, #0
   850e2:	81a3      	strh	r3, [r4, #12]
   850e4:	f7fe fd5a 	bl	83b9c <__sfp_lock_release>
   850e8:	4630      	mov	r0, r6
   850ea:	bd70      	pop	{r4, r5, r6, pc}
   850ec:	f7fe fcda 	bl	83aa4 <__sinit>
   850f0:	e7cc      	b.n	8508c <_fclose_r+0x10>
   850f2:	4628      	mov	r0, r5
   850f4:	6921      	ldr	r1, [r4, #16]
   850f6:	f7fe fe19 	bl	83d2c <_free_r>
   850fa:	e7dd      	b.n	850b8 <_fclose_r+0x3c>

000850fc <fclose>:
   850fc:	4b02      	ldr	r3, [pc, #8]	; (85108 <fclose+0xc>)
   850fe:	4601      	mov	r1, r0
   85100:	6818      	ldr	r0, [r3, #0]
   85102:	f7ff bfbb 	b.w	8507c <_fclose_r>
   85106:	bf00      	nop
   85108:	20070588 	.word	0x20070588

0008510c <_fstat_r>:
   8510c:	b538      	push	{r3, r4, r5, lr}
   8510e:	4c08      	ldr	r4, [pc, #32]	; (85130 <_fstat_r+0x24>)
   85110:	2300      	movs	r3, #0
   85112:	4605      	mov	r5, r0
   85114:	4608      	mov	r0, r1
   85116:	4611      	mov	r1, r2
   85118:	6023      	str	r3, [r4, #0]
   8511a:	f7fd fb43 	bl	827a4 <_fstat>
   8511e:	1c43      	adds	r3, r0, #1
   85120:	d000      	beq.n	85124 <_fstat_r+0x18>
   85122:	bd38      	pop	{r3, r4, r5, pc}
   85124:	6823      	ldr	r3, [r4, #0]
   85126:	2b00      	cmp	r3, #0
   85128:	d0fb      	beq.n	85122 <_fstat_r+0x16>
   8512a:	602b      	str	r3, [r5, #0]
   8512c:	bd38      	pop	{r3, r4, r5, pc}
   8512e:	bf00      	nop
   85130:	20070bb0 	.word	0x20070bb0

00085134 <_isatty_r>:
   85134:	b538      	push	{r3, r4, r5, lr}
   85136:	4c07      	ldr	r4, [pc, #28]	; (85154 <_isatty_r+0x20>)
   85138:	2300      	movs	r3, #0
   8513a:	4605      	mov	r5, r0
   8513c:	4608      	mov	r0, r1
   8513e:	6023      	str	r3, [r4, #0]
   85140:	f7fd fb36 	bl	827b0 <_isatty>
   85144:	1c43      	adds	r3, r0, #1
   85146:	d000      	beq.n	8514a <_isatty_r+0x16>
   85148:	bd38      	pop	{r3, r4, r5, pc}
   8514a:	6823      	ldr	r3, [r4, #0]
   8514c:	2b00      	cmp	r3, #0
   8514e:	d0fb      	beq.n	85148 <_isatty_r+0x14>
   85150:	602b      	str	r3, [r5, #0]
   85152:	bd38      	pop	{r3, r4, r5, pc}
   85154:	20070bb0 	.word	0x20070bb0

00085158 <_lseek_r>:
   85158:	b570      	push	{r4, r5, r6, lr}
   8515a:	4c08      	ldr	r4, [pc, #32]	; (8517c <_lseek_r+0x24>)
   8515c:	4606      	mov	r6, r0
   8515e:	2500      	movs	r5, #0
   85160:	4608      	mov	r0, r1
   85162:	4611      	mov	r1, r2
   85164:	461a      	mov	r2, r3
   85166:	6025      	str	r5, [r4, #0]
   85168:	f7fd fb24 	bl	827b4 <_lseek>
   8516c:	1c43      	adds	r3, r0, #1
   8516e:	d000      	beq.n	85172 <_lseek_r+0x1a>
   85170:	bd70      	pop	{r4, r5, r6, pc}
   85172:	6823      	ldr	r3, [r4, #0]
   85174:	2b00      	cmp	r3, #0
   85176:	d0fb      	beq.n	85170 <_lseek_r+0x18>
   85178:	6033      	str	r3, [r6, #0]
   8517a:	bd70      	pop	{r4, r5, r6, pc}
   8517c:	20070bb0 	.word	0x20070bb0

00085180 <_read_r>:
   85180:	b570      	push	{r4, r5, r6, lr}
   85182:	4c08      	ldr	r4, [pc, #32]	; (851a4 <_read_r+0x24>)
   85184:	4606      	mov	r6, r0
   85186:	2500      	movs	r5, #0
   85188:	4608      	mov	r0, r1
   8518a:	4611      	mov	r1, r2
   8518c:	461a      	mov	r2, r3
   8518e:	6025      	str	r5, [r4, #0]
   85190:	f7fb f88e 	bl	802b0 <_read>
   85194:	1c43      	adds	r3, r0, #1
   85196:	d000      	beq.n	8519a <_read_r+0x1a>
   85198:	bd70      	pop	{r4, r5, r6, pc}
   8519a:	6823      	ldr	r3, [r4, #0]
   8519c:	2b00      	cmp	r3, #0
   8519e:	d0fb      	beq.n	85198 <_read_r+0x18>
   851a0:	6033      	str	r3, [r6, #0]
   851a2:	bd70      	pop	{r4, r5, r6, pc}
   851a4:	20070bb0 	.word	0x20070bb0

000851a8 <__aeabi_uldivmod>:
   851a8:	b94b      	cbnz	r3, 851be <__aeabi_uldivmod+0x16>
   851aa:	b942      	cbnz	r2, 851be <__aeabi_uldivmod+0x16>
   851ac:	2900      	cmp	r1, #0
   851ae:	bf08      	it	eq
   851b0:	2800      	cmpeq	r0, #0
   851b2:	d002      	beq.n	851ba <__aeabi_uldivmod+0x12>
   851b4:	f04f 31ff 	mov.w	r1, #4294967295
   851b8:	4608      	mov	r0, r1
   851ba:	f000 b83b 	b.w	85234 <__aeabi_idiv0>
   851be:	b082      	sub	sp, #8
   851c0:	46ec      	mov	ip, sp
   851c2:	e92d 5000 	stmdb	sp!, {ip, lr}
   851c6:	f000 f81d 	bl	85204 <__gnu_uldivmod_helper>
   851ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   851ce:	b002      	add	sp, #8
   851d0:	bc0c      	pop	{r2, r3}
   851d2:	4770      	bx	lr

000851d4 <__gnu_ldivmod_helper>:
   851d4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   851d8:	9e08      	ldr	r6, [sp, #32]
   851da:	4614      	mov	r4, r2
   851dc:	461d      	mov	r5, r3
   851de:	4680      	mov	r8, r0
   851e0:	4689      	mov	r9, r1
   851e2:	f000 f829 	bl	85238 <__divdi3>
   851e6:	fb04 f301 	mul.w	r3, r4, r1
   851ea:	fba4 ab00 	umull	sl, fp, r4, r0
   851ee:	fb00 3205 	mla	r2, r0, r5, r3
   851f2:	4493      	add	fp, r2
   851f4:	ebb8 080a 	subs.w	r8, r8, sl
   851f8:	eb69 090b 	sbc.w	r9, r9, fp
   851fc:	e9c6 8900 	strd	r8, r9, [r6]
   85200:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085204 <__gnu_uldivmod_helper>:
   85204:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85208:	9e08      	ldr	r6, [sp, #32]
   8520a:	4614      	mov	r4, r2
   8520c:	461d      	mov	r5, r3
   8520e:	4680      	mov	r8, r0
   85210:	4689      	mov	r9, r1
   85212:	f000 f961 	bl	854d8 <__udivdi3>
   85216:	fb00 f505 	mul.w	r5, r0, r5
   8521a:	fba0 ab04 	umull	sl, fp, r0, r4
   8521e:	fb04 5401 	mla	r4, r4, r1, r5
   85222:	44a3      	add	fp, r4
   85224:	ebb8 080a 	subs.w	r8, r8, sl
   85228:	eb69 090b 	sbc.w	r9, r9, fp
   8522c:	e9c6 8900 	strd	r8, r9, [r6]
   85230:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085234 <__aeabi_idiv0>:
   85234:	4770      	bx	lr
   85236:	bf00      	nop

00085238 <__divdi3>:
   85238:	2900      	cmp	r1, #0
   8523a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8523e:	f2c0 80a1 	blt.w	85384 <__divdi3+0x14c>
   85242:	2400      	movs	r4, #0
   85244:	2b00      	cmp	r3, #0
   85246:	f2c0 8098 	blt.w	8537a <__divdi3+0x142>
   8524a:	4615      	mov	r5, r2
   8524c:	4606      	mov	r6, r0
   8524e:	460f      	mov	r7, r1
   85250:	2b00      	cmp	r3, #0
   85252:	d13f      	bne.n	852d4 <__divdi3+0x9c>
   85254:	428a      	cmp	r2, r1
   85256:	d958      	bls.n	8530a <__divdi3+0xd2>
   85258:	fab2 f382 	clz	r3, r2
   8525c:	b14b      	cbz	r3, 85272 <__divdi3+0x3a>
   8525e:	f1c3 0220 	rsb	r2, r3, #32
   85262:	fa01 f703 	lsl.w	r7, r1, r3
   85266:	fa20 f202 	lsr.w	r2, r0, r2
   8526a:	409d      	lsls	r5, r3
   8526c:	fa00 f603 	lsl.w	r6, r0, r3
   85270:	4317      	orrs	r7, r2
   85272:	0c29      	lsrs	r1, r5, #16
   85274:	fbb7 f2f1 	udiv	r2, r7, r1
   85278:	fb01 7712 	mls	r7, r1, r2, r7
   8527c:	b2a8      	uxth	r0, r5
   8527e:	fb00 f302 	mul.w	r3, r0, r2
   85282:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85286:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8528a:	42bb      	cmp	r3, r7
   8528c:	d909      	bls.n	852a2 <__divdi3+0x6a>
   8528e:	197f      	adds	r7, r7, r5
   85290:	f102 3cff 	add.w	ip, r2, #4294967295
   85294:	f080 8105 	bcs.w	854a2 <__divdi3+0x26a>
   85298:	42bb      	cmp	r3, r7
   8529a:	f240 8102 	bls.w	854a2 <__divdi3+0x26a>
   8529e:	3a02      	subs	r2, #2
   852a0:	442f      	add	r7, r5
   852a2:	1aff      	subs	r7, r7, r3
   852a4:	fbb7 f3f1 	udiv	r3, r7, r1
   852a8:	fb01 7113 	mls	r1, r1, r3, r7
   852ac:	fb00 f003 	mul.w	r0, r0, r3
   852b0:	b2b6      	uxth	r6, r6
   852b2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   852b6:	4288      	cmp	r0, r1
   852b8:	d908      	bls.n	852cc <__divdi3+0x94>
   852ba:	1949      	adds	r1, r1, r5
   852bc:	f103 37ff 	add.w	r7, r3, #4294967295
   852c0:	f080 80f1 	bcs.w	854a6 <__divdi3+0x26e>
   852c4:	4288      	cmp	r0, r1
   852c6:	f240 80ee 	bls.w	854a6 <__divdi3+0x26e>
   852ca:	3b02      	subs	r3, #2
   852cc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   852d0:	2300      	movs	r3, #0
   852d2:	e003      	b.n	852dc <__divdi3+0xa4>
   852d4:	428b      	cmp	r3, r1
   852d6:	d90a      	bls.n	852ee <__divdi3+0xb6>
   852d8:	2300      	movs	r3, #0
   852da:	461a      	mov	r2, r3
   852dc:	4610      	mov	r0, r2
   852de:	4619      	mov	r1, r3
   852e0:	b114      	cbz	r4, 852e8 <__divdi3+0xb0>
   852e2:	4240      	negs	r0, r0
   852e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   852e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   852ec:	4770      	bx	lr
   852ee:	fab3 f883 	clz	r8, r3
   852f2:	f1b8 0f00 	cmp.w	r8, #0
   852f6:	f040 8088 	bne.w	8540a <__divdi3+0x1d2>
   852fa:	428b      	cmp	r3, r1
   852fc:	d302      	bcc.n	85304 <__divdi3+0xcc>
   852fe:	4282      	cmp	r2, r0
   85300:	f200 80e2 	bhi.w	854c8 <__divdi3+0x290>
   85304:	2300      	movs	r3, #0
   85306:	2201      	movs	r2, #1
   85308:	e7e8      	b.n	852dc <__divdi3+0xa4>
   8530a:	b912      	cbnz	r2, 85312 <__divdi3+0xda>
   8530c:	2301      	movs	r3, #1
   8530e:	fbb3 f5f2 	udiv	r5, r3, r2
   85312:	fab5 f285 	clz	r2, r5
   85316:	2a00      	cmp	r2, #0
   85318:	d13a      	bne.n	85390 <__divdi3+0x158>
   8531a:	1b7f      	subs	r7, r7, r5
   8531c:	0c28      	lsrs	r0, r5, #16
   8531e:	fa1f fc85 	uxth.w	ip, r5
   85322:	2301      	movs	r3, #1
   85324:	fbb7 f1f0 	udiv	r1, r7, r0
   85328:	fb00 7711 	mls	r7, r0, r1, r7
   8532c:	fb0c f201 	mul.w	r2, ip, r1
   85330:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85334:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85338:	42ba      	cmp	r2, r7
   8533a:	d907      	bls.n	8534c <__divdi3+0x114>
   8533c:	197f      	adds	r7, r7, r5
   8533e:	f101 38ff 	add.w	r8, r1, #4294967295
   85342:	d202      	bcs.n	8534a <__divdi3+0x112>
   85344:	42ba      	cmp	r2, r7
   85346:	f200 80c4 	bhi.w	854d2 <__divdi3+0x29a>
   8534a:	4641      	mov	r1, r8
   8534c:	1abf      	subs	r7, r7, r2
   8534e:	fbb7 f2f0 	udiv	r2, r7, r0
   85352:	fb00 7012 	mls	r0, r0, r2, r7
   85356:	fb0c fc02 	mul.w	ip, ip, r2
   8535a:	b2b6      	uxth	r6, r6
   8535c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85360:	4584      	cmp	ip, r0
   85362:	d907      	bls.n	85374 <__divdi3+0x13c>
   85364:	1940      	adds	r0, r0, r5
   85366:	f102 37ff 	add.w	r7, r2, #4294967295
   8536a:	d202      	bcs.n	85372 <__divdi3+0x13a>
   8536c:	4584      	cmp	ip, r0
   8536e:	f200 80ae 	bhi.w	854ce <__divdi3+0x296>
   85372:	463a      	mov	r2, r7
   85374:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85378:	e7b0      	b.n	852dc <__divdi3+0xa4>
   8537a:	43e4      	mvns	r4, r4
   8537c:	4252      	negs	r2, r2
   8537e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85382:	e762      	b.n	8524a <__divdi3+0x12>
   85384:	4240      	negs	r0, r0
   85386:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8538a:	f04f 34ff 	mov.w	r4, #4294967295
   8538e:	e759      	b.n	85244 <__divdi3+0xc>
   85390:	4095      	lsls	r5, r2
   85392:	f1c2 0920 	rsb	r9, r2, #32
   85396:	fa27 f109 	lsr.w	r1, r7, r9
   8539a:	fa26 f909 	lsr.w	r9, r6, r9
   8539e:	4097      	lsls	r7, r2
   853a0:	0c28      	lsrs	r0, r5, #16
   853a2:	fbb1 f8f0 	udiv	r8, r1, r0
   853a6:	fb00 1118 	mls	r1, r0, r8, r1
   853aa:	fa1f fc85 	uxth.w	ip, r5
   853ae:	fb0c f308 	mul.w	r3, ip, r8
   853b2:	ea49 0907 	orr.w	r9, r9, r7
   853b6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   853ba:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   853be:	428b      	cmp	r3, r1
   853c0:	fa06 f602 	lsl.w	r6, r6, r2
   853c4:	d908      	bls.n	853d8 <__divdi3+0x1a0>
   853c6:	1949      	adds	r1, r1, r5
   853c8:	f108 32ff 	add.w	r2, r8, #4294967295
   853cc:	d27a      	bcs.n	854c4 <__divdi3+0x28c>
   853ce:	428b      	cmp	r3, r1
   853d0:	d978      	bls.n	854c4 <__divdi3+0x28c>
   853d2:	f1a8 0802 	sub.w	r8, r8, #2
   853d6:	4429      	add	r1, r5
   853d8:	1ac9      	subs	r1, r1, r3
   853da:	fbb1 f3f0 	udiv	r3, r1, r0
   853de:	fb00 1713 	mls	r7, r0, r3, r1
   853e2:	fb0c f203 	mul.w	r2, ip, r3
   853e6:	fa1f f989 	uxth.w	r9, r9
   853ea:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   853ee:	42ba      	cmp	r2, r7
   853f0:	d907      	bls.n	85402 <__divdi3+0x1ca>
   853f2:	197f      	adds	r7, r7, r5
   853f4:	f103 31ff 	add.w	r1, r3, #4294967295
   853f8:	d260      	bcs.n	854bc <__divdi3+0x284>
   853fa:	42ba      	cmp	r2, r7
   853fc:	d95e      	bls.n	854bc <__divdi3+0x284>
   853fe:	3b02      	subs	r3, #2
   85400:	442f      	add	r7, r5
   85402:	1abf      	subs	r7, r7, r2
   85404:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85408:	e78c      	b.n	85324 <__divdi3+0xec>
   8540a:	f1c8 0220 	rsb	r2, r8, #32
   8540e:	fa25 f102 	lsr.w	r1, r5, r2
   85412:	fa03 fc08 	lsl.w	ip, r3, r8
   85416:	fa27 f302 	lsr.w	r3, r7, r2
   8541a:	fa20 f202 	lsr.w	r2, r0, r2
   8541e:	fa07 f708 	lsl.w	r7, r7, r8
   85422:	ea41 0c0c 	orr.w	ip, r1, ip
   85426:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8542a:	fbb3 f1f9 	udiv	r1, r3, r9
   8542e:	fb09 3311 	mls	r3, r9, r1, r3
   85432:	fa1f fa8c 	uxth.w	sl, ip
   85436:	fb0a fb01 	mul.w	fp, sl, r1
   8543a:	4317      	orrs	r7, r2
   8543c:	0c3a      	lsrs	r2, r7, #16
   8543e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85442:	459b      	cmp	fp, r3
   85444:	fa05 f008 	lsl.w	r0, r5, r8
   85448:	d908      	bls.n	8545c <__divdi3+0x224>
   8544a:	eb13 030c 	adds.w	r3, r3, ip
   8544e:	f101 32ff 	add.w	r2, r1, #4294967295
   85452:	d235      	bcs.n	854c0 <__divdi3+0x288>
   85454:	459b      	cmp	fp, r3
   85456:	d933      	bls.n	854c0 <__divdi3+0x288>
   85458:	3902      	subs	r1, #2
   8545a:	4463      	add	r3, ip
   8545c:	ebcb 0303 	rsb	r3, fp, r3
   85460:	fbb3 f2f9 	udiv	r2, r3, r9
   85464:	fb09 3312 	mls	r3, r9, r2, r3
   85468:	fb0a fa02 	mul.w	sl, sl, r2
   8546c:	b2bf      	uxth	r7, r7
   8546e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85472:	45ba      	cmp	sl, r7
   85474:	d908      	bls.n	85488 <__divdi3+0x250>
   85476:	eb17 070c 	adds.w	r7, r7, ip
   8547a:	f102 33ff 	add.w	r3, r2, #4294967295
   8547e:	d21b      	bcs.n	854b8 <__divdi3+0x280>
   85480:	45ba      	cmp	sl, r7
   85482:	d919      	bls.n	854b8 <__divdi3+0x280>
   85484:	3a02      	subs	r2, #2
   85486:	4467      	add	r7, ip
   85488:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   8548c:	fba5 0100 	umull	r0, r1, r5, r0
   85490:	ebca 0707 	rsb	r7, sl, r7
   85494:	428f      	cmp	r7, r1
   85496:	f04f 0300 	mov.w	r3, #0
   8549a:	d30a      	bcc.n	854b2 <__divdi3+0x27a>
   8549c:	d005      	beq.n	854aa <__divdi3+0x272>
   8549e:	462a      	mov	r2, r5
   854a0:	e71c      	b.n	852dc <__divdi3+0xa4>
   854a2:	4662      	mov	r2, ip
   854a4:	e6fd      	b.n	852a2 <__divdi3+0x6a>
   854a6:	463b      	mov	r3, r7
   854a8:	e710      	b.n	852cc <__divdi3+0x94>
   854aa:	fa06 f608 	lsl.w	r6, r6, r8
   854ae:	4286      	cmp	r6, r0
   854b0:	d2f5      	bcs.n	8549e <__divdi3+0x266>
   854b2:	1e6a      	subs	r2, r5, #1
   854b4:	2300      	movs	r3, #0
   854b6:	e711      	b.n	852dc <__divdi3+0xa4>
   854b8:	461a      	mov	r2, r3
   854ba:	e7e5      	b.n	85488 <__divdi3+0x250>
   854bc:	460b      	mov	r3, r1
   854be:	e7a0      	b.n	85402 <__divdi3+0x1ca>
   854c0:	4611      	mov	r1, r2
   854c2:	e7cb      	b.n	8545c <__divdi3+0x224>
   854c4:	4690      	mov	r8, r2
   854c6:	e787      	b.n	853d8 <__divdi3+0x1a0>
   854c8:	4643      	mov	r3, r8
   854ca:	4642      	mov	r2, r8
   854cc:	e706      	b.n	852dc <__divdi3+0xa4>
   854ce:	3a02      	subs	r2, #2
   854d0:	e750      	b.n	85374 <__divdi3+0x13c>
   854d2:	3902      	subs	r1, #2
   854d4:	442f      	add	r7, r5
   854d6:	e739      	b.n	8534c <__divdi3+0x114>

000854d8 <__udivdi3>:
   854d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   854dc:	4614      	mov	r4, r2
   854de:	4605      	mov	r5, r0
   854e0:	460e      	mov	r6, r1
   854e2:	2b00      	cmp	r3, #0
   854e4:	d143      	bne.n	8556e <__udivdi3+0x96>
   854e6:	428a      	cmp	r2, r1
   854e8:	d953      	bls.n	85592 <__udivdi3+0xba>
   854ea:	fab2 f782 	clz	r7, r2
   854ee:	b157      	cbz	r7, 85506 <__udivdi3+0x2e>
   854f0:	f1c7 0620 	rsb	r6, r7, #32
   854f4:	fa20 f606 	lsr.w	r6, r0, r6
   854f8:	fa01 f307 	lsl.w	r3, r1, r7
   854fc:	fa02 f407 	lsl.w	r4, r2, r7
   85500:	fa00 f507 	lsl.w	r5, r0, r7
   85504:	431e      	orrs	r6, r3
   85506:	0c21      	lsrs	r1, r4, #16
   85508:	fbb6 f2f1 	udiv	r2, r6, r1
   8550c:	fb01 6612 	mls	r6, r1, r2, r6
   85510:	b2a0      	uxth	r0, r4
   85512:	fb00 f302 	mul.w	r3, r0, r2
   85516:	0c2f      	lsrs	r7, r5, #16
   85518:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8551c:	42b3      	cmp	r3, r6
   8551e:	d909      	bls.n	85534 <__udivdi3+0x5c>
   85520:	1936      	adds	r6, r6, r4
   85522:	f102 37ff 	add.w	r7, r2, #4294967295
   85526:	f080 80fd 	bcs.w	85724 <__udivdi3+0x24c>
   8552a:	42b3      	cmp	r3, r6
   8552c:	f240 80fa 	bls.w	85724 <__udivdi3+0x24c>
   85530:	3a02      	subs	r2, #2
   85532:	4426      	add	r6, r4
   85534:	1af6      	subs	r6, r6, r3
   85536:	fbb6 f3f1 	udiv	r3, r6, r1
   8553a:	fb01 6113 	mls	r1, r1, r3, r6
   8553e:	fb00 f003 	mul.w	r0, r0, r3
   85542:	b2ad      	uxth	r5, r5
   85544:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85548:	4288      	cmp	r0, r1
   8554a:	d908      	bls.n	8555e <__udivdi3+0x86>
   8554c:	1909      	adds	r1, r1, r4
   8554e:	f103 36ff 	add.w	r6, r3, #4294967295
   85552:	f080 80e9 	bcs.w	85728 <__udivdi3+0x250>
   85556:	4288      	cmp	r0, r1
   85558:	f240 80e6 	bls.w	85728 <__udivdi3+0x250>
   8555c:	3b02      	subs	r3, #2
   8555e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85562:	2300      	movs	r3, #0
   85564:	4610      	mov	r0, r2
   85566:	4619      	mov	r1, r3
   85568:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8556c:	4770      	bx	lr
   8556e:	428b      	cmp	r3, r1
   85570:	d84c      	bhi.n	8560c <__udivdi3+0x134>
   85572:	fab3 f683 	clz	r6, r3
   85576:	2e00      	cmp	r6, #0
   85578:	d14f      	bne.n	8561a <__udivdi3+0x142>
   8557a:	428b      	cmp	r3, r1
   8557c:	d302      	bcc.n	85584 <__udivdi3+0xac>
   8557e:	4282      	cmp	r2, r0
   85580:	f200 80dd 	bhi.w	8573e <__udivdi3+0x266>
   85584:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85588:	2300      	movs	r3, #0
   8558a:	2201      	movs	r2, #1
   8558c:	4610      	mov	r0, r2
   8558e:	4619      	mov	r1, r3
   85590:	4770      	bx	lr
   85592:	b912      	cbnz	r2, 8559a <__udivdi3+0xc2>
   85594:	2401      	movs	r4, #1
   85596:	fbb4 f4f2 	udiv	r4, r4, r2
   8559a:	fab4 f284 	clz	r2, r4
   8559e:	2a00      	cmp	r2, #0
   855a0:	f040 8082 	bne.w	856a8 <__udivdi3+0x1d0>
   855a4:	1b09      	subs	r1, r1, r4
   855a6:	0c26      	lsrs	r6, r4, #16
   855a8:	b2a7      	uxth	r7, r4
   855aa:	2301      	movs	r3, #1
   855ac:	fbb1 f0f6 	udiv	r0, r1, r6
   855b0:	fb06 1110 	mls	r1, r6, r0, r1
   855b4:	fb07 f200 	mul.w	r2, r7, r0
   855b8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   855bc:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   855c0:	428a      	cmp	r2, r1
   855c2:	d907      	bls.n	855d4 <__udivdi3+0xfc>
   855c4:	1909      	adds	r1, r1, r4
   855c6:	f100 3cff 	add.w	ip, r0, #4294967295
   855ca:	d202      	bcs.n	855d2 <__udivdi3+0xfa>
   855cc:	428a      	cmp	r2, r1
   855ce:	f200 80c8 	bhi.w	85762 <__udivdi3+0x28a>
   855d2:	4660      	mov	r0, ip
   855d4:	1a89      	subs	r1, r1, r2
   855d6:	fbb1 f2f6 	udiv	r2, r1, r6
   855da:	fb06 1112 	mls	r1, r6, r2, r1
   855de:	fb07 f702 	mul.w	r7, r7, r2
   855e2:	b2ad      	uxth	r5, r5
   855e4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   855e8:	42af      	cmp	r7, r5
   855ea:	d908      	bls.n	855fe <__udivdi3+0x126>
   855ec:	192c      	adds	r4, r5, r4
   855ee:	f102 31ff 	add.w	r1, r2, #4294967295
   855f2:	f080 809b 	bcs.w	8572c <__udivdi3+0x254>
   855f6:	42a7      	cmp	r7, r4
   855f8:	f240 8098 	bls.w	8572c <__udivdi3+0x254>
   855fc:	3a02      	subs	r2, #2
   855fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   85602:	4610      	mov	r0, r2
   85604:	4619      	mov	r1, r3
   85606:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8560a:	4770      	bx	lr
   8560c:	2300      	movs	r3, #0
   8560e:	461a      	mov	r2, r3
   85610:	4610      	mov	r0, r2
   85612:	4619      	mov	r1, r3
   85614:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85618:	4770      	bx	lr
   8561a:	f1c6 0520 	rsb	r5, r6, #32
   8561e:	fa22 f705 	lsr.w	r7, r2, r5
   85622:	fa03 f406 	lsl.w	r4, r3, r6
   85626:	fa21 f305 	lsr.w	r3, r1, r5
   8562a:	fa01 fb06 	lsl.w	fp, r1, r6
   8562e:	fa20 f505 	lsr.w	r5, r0, r5
   85632:	433c      	orrs	r4, r7
   85634:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85638:	fbb3 fcf8 	udiv	ip, r3, r8
   8563c:	fb08 331c 	mls	r3, r8, ip, r3
   85640:	fa1f f984 	uxth.w	r9, r4
   85644:	fb09 fa0c 	mul.w	sl, r9, ip
   85648:	ea45 0b0b 	orr.w	fp, r5, fp
   8564c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85650:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85654:	459a      	cmp	sl, r3
   85656:	fa02 f206 	lsl.w	r2, r2, r6
   8565a:	d904      	bls.n	85666 <__udivdi3+0x18e>
   8565c:	191b      	adds	r3, r3, r4
   8565e:	f10c 35ff 	add.w	r5, ip, #4294967295
   85662:	d36f      	bcc.n	85744 <__udivdi3+0x26c>
   85664:	46ac      	mov	ip, r5
   85666:	ebca 0303 	rsb	r3, sl, r3
   8566a:	fbb3 f5f8 	udiv	r5, r3, r8
   8566e:	fb08 3315 	mls	r3, r8, r5, r3
   85672:	fb09 f905 	mul.w	r9, r9, r5
   85676:	fa1f fb8b 	uxth.w	fp, fp
   8567a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   8567e:	45b9      	cmp	r9, r7
   85680:	d904      	bls.n	8568c <__udivdi3+0x1b4>
   85682:	193f      	adds	r7, r7, r4
   85684:	f105 33ff 	add.w	r3, r5, #4294967295
   85688:	d362      	bcc.n	85750 <__udivdi3+0x278>
   8568a:	461d      	mov	r5, r3
   8568c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85690:	fbac 2302 	umull	r2, r3, ip, r2
   85694:	ebc9 0707 	rsb	r7, r9, r7
   85698:	429f      	cmp	r7, r3
   8569a:	f04f 0500 	mov.w	r5, #0
   8569e:	d34a      	bcc.n	85736 <__udivdi3+0x25e>
   856a0:	d046      	beq.n	85730 <__udivdi3+0x258>
   856a2:	4662      	mov	r2, ip
   856a4:	462b      	mov	r3, r5
   856a6:	e75d      	b.n	85564 <__udivdi3+0x8c>
   856a8:	4094      	lsls	r4, r2
   856aa:	f1c2 0920 	rsb	r9, r2, #32
   856ae:	fa21 fc09 	lsr.w	ip, r1, r9
   856b2:	4091      	lsls	r1, r2
   856b4:	fa20 f909 	lsr.w	r9, r0, r9
   856b8:	0c26      	lsrs	r6, r4, #16
   856ba:	fbbc f8f6 	udiv	r8, ip, r6
   856be:	fb06 cc18 	mls	ip, r6, r8, ip
   856c2:	b2a7      	uxth	r7, r4
   856c4:	fb07 f308 	mul.w	r3, r7, r8
   856c8:	ea49 0901 	orr.w	r9, r9, r1
   856cc:	ea4f 4119 	mov.w	r1, r9, lsr #16
   856d0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   856d4:	4563      	cmp	r3, ip
   856d6:	fa00 f502 	lsl.w	r5, r0, r2
   856da:	d909      	bls.n	856f0 <__udivdi3+0x218>
   856dc:	eb1c 0c04 	adds.w	ip, ip, r4
   856e0:	f108 32ff 	add.w	r2, r8, #4294967295
   856e4:	d23b      	bcs.n	8575e <__udivdi3+0x286>
   856e6:	4563      	cmp	r3, ip
   856e8:	d939      	bls.n	8575e <__udivdi3+0x286>
   856ea:	f1a8 0802 	sub.w	r8, r8, #2
   856ee:	44a4      	add	ip, r4
   856f0:	ebc3 0c0c 	rsb	ip, r3, ip
   856f4:	fbbc f3f6 	udiv	r3, ip, r6
   856f8:	fb06 c113 	mls	r1, r6, r3, ip
   856fc:	fb07 f203 	mul.w	r2, r7, r3
   85700:	fa1f f989 	uxth.w	r9, r9
   85704:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   85708:	428a      	cmp	r2, r1
   8570a:	d907      	bls.n	8571c <__udivdi3+0x244>
   8570c:	1909      	adds	r1, r1, r4
   8570e:	f103 30ff 	add.w	r0, r3, #4294967295
   85712:	d222      	bcs.n	8575a <__udivdi3+0x282>
   85714:	428a      	cmp	r2, r1
   85716:	d920      	bls.n	8575a <__udivdi3+0x282>
   85718:	3b02      	subs	r3, #2
   8571a:	4421      	add	r1, r4
   8571c:	1a89      	subs	r1, r1, r2
   8571e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85722:	e743      	b.n	855ac <__udivdi3+0xd4>
   85724:	463a      	mov	r2, r7
   85726:	e705      	b.n	85534 <__udivdi3+0x5c>
   85728:	4633      	mov	r3, r6
   8572a:	e718      	b.n	8555e <__udivdi3+0x86>
   8572c:	460a      	mov	r2, r1
   8572e:	e766      	b.n	855fe <__udivdi3+0x126>
   85730:	40b0      	lsls	r0, r6
   85732:	4290      	cmp	r0, r2
   85734:	d2b5      	bcs.n	856a2 <__udivdi3+0x1ca>
   85736:	f10c 32ff 	add.w	r2, ip, #4294967295
   8573a:	2300      	movs	r3, #0
   8573c:	e712      	b.n	85564 <__udivdi3+0x8c>
   8573e:	4633      	mov	r3, r6
   85740:	4632      	mov	r2, r6
   85742:	e70f      	b.n	85564 <__udivdi3+0x8c>
   85744:	459a      	cmp	sl, r3
   85746:	d98d      	bls.n	85664 <__udivdi3+0x18c>
   85748:	f1ac 0c02 	sub.w	ip, ip, #2
   8574c:	4423      	add	r3, r4
   8574e:	e78a      	b.n	85666 <__udivdi3+0x18e>
   85750:	45b9      	cmp	r9, r7
   85752:	d99a      	bls.n	8568a <__udivdi3+0x1b2>
   85754:	3d02      	subs	r5, #2
   85756:	4427      	add	r7, r4
   85758:	e798      	b.n	8568c <__udivdi3+0x1b4>
   8575a:	4603      	mov	r3, r0
   8575c:	e7de      	b.n	8571c <__udivdi3+0x244>
   8575e:	4690      	mov	r8, r2
   85760:	e7c6      	b.n	856f0 <__udivdi3+0x218>
   85762:	3802      	subs	r0, #2
   85764:	4421      	add	r1, r4
   85766:	e735      	b.n	855d4 <__udivdi3+0xfc>
   85768:	736e6f43 	.word	0x736e6f43
   8576c:	20656c6f 	.word	0x20656c6f
   85770:	64616572 	.word	0x64616572
   85774:	00000a79 	.word	0x00000a79
   85778:	3d3d3d3d 	.word	0x3d3d3d3d
   8577c:	3d3d3d3d 	.word	0x3d3d3d3d
   85780:	3d3d3d3d 	.word	0x3d3d3d3d
   85784:	00000a3d 	.word	0x00000a3d
   85788:	0c040800 	.word	0x0c040800
   8578c:	0e060a02 	.word	0x0e060a02
   85790:	0d050901 	.word	0x0d050901
   85794:	0f070b03 	.word	0x0f070b03
   85798:	742f2e2e 	.word	0x742f2e2e
   8579c:	2f747365 	.word	0x2f747365
   857a0:	74736574 	.word	0x74736574
   857a4:	6c65645f 	.word	0x6c65645f
   857a8:	75467961 	.word	0x75467961
   857ac:	6974636e 	.word	0x6974636e
   857b0:	2e736e6f 	.word	0x2e736e6f
   857b4:	00000063 	.word	0x00000063
   857b8:	74736574 	.word	0x74736574
   857bc:	6c65645f 	.word	0x6c65645f
   857c0:	69547961 	.word	0x69547961
   857c4:	4972656d 	.word	0x4972656d
   857c8:	696e4973 	.word	0x696e4973
   857cc:	6c616974 	.word	0x6c616974
   857d0:	64657369 	.word	0x64657369
   857d4:	706f7250 	.word	0x706f7250
   857d8:	796c7265 	.word	0x796c7265
   857dc:	00000000 	.word	0x00000000
   857e0:	74736574 	.word	0x74736574
   857e4:	6c65645f 	.word	0x6c65645f
   857e8:	6f437961 	.word	0x6f437961
   857ec:	73746e75 	.word	0x73746e75
   857f0:	706f7250 	.word	0x706f7250
   857f4:	796c7265 	.word	0x796c7265
   857f8:	00000000 	.word	0x00000000
   857fc:	742f2e2e 	.word	0x742f2e2e
   85800:	2f747365 	.word	0x2f747365
   85804:	74736574 	.word	0x74736574
   85808:	64636c5f 	.word	0x64636c5f
   8580c:	636e7546 	.word	0x636e7546
   85810:	6e6f6974 	.word	0x6e6f6974
   85814:	00632e73 	.word	0x00632e73
   85818:	74736574 	.word	0x74736574
   8581c:	696e695f 	.word	0x696e695f
   85820:	6c616974 	.word	0x6c616974
   85824:	74617369 	.word	0x74617369
   85828:	664f6e69 	.word	0x664f6e69
   8582c:	4c656854 	.word	0x4c656854
   85830:	00004443 	.word	0x00004443
   85834:	74736574 	.word	0x74736574
   85838:	6972775f 	.word	0x6972775f
   8583c:	676e6974 	.word	0x676e6974
   85840:	72616843 	.word	0x72616843
   85844:	65746361 	.word	0x65746361
   85848:	6f547372 	.word	0x6f547372
   8584c:	4c656854 	.word	0x4c656854
   85850:	00004443 	.word	0x00004443
   85854:	74736574 	.word	0x74736574
   85858:	656c635f 	.word	0x656c635f
   8585c:	6e697261 	.word	0x6e697261
   85860:	65685467 	.word	0x65685467
   85864:	4444434c 	.word	0x4444434c
   85868:	6c707369 	.word	0x6c707369
   8586c:	00007961 	.word	0x00007961
   85870:	742f2e2e 	.word	0x742f2e2e
   85874:	2f747365 	.word	0x2f747365
   85878:	74736574 	.word	0x74736574
   8587c:	6364615f 	.word	0x6364615f
   85880:	636e7546 	.word	0x636e7546
   85884:	6e6f6974 	.word	0x6e6f6974
   85888:	00632e73 	.word	0x00632e73
   8588c:	74736574 	.word	0x74736574
   85890:	4344415f 	.word	0x4344415f
   85894:	65766e6f 	.word	0x65766e6f
   85898:	72657472 	.word	0x72657472
   8589c:	74696e49 	.word	0x74696e49
   858a0:	696c6169 	.word	0x696c6169
   858a4:	50736573 	.word	0x50736573
   858a8:	65706f72 	.word	0x65706f72
   858ac:	00796c72 	.word	0x00796c72
   858b0:	74736574 	.word	0x74736574
   858b4:	4344415f 	.word	0x4344415f
   858b8:	65766e6f 	.word	0x65766e6f
   858bc:	72657472 	.word	0x72657472
   858c0:	64616552 	.word	0x64616552
   858c4:	6c615673 	.word	0x6c615673
   858c8:	69576575 	.word	0x69576575
   858cc:	6f4e6874 	.word	0x6f4e6874
   858d0:	74747542 	.word	0x74747542
   858d4:	72506e6f 	.word	0x72506e6f
   858d8:	65737365 	.word	0x65737365
   858dc:	00000064 	.word	0x00000064
   858e0:	742f2e2e 	.word	0x742f2e2e
   858e4:	2f747365 	.word	0x2f747365
   858e8:	74736574 	.word	0x74736574
   858ec:	7475625f 	.word	0x7475625f
   858f0:	736e6f74 	.word	0x736e6f74
   858f4:	0000632e 	.word	0x0000632e
   858f8:	74736574 	.word	0x74736574
   858fc:	426f6e5f 	.word	0x426f6e5f
   85900:	6f747475 	.word	0x6f747475
   85904:	5073496e 	.word	0x5073496e
   85908:	73736572 	.word	0x73736572
   8590c:	00006465 	.word	0x00006465
   85910:	742f2e2e 	.word	0x742f2e2e
   85914:	2f747365 	.word	0x2f747365
   85918:	74736574 	.word	0x74736574
   8591c:	64636c5f 	.word	0x64636c5f
   85920:	6c707041 	.word	0x6c707041
   85924:	74616369 	.word	0x74616369
   85928:	2e6e6f69 	.word	0x2e6e6f69
   8592c:	00000063 	.word	0x00000063
   85930:	74736574 	.word	0x74736574
   85934:	6972775f 	.word	0x6972775f
   85938:	676e6974 	.word	0x676e6974
   8593c:	67694434 	.word	0x67694434
   85940:	754e7469 	.word	0x754e7469
   85944:	7265626d 	.word	0x7265626d
   85948:	68546e4f 	.word	0x68546e4f
   8594c:	44434c65 	.word	0x44434c65
   85950:	70736944 	.word	0x70736944
   85954:	0079616c 	.word	0x0079616c
   85958:	74736574 	.word	0x74736574
   8595c:	6972775f 	.word	0x6972775f
   85960:	676e6974 	.word	0x676e6974
   85964:	69637341 	.word	0x69637341
   85968:	72745369 	.word	0x72745369
   8596c:	4f676e69 	.word	0x4f676e69
   85970:	6568546e 	.word	0x6568546e
   85974:	4444434c 	.word	0x4444434c
   85978:	6c707369 	.word	0x6c707369
   8597c:	00007961 	.word	0x00007961
   85980:	74736574 	.word	0x74736574
   85984:	6972775f 	.word	0x6972775f
   85988:	676e6974 	.word	0x676e6974
   8598c:	74747542 	.word	0x74747542
   85990:	6e4f6e6f 	.word	0x6e4f6e6f
   85994:	4c656854 	.word	0x4c656854
   85998:	69444443 	.word	0x69444443
   8599c:	616c7073 	.word	0x616c7073
   859a0:	00000079 	.word	0x00000079
   859a4:	20434d50 	.word	0x20434d50
   859a8:	20736168 	.word	0x20736168
   859ac:	20746f6e 	.word	0x20746f6e
   859b0:	62616e65 	.word	0x62616e65
   859b4:	2064656c 	.word	0x2064656c
   859b8:	20656874 	.word	0x20656874
   859bc:	69726570 	.word	0x69726570
   859c0:	72656870 	.word	0x72656870
   859c4:	41206c61 	.word	0x41206c61
   859c8:	63204344 	.word	0x63204344
   859cc:	6b636f6c 	.word	0x6b636f6c
   859d0:	00000000 	.word	0x00000000
   859d4:	20434441 	.word	0x20434441
   859d8:	6e616863 	.word	0x6e616863
   859dc:	206c656e 	.word	0x206c656e
   859e0:	73692037 	.word	0x73692037
   859e4:	746f6e20 	.word	0x746f6e20
   859e8:	616e6520 	.word	0x616e6520
   859ec:	64656c62 	.word	0x64656c62
   859f0:	00000000 	.word	0x00000000
   859f4:	70784520 	.word	0x70784520
   859f8:	65746365 	.word	0x65746365
   859fc:	52542064 	.word	0x52542064
   85a00:	57204555 	.word	0x57204555
   85a04:	46207361 	.word	0x46207361
   85a08:	45534c41 	.word	0x45534c41
   85a0c:	00000000 	.word	0x00000000
   85a10:	70784520 	.word	0x70784520
   85a14:	65746365 	.word	0x65746365
   85a18:	41462064 	.word	0x41462064
   85a1c:	2045534c 	.word	0x2045534c
   85a20:	20736157 	.word	0x20736157
   85a24:	45555254 	.word	0x45555254
   85a28:	00000000 	.word	0x00000000
   85a2c:	74736554 	.word	0x74736554
   85a30:	65766520 	.word	0x65766520
   85a34:	68747972 	.word	0x68747972
   85a38:	21676e69 	.word	0x21676e69
   85a3c:	00000000 	.word	0x00000000

00085a40 <p_PIOC_ODSR>:
   85a40:	400e1238                                8..@

00085a44 <UnitySizeMask>:
   85a44:	000000ff 0000ffff 0000ffff ffffffff     ................
   85a54:	ffffffff ffffffff ffffffff              ............

00085a60 <UnityStrOk>:
   85a60:	00004b4f                                OK..

00085a64 <UnityStrSpacer>:
   85a64:	0000202e                                . ..

00085a68 <UnityStrWas>:
   85a68:	73615720 00000020                        Was ...

00085a70 <UnityStrFail>:
   85a70:	4c494146 00000000                       FAIL....

00085a78 <UnityStrExpected>:
   85a78:	70784520 65746365 00002064               Expected ..

00085a84 <UnityStrBreaker>:
   85a84:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   85a94:	2d2d2d2d 002d2d2d                       -------.

00085a9c <UnityStrResultsFailures>:
   85a9c:	69614620 6572756c 00002073               Failures ..

00085aa8 <UnityStrResultsIgnored>:
   85aa8:	6e674920 6465726f 00000020               Ignored ...

00085ab4 <UnityStrResultsTests>:
   85ab4:	73655420 00207374                        Tests .

00085abc <UnityStrPass>:
   85abc:	53534150 00000000                       PASS....

00085ac4 <UnityStrDelta>:
   85ac4:	6c615620 20736575 20746f4e 68746957      Values Not With
   85ad4:	44206e69 61746c65 00000020 00000043     in Delta ...C...

00085ae4 <_global_impure_ptr>:
   85ae4:	20070160 33323130 37363534 42413938     `.. 0123456789AB
   85af4:	46454443 00000000 33323130 37363534     CDEF....01234567
   85b04:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85b14:	0000296c                                l)..

00085b18 <zeroes.6721>:
   85b18:	30303030 30303030 30303030 30303030     0000000000000000

00085b28 <blanks.6720>:
   85b28:	20202020 20202020 20202020 20202020                     

00085b38 <_init>:
   85b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85b3a:	bf00      	nop
   85b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85b3e:	bc08      	pop	{r3}
   85b40:	469e      	mov	lr, r3
   85b42:	4770      	bx	lr

00085b44 <__init_array_start>:
   85b44:	00083905 	.word	0x00083905

00085b48 <__frame_dummy_init_array_entry>:
   85b48:	00080119                                ....

00085b4c <_fini>:
   85b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85b4e:	bf00      	nop
   85b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85b52:	bc08      	pop	{r3}
   85b54:	469e      	mov	lr, r3
   85b56:	4770      	bx	lr

00085b58 <__fini_array_start>:
   85b58:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007015c 	.word	0x2007015c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <adc_Channels>:
2007012c:	00000007 00000006 00000005 00000003     ................
2007013c:	00000002 00000001 00000000 0000000a     ................
2007014c:	0000000b 0000000c 0000000d              ............

20070158 <g_interrupt_enabled>:
20070158:	00000001                                ....

2007015c <SystemCoreClock>:
2007015c:	003d0900                                ..=.

20070160 <impure_data>:
20070160:	00000000 2007044c 200704b4 2007051c     ....L.. ... ... 
	...
20070194:	00085ae0 00000000 00000000 00000000     .Z..............
	...
20070208:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070218:	0005deec 0000000b 00000000 00000000     ................
	...

20070588 <_impure_ptr>:
20070588:	20070160                                `.. 

2007058c <lc_ctype_charset>:
2007058c:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705ac <__mb_cur_max>:
200705ac:	00000001                                ....

200705b0 <__malloc_av_>:
	...
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 

200709b8 <__malloc_trim_threshold>:
200709b8:	00020000                                ....

200709bc <__malloc_sbrk_base>:
200709bc:	ffffffff                                ....

200709c0 <__wctomb>:
200709c0:	00084f6d                                mO..
